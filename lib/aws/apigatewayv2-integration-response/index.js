"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Apigatewayv2IntegrationResponse = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/3.76.1/docs/resources/apigatewayv2_integration_response aws_apigatewayv2_integration_response}
*/
class Apigatewayv2IntegrationResponse extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a Apigatewayv2IntegrationResponse resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the Apigatewayv2IntegrationResponse to import
    * @param importFromId The id of the existing Apigatewayv2IntegrationResponse that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/3.76.1/docs/resources/apigatewayv2_integration_response#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the Apigatewayv2IntegrationResponse to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_apigatewayv2_integration_response", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/3.76.1/docs/resources/apigatewayv2_integration_response aws_apigatewayv2_integration_response} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options Apigatewayv2IntegrationResponseConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_apigatewayv2_integration_response',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '3.76.1',
                providerVersionConstraint: '~> 3.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._apiId = config.apiId;
        this._contentHandlingStrategy = config.contentHandlingStrategy;
        this._id = config.id;
        this._integrationId = config.integrationId;
        this._integrationResponseKey = config.integrationResponseKey;
        this._responseTemplates = config.responseTemplates;
        this._templateSelectionExpression = config.templateSelectionExpression;
    }
    get apiId() {
        return this.getStringAttribute('api_id');
    }
    set apiId(value) {
        this._apiId = value;
    }
    // Temporarily expose input value. Use with caution.
    get apiIdInput() {
        return this._apiId;
    }
    get contentHandlingStrategy() {
        return this.getStringAttribute('content_handling_strategy');
    }
    set contentHandlingStrategy(value) {
        this._contentHandlingStrategy = value;
    }
    resetContentHandlingStrategy() {
        this._contentHandlingStrategy = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get contentHandlingStrategyInput() {
        return this._contentHandlingStrategy;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get integrationId() {
        return this.getStringAttribute('integration_id');
    }
    set integrationId(value) {
        this._integrationId = value;
    }
    // Temporarily expose input value. Use with caution.
    get integrationIdInput() {
        return this._integrationId;
    }
    get integrationResponseKey() {
        return this.getStringAttribute('integration_response_key');
    }
    set integrationResponseKey(value) {
        this._integrationResponseKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get integrationResponseKeyInput() {
        return this._integrationResponseKey;
    }
    get responseTemplates() {
        return this.getStringMapAttribute('response_templates');
    }
    set responseTemplates(value) {
        this._responseTemplates = value;
    }
    resetResponseTemplates() {
        this._responseTemplates = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get responseTemplatesInput() {
        return this._responseTemplates;
    }
    get templateSelectionExpression() {
        return this.getStringAttribute('template_selection_expression');
    }
    set templateSelectionExpression(value) {
        this._templateSelectionExpression = value;
    }
    resetTemplateSelectionExpression() {
        this._templateSelectionExpression = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get templateSelectionExpressionInput() {
        return this._templateSelectionExpression;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            api_id: cdktf.stringToTerraform(this._apiId),
            content_handling_strategy: cdktf.stringToTerraform(this._contentHandlingStrategy),
            id: cdktf.stringToTerraform(this._id),
            integration_id: cdktf.stringToTerraform(this._integrationId),
            integration_response_key: cdktf.stringToTerraform(this._integrationResponseKey),
            response_templates: cdktf.hashMapper(cdktf.stringToTerraform)(this._responseTemplates),
            template_selection_expression: cdktf.stringToTerraform(this._templateSelectionExpression),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            api_id: {
                value: cdktf.stringToHclTerraform(this._apiId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            content_handling_strategy: {
                value: cdktf.stringToHclTerraform(this._contentHandlingStrategy),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            integration_id: {
                value: cdktf.stringToHclTerraform(this._integrationId),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            integration_response_key: {
                value: cdktf.stringToHclTerraform(this._integrationResponseKey),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            response_templates: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._responseTemplates),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            template_selection_expression: {
                value: cdktf.stringToHclTerraform(this._templateSelectionExpression),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.Apigatewayv2IntegrationResponse = Apigatewayv2IntegrationResponse;
_a = JSII_RTTI_SYMBOL_1;
Apigatewayv2IntegrationResponse[_a] = { fqn: "@cdktf/aws-cdk.apigatewayv2IntegrationResponse.Apigatewayv2IntegrationResponse", version: "0.0.0" };
// =================
// STATIC PROPERTIES
// =================
Apigatewayv2IntegrationResponse.tfResourceType = "aws_apigatewayv2_integration_response";
//# sourceMappingURL=data:application/json;base64,