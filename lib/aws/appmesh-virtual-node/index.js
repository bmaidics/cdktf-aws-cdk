"use strict";
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45;
Object.defineProperty(exports, "__esModule", { value: true });
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateToTerraform = exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutputReference = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsToHclTerraform = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsToTerraform = exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutputReference = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileToHclTerraform = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileToTerraform = exports.AppmeshVirtualNodeSpecBackendList = exports.AppmeshVirtualNodeSpecBackendOutputReference = exports.appmeshVirtualNodeSpecBackendToHclTerraform = exports.appmeshVirtualNodeSpecBackendToTerraform = exports.AppmeshVirtualNodeSpecBackendVirtualServiceOutputReference = exports.appmeshVirtualNodeSpecBackendVirtualServiceToHclTerraform = exports.appmeshVirtualNodeSpecBackendVirtualServiceToTerraform = exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyOutputReference = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyToHclTerraform = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyToTerraform = exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutputReference = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsToHclTerraform = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsToTerraform = exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutputReference = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationToHclTerraform = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationToTerraform = exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutputReference = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustToHclTerraform = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustToTerraform = exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutputReference = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsToHclTerraform = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsToTerraform = exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutputReference = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileToHclTerraform = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileToTerraform = exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutputReference = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmToHclTerraform = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmToTerraform = exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutputReference = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesToHclTerraform = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesToTerraform = exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputReference = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchToHclTerraform = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchToTerraform = exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutputReference = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateToHclTerraform = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateToTerraform = exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutputReference = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsToHclTerraform = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsToTerraform = exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutputReference = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileToHclTerraform = exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileToTerraform = void 0;
exports.AppmeshVirtualNodeSpecListenerHealthCheckOutputReference = exports.appmeshVirtualNodeSpecListenerHealthCheckToHclTerraform = exports.appmeshVirtualNodeSpecListenerHealthCheckToTerraform = exports.AppmeshVirtualNodeSpecListenerConnectionPoolOutputReference = exports.appmeshVirtualNodeSpecListenerConnectionPoolToHclTerraform = exports.appmeshVirtualNodeSpecListenerConnectionPoolToTerraform = exports.AppmeshVirtualNodeSpecListenerConnectionPoolTcpOutputReference = exports.appmeshVirtualNodeSpecListenerConnectionPoolTcpToHclTerraform = exports.appmeshVirtualNodeSpecListenerConnectionPoolTcpToTerraform = exports.AppmeshVirtualNodeSpecListenerConnectionPoolHttp2OutputReference = exports.appmeshVirtualNodeSpecListenerConnectionPoolHttp2ToHclTerraform = exports.appmeshVirtualNodeSpecListenerConnectionPoolHttp2ToTerraform = exports.AppmeshVirtualNodeSpecListenerConnectionPoolHttpOutputReference = exports.appmeshVirtualNodeSpecListenerConnectionPoolHttpToHclTerraform = exports.appmeshVirtualNodeSpecListenerConnectionPoolHttpToTerraform = exports.AppmeshVirtualNodeSpecListenerConnectionPoolGrpcOutputReference = exports.appmeshVirtualNodeSpecListenerConnectionPoolGrpcToHclTerraform = exports.appmeshVirtualNodeSpecListenerConnectionPoolGrpcToTerraform = exports.AppmeshVirtualNodeSpecBackendDefaultsOutputReference = exports.appmeshVirtualNodeSpecBackendDefaultsToHclTerraform = exports.appmeshVirtualNodeSpecBackendDefaultsToTerraform = exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyOutputReference = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyToHclTerraform = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyToTerraform = exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsOutputReference = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsToHclTerraform = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsToTerraform = exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutputReference = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationToHclTerraform = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationToTerraform = exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutputReference = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustToHclTerraform = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustToTerraform = exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutputReference = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsToHclTerraform = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsToTerraform = exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutputReference = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileToHclTerraform = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileToTerraform = exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutputReference = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmToHclTerraform = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmToTerraform = exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutputReference = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesToHclTerraform = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesToTerraform = exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputReference = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchToHclTerraform = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchToTerraform = exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutputReference = exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateToHclTerraform = void 0;
exports.appmeshVirtualNodeSpecListenerTlsCertificateAcmToHclTerraform = exports.appmeshVirtualNodeSpecListenerTlsCertificateAcmToTerraform = exports.AppmeshVirtualNodeSpecListenerTimeoutOutputReference = exports.appmeshVirtualNodeSpecListenerTimeoutToHclTerraform = exports.appmeshVirtualNodeSpecListenerTimeoutToTerraform = exports.AppmeshVirtualNodeSpecListenerTimeoutTcpOutputReference = exports.appmeshVirtualNodeSpecListenerTimeoutTcpToHclTerraform = exports.appmeshVirtualNodeSpecListenerTimeoutTcpToTerraform = exports.AppmeshVirtualNodeSpecListenerTimeoutTcpIdleOutputReference = exports.appmeshVirtualNodeSpecListenerTimeoutTcpIdleToHclTerraform = exports.appmeshVirtualNodeSpecListenerTimeoutTcpIdleToTerraform = exports.AppmeshVirtualNodeSpecListenerTimeoutHttp2OutputReference = exports.appmeshVirtualNodeSpecListenerTimeoutHttp2ToHclTerraform = exports.appmeshVirtualNodeSpecListenerTimeoutHttp2ToTerraform = exports.AppmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestOutputReference = exports.appmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestToHclTerraform = exports.appmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestToTerraform = exports.AppmeshVirtualNodeSpecListenerTimeoutHttp2IdleOutputReference = exports.appmeshVirtualNodeSpecListenerTimeoutHttp2IdleToHclTerraform = exports.appmeshVirtualNodeSpecListenerTimeoutHttp2IdleToTerraform = exports.AppmeshVirtualNodeSpecListenerTimeoutHttpOutputReference = exports.appmeshVirtualNodeSpecListenerTimeoutHttpToHclTerraform = exports.appmeshVirtualNodeSpecListenerTimeoutHttpToTerraform = exports.AppmeshVirtualNodeSpecListenerTimeoutHttpPerRequestOutputReference = exports.appmeshVirtualNodeSpecListenerTimeoutHttpPerRequestToHclTerraform = exports.appmeshVirtualNodeSpecListenerTimeoutHttpPerRequestToTerraform = exports.AppmeshVirtualNodeSpecListenerTimeoutHttpIdleOutputReference = exports.appmeshVirtualNodeSpecListenerTimeoutHttpIdleToHclTerraform = exports.appmeshVirtualNodeSpecListenerTimeoutHttpIdleToTerraform = exports.AppmeshVirtualNodeSpecListenerTimeoutGrpcOutputReference = exports.appmeshVirtualNodeSpecListenerTimeoutGrpcToHclTerraform = exports.appmeshVirtualNodeSpecListenerTimeoutGrpcToTerraform = exports.AppmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestOutputReference = exports.appmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestToHclTerraform = exports.appmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestToTerraform = exports.AppmeshVirtualNodeSpecListenerTimeoutGrpcIdleOutputReference = exports.appmeshVirtualNodeSpecListenerTimeoutGrpcIdleToHclTerraform = exports.appmeshVirtualNodeSpecListenerTimeoutGrpcIdleToTerraform = exports.AppmeshVirtualNodeSpecListenerPortMappingOutputReference = exports.appmeshVirtualNodeSpecListenerPortMappingToHclTerraform = exports.appmeshVirtualNodeSpecListenerPortMappingToTerraform = exports.AppmeshVirtualNodeSpecListenerOutlierDetectionOutputReference = exports.appmeshVirtualNodeSpecListenerOutlierDetectionToHclTerraform = exports.appmeshVirtualNodeSpecListenerOutlierDetectionToTerraform = exports.AppmeshVirtualNodeSpecListenerOutlierDetectionIntervalOutputReference = exports.appmeshVirtualNodeSpecListenerOutlierDetectionIntervalToHclTerraform = exports.appmeshVirtualNodeSpecListenerOutlierDetectionIntervalToTerraform = exports.AppmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutputReference = exports.appmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationToHclTerraform = exports.appmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationToTerraform = void 0;
exports.appmeshVirtualNodeSpecServiceDiscoveryToTerraform = exports.AppmeshVirtualNodeSpecServiceDiscoveryDnsOutputReference = exports.appmeshVirtualNodeSpecServiceDiscoveryDnsToHclTerraform = exports.appmeshVirtualNodeSpecServiceDiscoveryDnsToTerraform = exports.AppmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputReference = exports.appmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapToHclTerraform = exports.appmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapToTerraform = exports.AppmeshVirtualNodeSpecLoggingOutputReference = exports.appmeshVirtualNodeSpecLoggingToHclTerraform = exports.appmeshVirtualNodeSpecLoggingToTerraform = exports.AppmeshVirtualNodeSpecLoggingAccessLogOutputReference = exports.appmeshVirtualNodeSpecLoggingAccessLogToHclTerraform = exports.appmeshVirtualNodeSpecLoggingAccessLogToTerraform = exports.AppmeshVirtualNodeSpecLoggingAccessLogFileOutputReference = exports.appmeshVirtualNodeSpecLoggingAccessLogFileToHclTerraform = exports.appmeshVirtualNodeSpecLoggingAccessLogFileToTerraform = exports.AppmeshVirtualNodeSpecListenerOutputReference = exports.appmeshVirtualNodeSpecListenerToHclTerraform = exports.appmeshVirtualNodeSpecListenerToTerraform = exports.AppmeshVirtualNodeSpecListenerTlsOutputReference = exports.appmeshVirtualNodeSpecListenerTlsToHclTerraform = exports.appmeshVirtualNodeSpecListenerTlsToTerraform = exports.AppmeshVirtualNodeSpecListenerTlsValidationOutputReference = exports.appmeshVirtualNodeSpecListenerTlsValidationToHclTerraform = exports.appmeshVirtualNodeSpecListenerTlsValidationToTerraform = exports.AppmeshVirtualNodeSpecListenerTlsValidationTrustOutputReference = exports.appmeshVirtualNodeSpecListenerTlsValidationTrustToHclTerraform = exports.appmeshVirtualNodeSpecListenerTlsValidationTrustToTerraform = exports.AppmeshVirtualNodeSpecListenerTlsValidationTrustSdsOutputReference = exports.appmeshVirtualNodeSpecListenerTlsValidationTrustSdsToHclTerraform = exports.appmeshVirtualNodeSpecListenerTlsValidationTrustSdsToTerraform = exports.AppmeshVirtualNodeSpecListenerTlsValidationTrustFileOutputReference = exports.appmeshVirtualNodeSpecListenerTlsValidationTrustFileToHclTerraform = exports.appmeshVirtualNodeSpecListenerTlsValidationTrustFileToTerraform = exports.AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutputReference = exports.appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesToHclTerraform = exports.appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesToTerraform = exports.AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutputReference = exports.appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchToHclTerraform = exports.appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchToTerraform = exports.AppmeshVirtualNodeSpecListenerTlsCertificateOutputReference = exports.appmeshVirtualNodeSpecListenerTlsCertificateToHclTerraform = exports.appmeshVirtualNodeSpecListenerTlsCertificateToTerraform = exports.AppmeshVirtualNodeSpecListenerTlsCertificateSdsOutputReference = exports.appmeshVirtualNodeSpecListenerTlsCertificateSdsToHclTerraform = exports.appmeshVirtualNodeSpecListenerTlsCertificateSdsToTerraform = exports.AppmeshVirtualNodeSpecListenerTlsCertificateFileOutputReference = exports.appmeshVirtualNodeSpecListenerTlsCertificateFileToHclTerraform = exports.appmeshVirtualNodeSpecListenerTlsCertificateFileToTerraform = exports.AppmeshVirtualNodeSpecListenerTlsCertificateAcmOutputReference = void 0;
exports.AppmeshVirtualNode = exports.AppmeshVirtualNodeSpecOutputReference = exports.appmeshVirtualNodeSpecToHclTerraform = exports.appmeshVirtualNodeSpecToTerraform = exports.AppmeshVirtualNodeSpecServiceDiscoveryOutputReference = exports.appmeshVirtualNodeSpecServiceDiscoveryToHclTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        certificate_chain: cdktf.stringToTerraform(struct.certificateChain),
        private_key: cdktf.stringToTerraform(struct.privateKey),
    };
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileToTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileToTerraform;
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        certificate_chain: {
            value: cdktf.stringToHclTerraform(struct.certificateChain),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        private_key: {
            value: cdktf.stringToHclTerraform(struct.privateKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileToHclTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileToHclTerraform;
class AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certificateChain !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateChain = this._certificateChain;
        }
        if (this._privateKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateKey = this._privateKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certificateChain = undefined;
            this._privateKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certificateChain = value.certificateChain;
            this._privateKey = value.privateKey;
        }
    }
    get certificateChain() {
        return this.getStringAttribute('certificate_chain');
    }
    set certificateChain(value) {
        this._certificateChain = value;
    }
    // Temporarily expose input value. Use with caution.
    get certificateChainInput() {
        return this._certificateChain;
    }
    get privateKey() {
        return this.getStringAttribute('private_key');
    }
    set privateKey(value) {
        this._privateKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get privateKeyInput() {
        return this._privateKey;
    }
}
exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutputReference = AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutputReference;
_a = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutputReference[_a] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_name: cdktf.stringToTerraform(struct.secretName),
    };
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsToTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsToTerraform;
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_name: {
            value: cdktf.stringToHclTerraform(struct.secretName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsToHclTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsToHclTerraform;
class AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretName !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretName = this._secretName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretName = value.secretName;
        }
    }
    get secretName() {
        return this.getStringAttribute('secret_name');
    }
    set secretName(value) {
        this._secretName = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretNameInput() {
        return this._secretName;
    }
}
exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutputReference = AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutputReference;
_b = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutputReference[_b] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        file: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileToTerraform(struct.file),
        sds: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsToTerraform(struct.sds),
    };
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateToTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateToTerraform;
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        file: {
            value: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileToHclTerraform(struct.file),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileList",
        },
        sds: {
            value: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsToHclTerraform(struct.sds),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateToHclTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateToHclTerraform;
class AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // file - computed: false, optional: true, required: false
        this._file = new AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateFileOutputReference(this, "file");
        // sds - computed: false, optional: true, required: false
        this._sds = new AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateSdsOutputReference(this, "sds");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._file?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.file = this._file?.internalValue;
        }
        if (this._sds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sds = this._sds?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._file.internalValue = undefined;
            this._sds.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._file.internalValue = value.file;
            this._sds.internalValue = value.sds;
        }
    }
    get file() {
        return this._file;
    }
    putFile(value) {
        this._file.internalValue = value;
    }
    resetFile() {
        this._file.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileInput() {
        return this._file.internalValue;
    }
    get sds() {
        return this._sds;
    }
    putSds(value) {
        this._sds.internalValue = value;
    }
    resetSds() {
        this._sds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sdsInput() {
        return this._sds.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutputReference = AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutputReference;
_c = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutputReference[_c] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exact: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exact),
    };
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchToTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchToTerraform;
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        exact: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exact),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchToHclTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchToHclTerraform;
class AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exact !== undefined) {
            hasAnyValues = true;
            internalValueResult.exact = this._exact;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._exact = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._exact = value.exact;
        }
    }
    get exact() {
        return cdktf.Fn.tolist(this.getListAttribute('exact'));
    }
    set exact(value) {
        this._exact = value;
    }
    // Temporarily expose input value. Use with caution.
    get exactInput() {
        return this._exact;
    }
}
exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputReference = AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputReference;
_d = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputReference[_d] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        match: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchToTerraform(struct.match),
    };
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesToTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesToTerraform;
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        match: {
            value: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchToHclTerraform(struct.match),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesToHclTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesToHclTerraform;
class AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // match - computed: false, optional: false, required: true
        this._match = new AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputReference(this, "match");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._match?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.match = this._match?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._match.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._match.internalValue = value.match;
        }
    }
    get match() {
        return this._match;
    }
    putMatch(value) {
        this._match.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get matchInput() {
        return this._match.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutputReference = AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutputReference;
_e = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutputReference[_e] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        certificate_authority_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.certificateAuthorityArns),
    };
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmToTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmToTerraform;
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        certificate_authority_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.certificateAuthorityArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmToHclTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmToHclTerraform;
class AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certificateAuthorityArns !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateAuthorityArns = this._certificateAuthorityArns;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certificateAuthorityArns = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certificateAuthorityArns = value.certificateAuthorityArns;
        }
    }
    get certificateAuthorityArns() {
        return cdktf.Fn.tolist(this.getListAttribute('certificate_authority_arns'));
    }
    set certificateAuthorityArns(value) {
        this._certificateAuthorityArns = value;
    }
    // Temporarily expose input value. Use with caution.
    get certificateAuthorityArnsInput() {
        return this._certificateAuthorityArns;
    }
}
exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutputReference = AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutputReference;
_f = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutputReference[_f] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        certificate_chain: cdktf.stringToTerraform(struct.certificateChain),
    };
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileToTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileToTerraform;
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        certificate_chain: {
            value: cdktf.stringToHclTerraform(struct.certificateChain),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileToHclTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileToHclTerraform;
class AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certificateChain !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateChain = this._certificateChain;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certificateChain = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certificateChain = value.certificateChain;
        }
    }
    get certificateChain() {
        return this.getStringAttribute('certificate_chain');
    }
    set certificateChain(value) {
        this._certificateChain = value;
    }
    // Temporarily expose input value. Use with caution.
    get certificateChainInput() {
        return this._certificateChain;
    }
}
exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutputReference = AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutputReference;
_g = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutputReference[_g] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_name: cdktf.stringToTerraform(struct.secretName),
    };
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsToTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsToTerraform;
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_name: {
            value: cdktf.stringToHclTerraform(struct.secretName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsToHclTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsToHclTerraform;
class AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretName !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretName = this._secretName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretName = value.secretName;
        }
    }
    get secretName() {
        return this.getStringAttribute('secret_name');
    }
    set secretName(value) {
        this._secretName = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretNameInput() {
        return this._secretName;
    }
}
exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutputReference = AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutputReference;
_h = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutputReference[_h] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        acm: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmToTerraform(struct.acm),
        file: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileToTerraform(struct.file),
        sds: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsToTerraform(struct.sds),
    };
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustToTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustToTerraform;
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        acm: {
            value: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmToHclTerraform(struct.acm),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmList",
        },
        file: {
            value: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileToHclTerraform(struct.file),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileList",
        },
        sds: {
            value: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsToHclTerraform(struct.sds),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustToHclTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustToHclTerraform;
class AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // acm - computed: false, optional: true, required: false
        this._acm = new AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcmOutputReference(this, "acm");
        // file - computed: false, optional: true, required: false
        this._file = new AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFileOutputReference(this, "file");
        // sds - computed: false, optional: true, required: false
        this._sds = new AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustSdsOutputReference(this, "sds");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acm?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.acm = this._acm?.internalValue;
        }
        if (this._file?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.file = this._file?.internalValue;
        }
        if (this._sds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sds = this._sds?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._acm.internalValue = undefined;
            this._file.internalValue = undefined;
            this._sds.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._acm.internalValue = value.acm;
            this._file.internalValue = value.file;
            this._sds.internalValue = value.sds;
        }
    }
    get acm() {
        return this._acm;
    }
    putAcm(value) {
        this._acm.internalValue = value;
    }
    resetAcm() {
        this._acm.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acmInput() {
        return this._acm.internalValue;
    }
    get file() {
        return this._file;
    }
    putFile(value) {
        this._file.internalValue = value;
    }
    resetFile() {
        this._file.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileInput() {
        return this._file.internalValue;
    }
    get sds() {
        return this._sds;
    }
    putSds(value) {
        this._sds.internalValue = value;
    }
    resetSds() {
        this._sds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sdsInput() {
        return this._sds.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutputReference = AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutputReference;
_j = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutputReference[_j] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        subject_alternative_names: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesToTerraform(struct.subjectAlternativeNames),
        trust: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustToTerraform(struct.trust),
    };
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationToTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationToTerraform;
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        subject_alternative_names: {
            value: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesToHclTerraform(struct.subjectAlternativeNames),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesList",
        },
        trust: {
            value: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustToHclTerraform(struct.trust),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationToHclTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationToHclTerraform;
class AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // subject_alternative_names - computed: false, optional: true, required: false
        this._subjectAlternativeNames = new AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationSubjectAlternativeNamesOutputReference(this, "subject_alternative_names");
        // trust - computed: false, optional: false, required: true
        this._trust = new AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustOutputReference(this, "trust");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._subjectAlternativeNames?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.subjectAlternativeNames = this._subjectAlternativeNames?.internalValue;
        }
        if (this._trust?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.trust = this._trust?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._subjectAlternativeNames.internalValue = undefined;
            this._trust.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._subjectAlternativeNames.internalValue = value.subjectAlternativeNames;
            this._trust.internalValue = value.trust;
        }
    }
    get subjectAlternativeNames() {
        return this._subjectAlternativeNames;
    }
    putSubjectAlternativeNames(value) {
        this._subjectAlternativeNames.internalValue = value;
    }
    resetSubjectAlternativeNames() {
        this._subjectAlternativeNames.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subjectAlternativeNamesInput() {
        return this._subjectAlternativeNames.internalValue;
    }
    get trust() {
        return this._trust;
    }
    putTrust(value) {
        this._trust.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get trustInput() {
        return this._trust.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutputReference = AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutputReference;
_k = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutputReference[_k] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enforce: cdktf.booleanToTerraform(struct.enforce),
        ports: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.ports),
        certificate: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateToTerraform(struct.certificate),
        validation: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationToTerraform(struct.validation),
    };
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsToTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsToTerraform;
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enforce: {
            value: cdktf.booleanToHclTerraform(struct.enforce),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        ports: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.ports),
            isBlock: false,
            type: "set",
            storageClassType: "numberList",
        },
        certificate: {
            value: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateToHclTerraform(struct.certificate),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateList",
        },
        validation: {
            value: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationToHclTerraform(struct.validation),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsToHclTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsToHclTerraform;
class AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // certificate - computed: false, optional: true, required: false
        this._certificate = new AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsCertificateOutputReference(this, "certificate");
        // validation - computed: false, optional: false, required: true
        this._validation = new AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationOutputReference(this, "validation");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enforce !== undefined) {
            hasAnyValues = true;
            internalValueResult.enforce = this._enforce;
        }
        if (this._ports !== undefined) {
            hasAnyValues = true;
            internalValueResult.ports = this._ports;
        }
        if (this._certificate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificate = this._certificate?.internalValue;
        }
        if (this._validation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.validation = this._validation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enforce = undefined;
            this._ports = undefined;
            this._certificate.internalValue = undefined;
            this._validation.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enforce = value.enforce;
            this._ports = value.ports;
            this._certificate.internalValue = value.certificate;
            this._validation.internalValue = value.validation;
        }
    }
    get enforce() {
        return this.getBooleanAttribute('enforce');
    }
    set enforce(value) {
        this._enforce = value;
    }
    resetEnforce() {
        this._enforce = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enforceInput() {
        return this._enforce;
    }
    get ports() {
        return cdktf.Token.asNumberList(cdktf.Fn.tolist(this.getNumberListAttribute('ports')));
    }
    set ports(value) {
        this._ports = value;
    }
    resetPorts() {
        this._ports = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portsInput() {
        return this._ports;
    }
    get certificate() {
        return this._certificate;
    }
    putCertificate(value) {
        this._certificate.internalValue = value;
    }
    resetCertificate() {
        this._certificate.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateInput() {
        return this._certificate.internalValue;
    }
    get validation() {
        return this._validation;
    }
    putValidation(value) {
        this._validation.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get validationInput() {
        return this._validation.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutputReference = AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutputReference;
_l = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutputReference[_l] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        tls: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsToTerraform(struct.tls),
    };
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyToTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyToTerraform;
function appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        tls: {
            value: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsToHclTerraform(struct.tls),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyToHclTerraform = appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyToHclTerraform;
class AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // tls - computed: false, optional: true, required: false
        this._tls = new AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyTlsOutputReference(this, "tls");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._tls?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tls = this._tls?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._tls.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._tls.internalValue = value.tls;
        }
    }
    get tls() {
        return this._tls;
    }
    putTls(value) {
        this._tls.internalValue = value;
    }
    resetTls() {
        this._tls.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsInput() {
        return this._tls.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyOutputReference = AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyOutputReference;
_m = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyOutputReference[_m] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendVirtualServiceToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        virtual_service_name: cdktf.stringToTerraform(struct.virtualServiceName),
        client_policy: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyToTerraform(struct.clientPolicy),
    };
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceToTerraform = appmeshVirtualNodeSpecBackendVirtualServiceToTerraform;
function appmeshVirtualNodeSpecBackendVirtualServiceToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        virtual_service_name: {
            value: cdktf.stringToHclTerraform(struct.virtualServiceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        client_policy: {
            value: appmeshVirtualNodeSpecBackendVirtualServiceClientPolicyToHclTerraform(struct.clientPolicy),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendVirtualServiceToHclTerraform = appmeshVirtualNodeSpecBackendVirtualServiceToHclTerraform;
class AppmeshVirtualNodeSpecBackendVirtualServiceOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // client_policy - computed: false, optional: true, required: false
        this._clientPolicy = new AppmeshVirtualNodeSpecBackendVirtualServiceClientPolicyOutputReference(this, "client_policy");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._virtualServiceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.virtualServiceName = this._virtualServiceName;
        }
        if (this._clientPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientPolicy = this._clientPolicy?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._virtualServiceName = undefined;
            this._clientPolicy.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._virtualServiceName = value.virtualServiceName;
            this._clientPolicy.internalValue = value.clientPolicy;
        }
    }
    get virtualServiceName() {
        return this.getStringAttribute('virtual_service_name');
    }
    set virtualServiceName(value) {
        this._virtualServiceName = value;
    }
    // Temporarily expose input value. Use with caution.
    get virtualServiceNameInput() {
        return this._virtualServiceName;
    }
    get clientPolicy() {
        return this._clientPolicy;
    }
    putClientPolicy(value) {
        this._clientPolicy.internalValue = value;
    }
    resetClientPolicy() {
        this._clientPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientPolicyInput() {
        return this._clientPolicy.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecBackendVirtualServiceOutputReference = AppmeshVirtualNodeSpecBackendVirtualServiceOutputReference;
_o = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendVirtualServiceOutputReference[_o] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendVirtualServiceOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        virtual_service: appmeshVirtualNodeSpecBackendVirtualServiceToTerraform(struct.virtualService),
    };
}
exports.appmeshVirtualNodeSpecBackendToTerraform = appmeshVirtualNodeSpecBackendToTerraform;
function appmeshVirtualNodeSpecBackendToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        virtual_service: {
            value: appmeshVirtualNodeSpecBackendVirtualServiceToHclTerraform(struct.virtualService),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendVirtualServiceList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendToHclTerraform = appmeshVirtualNodeSpecBackendToHclTerraform;
class AppmeshVirtualNodeSpecBackendOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
        // virtual_service - computed: false, optional: false, required: true
        this._virtualService = new AppmeshVirtualNodeSpecBackendVirtualServiceOutputReference(this, "virtual_service");
    }
    get internalValue() {
        if (this.resolvableValue) {
            return this.resolvableValue;
        }
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._virtualService?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.virtualService = this._virtualService?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this.resolvableValue = undefined;
            this._virtualService.internalValue = undefined;
        }
        else if (cdktf.Tokenization.isResolvable(value)) {
            this.isEmptyObject = false;
            this.resolvableValue = value;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this.resolvableValue = undefined;
            this._virtualService.internalValue = value.virtualService;
        }
    }
    get virtualService() {
        return this._virtualService;
    }
    putVirtualService(value) {
        this._virtualService.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get virtualServiceInput() {
        return this._virtualService.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecBackendOutputReference = AppmeshVirtualNodeSpecBackendOutputReference;
_p = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendOutputReference[_p] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendOutputReference", version: "0.0.0" };
class AppmeshVirtualNodeSpecBackendList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new AppmeshVirtualNodeSpecBackendOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.AppmeshVirtualNodeSpecBackendList = AppmeshVirtualNodeSpecBackendList;
_q = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendList[_q] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendList", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        certificate_chain: cdktf.stringToTerraform(struct.certificateChain),
        private_key: cdktf.stringToTerraform(struct.privateKey),
    };
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileToTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileToTerraform;
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        certificate_chain: {
            value: cdktf.stringToHclTerraform(struct.certificateChain),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        private_key: {
            value: cdktf.stringToHclTerraform(struct.privateKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileToHclTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileToHclTerraform;
class AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certificateChain !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateChain = this._certificateChain;
        }
        if (this._privateKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateKey = this._privateKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certificateChain = undefined;
            this._privateKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certificateChain = value.certificateChain;
            this._privateKey = value.privateKey;
        }
    }
    get certificateChain() {
        return this.getStringAttribute('certificate_chain');
    }
    set certificateChain(value) {
        this._certificateChain = value;
    }
    // Temporarily expose input value. Use with caution.
    get certificateChainInput() {
        return this._certificateChain;
    }
    get privateKey() {
        return this.getStringAttribute('private_key');
    }
    set privateKey(value) {
        this._privateKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get privateKeyInput() {
        return this._privateKey;
    }
}
exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutputReference = AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutputReference;
_r = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutputReference[_r] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_name: cdktf.stringToTerraform(struct.secretName),
    };
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsToTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsToTerraform;
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_name: {
            value: cdktf.stringToHclTerraform(struct.secretName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsToHclTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsToHclTerraform;
class AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretName !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretName = this._secretName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretName = value.secretName;
        }
    }
    get secretName() {
        return this.getStringAttribute('secret_name');
    }
    set secretName(value) {
        this._secretName = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretNameInput() {
        return this._secretName;
    }
}
exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutputReference = AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutputReference;
_s = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutputReference[_s] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        file: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileToTerraform(struct.file),
        sds: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsToTerraform(struct.sds),
    };
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateToTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateToTerraform;
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        file: {
            value: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileToHclTerraform(struct.file),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileList",
        },
        sds: {
            value: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsToHclTerraform(struct.sds),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateToHclTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateToHclTerraform;
class AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // file - computed: false, optional: true, required: false
        this._file = new AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateFileOutputReference(this, "file");
        // sds - computed: false, optional: true, required: false
        this._sds = new AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateSdsOutputReference(this, "sds");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._file?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.file = this._file?.internalValue;
        }
        if (this._sds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sds = this._sds?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._file.internalValue = undefined;
            this._sds.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._file.internalValue = value.file;
            this._sds.internalValue = value.sds;
        }
    }
    get file() {
        return this._file;
    }
    putFile(value) {
        this._file.internalValue = value;
    }
    resetFile() {
        this._file.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileInput() {
        return this._file.internalValue;
    }
    get sds() {
        return this._sds;
    }
    putSds(value) {
        this._sds.internalValue = value;
    }
    resetSds() {
        this._sds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sdsInput() {
        return this._sds.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutputReference = AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutputReference;
_t = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutputReference[_t] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exact: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exact),
    };
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchToTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchToTerraform;
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        exact: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exact),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchToHclTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchToHclTerraform;
class AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exact !== undefined) {
            hasAnyValues = true;
            internalValueResult.exact = this._exact;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._exact = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._exact = value.exact;
        }
    }
    get exact() {
        return cdktf.Fn.tolist(this.getListAttribute('exact'));
    }
    set exact(value) {
        this._exact = value;
    }
    // Temporarily expose input value. Use with caution.
    get exactInput() {
        return this._exact;
    }
}
exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputReference = AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputReference;
_u = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputReference[_u] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        match: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchToTerraform(struct.match),
    };
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesToTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesToTerraform;
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        match: {
            value: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchToHclTerraform(struct.match),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesToHclTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesToHclTerraform;
class AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // match - computed: false, optional: false, required: true
        this._match = new AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatchOutputReference(this, "match");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._match?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.match = this._match?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._match.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._match.internalValue = value.match;
        }
    }
    get match() {
        return this._match;
    }
    putMatch(value) {
        this._match.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get matchInput() {
        return this._match.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutputReference = AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutputReference;
_v = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutputReference[_v] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        certificate_authority_arns: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.certificateAuthorityArns),
    };
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmToTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmToTerraform;
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        certificate_authority_arns: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.certificateAuthorityArns),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmToHclTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmToHclTerraform;
class AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certificateAuthorityArns !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateAuthorityArns = this._certificateAuthorityArns;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certificateAuthorityArns = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certificateAuthorityArns = value.certificateAuthorityArns;
        }
    }
    get certificateAuthorityArns() {
        return cdktf.Fn.tolist(this.getListAttribute('certificate_authority_arns'));
    }
    set certificateAuthorityArns(value) {
        this._certificateAuthorityArns = value;
    }
    // Temporarily expose input value. Use with caution.
    get certificateAuthorityArnsInput() {
        return this._certificateAuthorityArns;
    }
}
exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutputReference = AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutputReference;
_w = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutputReference[_w] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        certificate_chain: cdktf.stringToTerraform(struct.certificateChain),
    };
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileToTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileToTerraform;
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        certificate_chain: {
            value: cdktf.stringToHclTerraform(struct.certificateChain),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileToHclTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileToHclTerraform;
class AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certificateChain !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateChain = this._certificateChain;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certificateChain = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certificateChain = value.certificateChain;
        }
    }
    get certificateChain() {
        return this.getStringAttribute('certificate_chain');
    }
    set certificateChain(value) {
        this._certificateChain = value;
    }
    // Temporarily expose input value. Use with caution.
    get certificateChainInput() {
        return this._certificateChain;
    }
}
exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutputReference = AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutputReference;
_x = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutputReference[_x] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_name: cdktf.stringToTerraform(struct.secretName),
    };
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsToTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsToTerraform;
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_name: {
            value: cdktf.stringToHclTerraform(struct.secretName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsToHclTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsToHclTerraform;
class AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretName !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretName = this._secretName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretName = value.secretName;
        }
    }
    get secretName() {
        return this.getStringAttribute('secret_name');
    }
    set secretName(value) {
        this._secretName = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretNameInput() {
        return this._secretName;
    }
}
exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutputReference = AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutputReference;
_y = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutputReference[_y] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        acm: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmToTerraform(struct.acm),
        file: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileToTerraform(struct.file),
        sds: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsToTerraform(struct.sds),
    };
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustToTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustToTerraform;
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        acm: {
            value: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmToHclTerraform(struct.acm),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmList",
        },
        file: {
            value: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileToHclTerraform(struct.file),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileList",
        },
        sds: {
            value: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsToHclTerraform(struct.sds),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustToHclTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustToHclTerraform;
class AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // acm - computed: false, optional: true, required: false
        this._acm = new AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcmOutputReference(this, "acm");
        // file - computed: false, optional: true, required: false
        this._file = new AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFileOutputReference(this, "file");
        // sds - computed: false, optional: true, required: false
        this._sds = new AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustSdsOutputReference(this, "sds");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acm?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.acm = this._acm?.internalValue;
        }
        if (this._file?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.file = this._file?.internalValue;
        }
        if (this._sds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sds = this._sds?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._acm.internalValue = undefined;
            this._file.internalValue = undefined;
            this._sds.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._acm.internalValue = value.acm;
            this._file.internalValue = value.file;
            this._sds.internalValue = value.sds;
        }
    }
    get acm() {
        return this._acm;
    }
    putAcm(value) {
        this._acm.internalValue = value;
    }
    resetAcm() {
        this._acm.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acmInput() {
        return this._acm.internalValue;
    }
    get file() {
        return this._file;
    }
    putFile(value) {
        this._file.internalValue = value;
    }
    resetFile() {
        this._file.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileInput() {
        return this._file.internalValue;
    }
    get sds() {
        return this._sds;
    }
    putSds(value) {
        this._sds.internalValue = value;
    }
    resetSds() {
        this._sds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sdsInput() {
        return this._sds.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutputReference = AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutputReference;
_z = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutputReference[_z] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        subject_alternative_names: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesToTerraform(struct.subjectAlternativeNames),
        trust: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustToTerraform(struct.trust),
    };
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationToTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationToTerraform;
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        subject_alternative_names: {
            value: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesToHclTerraform(struct.subjectAlternativeNames),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesList",
        },
        trust: {
            value: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustToHclTerraform(struct.trust),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationToHclTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationToHclTerraform;
class AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // subject_alternative_names - computed: false, optional: true, required: false
        this._subjectAlternativeNames = new AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesOutputReference(this, "subject_alternative_names");
        // trust - computed: false, optional: false, required: true
        this._trust = new AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustOutputReference(this, "trust");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._subjectAlternativeNames?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.subjectAlternativeNames = this._subjectAlternativeNames?.internalValue;
        }
        if (this._trust?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.trust = this._trust?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._subjectAlternativeNames.internalValue = undefined;
            this._trust.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._subjectAlternativeNames.internalValue = value.subjectAlternativeNames;
            this._trust.internalValue = value.trust;
        }
    }
    get subjectAlternativeNames() {
        return this._subjectAlternativeNames;
    }
    putSubjectAlternativeNames(value) {
        this._subjectAlternativeNames.internalValue = value;
    }
    resetSubjectAlternativeNames() {
        this._subjectAlternativeNames.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subjectAlternativeNamesInput() {
        return this._subjectAlternativeNames.internalValue;
    }
    get trust() {
        return this._trust;
    }
    putTrust(value) {
        this._trust.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get trustInput() {
        return this._trust.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutputReference = AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutputReference;
_0 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutputReference[_0] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        enforce: cdktf.booleanToTerraform(struct.enforce),
        ports: cdktf.listMapper(cdktf.numberToTerraform, false)(struct.ports),
        certificate: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateToTerraform(struct.certificate),
        validation: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationToTerraform(struct.validation),
    };
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsToTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsToTerraform;
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        enforce: {
            value: cdktf.booleanToHclTerraform(struct.enforce),
            isBlock: false,
            type: "simple",
            storageClassType: "boolean",
        },
        ports: {
            value: cdktf.listMapperHcl(cdktf.numberToHclTerraform, false)(struct.ports),
            isBlock: false,
            type: "set",
            storageClassType: "numberList",
        },
        certificate: {
            value: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateToHclTerraform(struct.certificate),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateList",
        },
        validation: {
            value: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationToHclTerraform(struct.validation),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsToHclTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsToHclTerraform;
class AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // certificate - computed: false, optional: true, required: false
        this._certificate = new AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsCertificateOutputReference(this, "certificate");
        // validation - computed: false, optional: false, required: true
        this._validation = new AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsValidationOutputReference(this, "validation");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._enforce !== undefined) {
            hasAnyValues = true;
            internalValueResult.enforce = this._enforce;
        }
        if (this._ports !== undefined) {
            hasAnyValues = true;
            internalValueResult.ports = this._ports;
        }
        if (this._certificate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificate = this._certificate?.internalValue;
        }
        if (this._validation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.validation = this._validation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._enforce = undefined;
            this._ports = undefined;
            this._certificate.internalValue = undefined;
            this._validation.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._enforce = value.enforce;
            this._ports = value.ports;
            this._certificate.internalValue = value.certificate;
            this._validation.internalValue = value.validation;
        }
    }
    get enforce() {
        return this.getBooleanAttribute('enforce');
    }
    set enforce(value) {
        this._enforce = value;
    }
    resetEnforce() {
        this._enforce = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enforceInput() {
        return this._enforce;
    }
    get ports() {
        return cdktf.Token.asNumberList(cdktf.Fn.tolist(this.getNumberListAttribute('ports')));
    }
    set ports(value) {
        this._ports = value;
    }
    resetPorts() {
        this._ports = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portsInput() {
        return this._ports;
    }
    get certificate() {
        return this._certificate;
    }
    putCertificate(value) {
        this._certificate.internalValue = value;
    }
    resetCertificate() {
        this._certificate.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get certificateInput() {
        return this._certificate.internalValue;
    }
    get validation() {
        return this._validation;
    }
    putValidation(value) {
        this._validation.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get validationInput() {
        return this._validation.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsOutputReference = AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsOutputReference;
_1 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsOutputReference[_1] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        tls: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsToTerraform(struct.tls),
    };
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyToTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyToTerraform;
function appmeshVirtualNodeSpecBackendDefaultsClientPolicyToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        tls: {
            value: appmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsToHclTerraform(struct.tls),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendDefaultsClientPolicyToHclTerraform = appmeshVirtualNodeSpecBackendDefaultsClientPolicyToHclTerraform;
class AppmeshVirtualNodeSpecBackendDefaultsClientPolicyOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // tls - computed: false, optional: true, required: false
        this._tls = new AppmeshVirtualNodeSpecBackendDefaultsClientPolicyTlsOutputReference(this, "tls");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._tls?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tls = this._tls?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._tls.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._tls.internalValue = value.tls;
        }
    }
    get tls() {
        return this._tls;
    }
    putTls(value) {
        this._tls.internalValue = value;
    }
    resetTls() {
        this._tls.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsInput() {
        return this._tls.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyOutputReference = AppmeshVirtualNodeSpecBackendDefaultsClientPolicyOutputReference;
_2 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendDefaultsClientPolicyOutputReference[_2] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendDefaultsClientPolicyOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecBackendDefaultsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        client_policy: appmeshVirtualNodeSpecBackendDefaultsClientPolicyToTerraform(struct.clientPolicy),
    };
}
exports.appmeshVirtualNodeSpecBackendDefaultsToTerraform = appmeshVirtualNodeSpecBackendDefaultsToTerraform;
function appmeshVirtualNodeSpecBackendDefaultsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        client_policy: {
            value: appmeshVirtualNodeSpecBackendDefaultsClientPolicyToHclTerraform(struct.clientPolicy),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendDefaultsClientPolicyList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecBackendDefaultsToHclTerraform = appmeshVirtualNodeSpecBackendDefaultsToHclTerraform;
class AppmeshVirtualNodeSpecBackendDefaultsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // client_policy - computed: false, optional: true, required: false
        this._clientPolicy = new AppmeshVirtualNodeSpecBackendDefaultsClientPolicyOutputReference(this, "client_policy");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._clientPolicy?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.clientPolicy = this._clientPolicy?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._clientPolicy.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._clientPolicy.internalValue = value.clientPolicy;
        }
    }
    get clientPolicy() {
        return this._clientPolicy;
    }
    putClientPolicy(value) {
        this._clientPolicy.internalValue = value;
    }
    resetClientPolicy() {
        this._clientPolicy.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get clientPolicyInput() {
        return this._clientPolicy.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecBackendDefaultsOutputReference = AppmeshVirtualNodeSpecBackendDefaultsOutputReference;
_3 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecBackendDefaultsOutputReference[_3] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecBackendDefaultsOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerConnectionPoolGrpcToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_requests: cdktf.numberToTerraform(struct.maxRequests),
    };
}
exports.appmeshVirtualNodeSpecListenerConnectionPoolGrpcToTerraform = appmeshVirtualNodeSpecListenerConnectionPoolGrpcToTerraform;
function appmeshVirtualNodeSpecListenerConnectionPoolGrpcToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_requests: {
            value: cdktf.numberToHclTerraform(struct.maxRequests),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerConnectionPoolGrpcToHclTerraform = appmeshVirtualNodeSpecListenerConnectionPoolGrpcToHclTerraform;
class AppmeshVirtualNodeSpecListenerConnectionPoolGrpcOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxRequests !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRequests = this._maxRequests;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxRequests = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxRequests = value.maxRequests;
        }
    }
    get maxRequests() {
        return this.getNumberAttribute('max_requests');
    }
    set maxRequests(value) {
        this._maxRequests = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxRequestsInput() {
        return this._maxRequests;
    }
}
exports.AppmeshVirtualNodeSpecListenerConnectionPoolGrpcOutputReference = AppmeshVirtualNodeSpecListenerConnectionPoolGrpcOutputReference;
_4 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerConnectionPoolGrpcOutputReference[_4] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerConnectionPoolGrpcOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerConnectionPoolHttpToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_connections: cdktf.numberToTerraform(struct.maxConnections),
        max_pending_requests: cdktf.numberToTerraform(struct.maxPendingRequests),
    };
}
exports.appmeshVirtualNodeSpecListenerConnectionPoolHttpToTerraform = appmeshVirtualNodeSpecListenerConnectionPoolHttpToTerraform;
function appmeshVirtualNodeSpecListenerConnectionPoolHttpToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_connections: {
            value: cdktf.numberToHclTerraform(struct.maxConnections),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_pending_requests: {
            value: cdktf.numberToHclTerraform(struct.maxPendingRequests),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerConnectionPoolHttpToHclTerraform = appmeshVirtualNodeSpecListenerConnectionPoolHttpToHclTerraform;
class AppmeshVirtualNodeSpecListenerConnectionPoolHttpOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxConnections !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConnections = this._maxConnections;
        }
        if (this._maxPendingRequests !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxPendingRequests = this._maxPendingRequests;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxConnections = undefined;
            this._maxPendingRequests = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxConnections = value.maxConnections;
            this._maxPendingRequests = value.maxPendingRequests;
        }
    }
    get maxConnections() {
        return this.getNumberAttribute('max_connections');
    }
    set maxConnections(value) {
        this._maxConnections = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxConnectionsInput() {
        return this._maxConnections;
    }
    get maxPendingRequests() {
        return this.getNumberAttribute('max_pending_requests');
    }
    set maxPendingRequests(value) {
        this._maxPendingRequests = value;
    }
    resetMaxPendingRequests() {
        this._maxPendingRequests = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get maxPendingRequestsInput() {
        return this._maxPendingRequests;
    }
}
exports.AppmeshVirtualNodeSpecListenerConnectionPoolHttpOutputReference = AppmeshVirtualNodeSpecListenerConnectionPoolHttpOutputReference;
_5 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerConnectionPoolHttpOutputReference[_5] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerConnectionPoolHttpOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerConnectionPoolHttp2ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_requests: cdktf.numberToTerraform(struct.maxRequests),
    };
}
exports.appmeshVirtualNodeSpecListenerConnectionPoolHttp2ToTerraform = appmeshVirtualNodeSpecListenerConnectionPoolHttp2ToTerraform;
function appmeshVirtualNodeSpecListenerConnectionPoolHttp2ToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_requests: {
            value: cdktf.numberToHclTerraform(struct.maxRequests),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerConnectionPoolHttp2ToHclTerraform = appmeshVirtualNodeSpecListenerConnectionPoolHttp2ToHclTerraform;
class AppmeshVirtualNodeSpecListenerConnectionPoolHttp2OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxRequests !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxRequests = this._maxRequests;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxRequests = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxRequests = value.maxRequests;
        }
    }
    get maxRequests() {
        return this.getNumberAttribute('max_requests');
    }
    set maxRequests(value) {
        this._maxRequests = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxRequestsInput() {
        return this._maxRequests;
    }
}
exports.AppmeshVirtualNodeSpecListenerConnectionPoolHttp2OutputReference = AppmeshVirtualNodeSpecListenerConnectionPoolHttp2OutputReference;
_6 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerConnectionPoolHttp2OutputReference[_6] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerConnectionPoolHttp2OutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerConnectionPoolTcpToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_connections: cdktf.numberToTerraform(struct.maxConnections),
    };
}
exports.appmeshVirtualNodeSpecListenerConnectionPoolTcpToTerraform = appmeshVirtualNodeSpecListenerConnectionPoolTcpToTerraform;
function appmeshVirtualNodeSpecListenerConnectionPoolTcpToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_connections: {
            value: cdktf.numberToHclTerraform(struct.maxConnections),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerConnectionPoolTcpToHclTerraform = appmeshVirtualNodeSpecListenerConnectionPoolTcpToHclTerraform;
class AppmeshVirtualNodeSpecListenerConnectionPoolTcpOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxConnections !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxConnections = this._maxConnections;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxConnections = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxConnections = value.maxConnections;
        }
    }
    get maxConnections() {
        return this.getNumberAttribute('max_connections');
    }
    set maxConnections(value) {
        this._maxConnections = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxConnectionsInput() {
        return this._maxConnections;
    }
}
exports.AppmeshVirtualNodeSpecListenerConnectionPoolTcpOutputReference = AppmeshVirtualNodeSpecListenerConnectionPoolTcpOutputReference;
_7 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerConnectionPoolTcpOutputReference[_7] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerConnectionPoolTcpOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerConnectionPoolToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        grpc: appmeshVirtualNodeSpecListenerConnectionPoolGrpcToTerraform(struct.grpc),
        http: appmeshVirtualNodeSpecListenerConnectionPoolHttpToTerraform(struct.http),
        http2: appmeshVirtualNodeSpecListenerConnectionPoolHttp2ToTerraform(struct.http2),
        tcp: appmeshVirtualNodeSpecListenerConnectionPoolTcpToTerraform(struct.tcp),
    };
}
exports.appmeshVirtualNodeSpecListenerConnectionPoolToTerraform = appmeshVirtualNodeSpecListenerConnectionPoolToTerraform;
function appmeshVirtualNodeSpecListenerConnectionPoolToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        grpc: {
            value: appmeshVirtualNodeSpecListenerConnectionPoolGrpcToHclTerraform(struct.grpc),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerConnectionPoolGrpcList",
        },
        http: {
            value: appmeshVirtualNodeSpecListenerConnectionPoolHttpToHclTerraform(struct.http),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerConnectionPoolHttpList",
        },
        http2: {
            value: appmeshVirtualNodeSpecListenerConnectionPoolHttp2ToHclTerraform(struct.http2),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerConnectionPoolHttp2List",
        },
        tcp: {
            value: appmeshVirtualNodeSpecListenerConnectionPoolTcpToHclTerraform(struct.tcp),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerConnectionPoolTcpList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerConnectionPoolToHclTerraform = appmeshVirtualNodeSpecListenerConnectionPoolToHclTerraform;
class AppmeshVirtualNodeSpecListenerConnectionPoolOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // grpc - computed: false, optional: true, required: false
        this._grpc = new AppmeshVirtualNodeSpecListenerConnectionPoolGrpcOutputReference(this, "grpc");
        // http - computed: false, optional: true, required: false
        this._http = new AppmeshVirtualNodeSpecListenerConnectionPoolHttpOutputReference(this, "http");
        // http2 - computed: false, optional: true, required: false
        this._http2 = new AppmeshVirtualNodeSpecListenerConnectionPoolHttp2OutputReference(this, "http2");
        // tcp - computed: false, optional: true, required: false
        this._tcp = new AppmeshVirtualNodeSpecListenerConnectionPoolTcpOutputReference(this, "tcp");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._grpc?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.grpc = this._grpc?.internalValue;
        }
        if (this._http?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.http = this._http?.internalValue;
        }
        if (this._http2?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.http2 = this._http2?.internalValue;
        }
        if (this._tcp?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tcp = this._tcp?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._grpc.internalValue = undefined;
            this._http.internalValue = undefined;
            this._http2.internalValue = undefined;
            this._tcp.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._grpc.internalValue = value.grpc;
            this._http.internalValue = value.http;
            this._http2.internalValue = value.http2;
            this._tcp.internalValue = value.tcp;
        }
    }
    get grpc() {
        return this._grpc;
    }
    putGrpc(value) {
        this._grpc.internalValue = value;
    }
    resetGrpc() {
        this._grpc.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grpcInput() {
        return this._grpc.internalValue;
    }
    get http() {
        return this._http;
    }
    putHttp(value) {
        this._http.internalValue = value;
    }
    resetHttp() {
        this._http.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpInput() {
        return this._http.internalValue;
    }
    get http2() {
        return this._http2;
    }
    putHttp2(value) {
        this._http2.internalValue = value;
    }
    resetHttp2() {
        this._http2.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get http2Input() {
        return this._http2.internalValue;
    }
    get tcp() {
        return this._tcp;
    }
    putTcp(value) {
        this._tcp.internalValue = value;
    }
    resetTcp() {
        this._tcp.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tcpInput() {
        return this._tcp.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecListenerConnectionPoolOutputReference = AppmeshVirtualNodeSpecListenerConnectionPoolOutputReference;
_8 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerConnectionPoolOutputReference[_8] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerConnectionPoolOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerHealthCheckToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        healthy_threshold: cdktf.numberToTerraform(struct.healthyThreshold),
        interval_millis: cdktf.numberToTerraform(struct.intervalMillis),
        path: cdktf.stringToTerraform(struct.path),
        port: cdktf.numberToTerraform(struct.port),
        protocol: cdktf.stringToTerraform(struct.protocol),
        timeout_millis: cdktf.numberToTerraform(struct.timeoutMillis),
        unhealthy_threshold: cdktf.numberToTerraform(struct.unhealthyThreshold),
    };
}
exports.appmeshVirtualNodeSpecListenerHealthCheckToTerraform = appmeshVirtualNodeSpecListenerHealthCheckToTerraform;
function appmeshVirtualNodeSpecListenerHealthCheckToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        healthy_threshold: {
            value: cdktf.numberToHclTerraform(struct.healthyThreshold),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        interval_millis: {
            value: cdktf.numberToHclTerraform(struct.intervalMillis),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        port: {
            value: cdktf.numberToHclTerraform(struct.port),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        protocol: {
            value: cdktf.stringToHclTerraform(struct.protocol),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        timeout_millis: {
            value: cdktf.numberToHclTerraform(struct.timeoutMillis),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        unhealthy_threshold: {
            value: cdktf.numberToHclTerraform(struct.unhealthyThreshold),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerHealthCheckToHclTerraform = appmeshVirtualNodeSpecListenerHealthCheckToHclTerraform;
class AppmeshVirtualNodeSpecListenerHealthCheckOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._healthyThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthyThreshold = this._healthyThreshold;
        }
        if (this._intervalMillis !== undefined) {
            hasAnyValues = true;
            internalValueResult.intervalMillis = this._intervalMillis;
        }
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._protocol !== undefined) {
            hasAnyValues = true;
            internalValueResult.protocol = this._protocol;
        }
        if (this._timeoutMillis !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeoutMillis = this._timeoutMillis;
        }
        if (this._unhealthyThreshold !== undefined) {
            hasAnyValues = true;
            internalValueResult.unhealthyThreshold = this._unhealthyThreshold;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._healthyThreshold = undefined;
            this._intervalMillis = undefined;
            this._path = undefined;
            this._port = undefined;
            this._protocol = undefined;
            this._timeoutMillis = undefined;
            this._unhealthyThreshold = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._healthyThreshold = value.healthyThreshold;
            this._intervalMillis = value.intervalMillis;
            this._path = value.path;
            this._port = value.port;
            this._protocol = value.protocol;
            this._timeoutMillis = value.timeoutMillis;
            this._unhealthyThreshold = value.unhealthyThreshold;
        }
    }
    get healthyThreshold() {
        return this.getNumberAttribute('healthy_threshold');
    }
    set healthyThreshold(value) {
        this._healthyThreshold = value;
    }
    // Temporarily expose input value. Use with caution.
    get healthyThresholdInput() {
        return this._healthyThreshold;
    }
    get intervalMillis() {
        return this.getNumberAttribute('interval_millis');
    }
    set intervalMillis(value) {
        this._intervalMillis = value;
    }
    // Temporarily expose input value. Use with caution.
    get intervalMillisInput() {
        return this._intervalMillis;
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    resetPath() {
        this._path = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    resetPort() {
        this._port = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get protocol() {
        return this.getStringAttribute('protocol');
    }
    set protocol(value) {
        this._protocol = value;
    }
    // Temporarily expose input value. Use with caution.
    get protocolInput() {
        return this._protocol;
    }
    get timeoutMillis() {
        return this.getNumberAttribute('timeout_millis');
    }
    set timeoutMillis(value) {
        this._timeoutMillis = value;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutMillisInput() {
        return this._timeoutMillis;
    }
    get unhealthyThreshold() {
        return this.getNumberAttribute('unhealthy_threshold');
    }
    set unhealthyThreshold(value) {
        this._unhealthyThreshold = value;
    }
    // Temporarily expose input value. Use with caution.
    get unhealthyThresholdInput() {
        return this._unhealthyThreshold;
    }
}
exports.AppmeshVirtualNodeSpecListenerHealthCheckOutputReference = AppmeshVirtualNodeSpecListenerHealthCheckOutputReference;
_9 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerHealthCheckOutputReference[_9] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerHealthCheckOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        unit: cdktf.stringToTerraform(struct.unit),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.appmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationToTerraform = appmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationToTerraform;
function appmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        unit: {
            value: cdktf.stringToHclTerraform(struct.unit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.numberToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationToHclTerraform = appmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationToHclTerraform;
class AppmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._unit !== undefined) {
            hasAnyValues = true;
            internalValueResult.unit = this._unit;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._unit = undefined;
            this._value = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._unit = value.unit;
            this._value = value.value;
        }
    }
    get unit() {
        return this.getStringAttribute('unit');
    }
    set unit(value) {
        this._unit = value;
    }
    // Temporarily expose input value. Use with caution.
    get unitInput() {
        return this._unit;
    }
    get value() {
        return this.getNumberAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.AppmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutputReference = AppmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutputReference;
_10 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutputReference[_10] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerOutlierDetectionIntervalToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        unit: cdktf.stringToTerraform(struct.unit),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.appmeshVirtualNodeSpecListenerOutlierDetectionIntervalToTerraform = appmeshVirtualNodeSpecListenerOutlierDetectionIntervalToTerraform;
function appmeshVirtualNodeSpecListenerOutlierDetectionIntervalToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        unit: {
            value: cdktf.stringToHclTerraform(struct.unit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.numberToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerOutlierDetectionIntervalToHclTerraform = appmeshVirtualNodeSpecListenerOutlierDetectionIntervalToHclTerraform;
class AppmeshVirtualNodeSpecListenerOutlierDetectionIntervalOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._unit !== undefined) {
            hasAnyValues = true;
            internalValueResult.unit = this._unit;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._unit = undefined;
            this._value = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._unit = value.unit;
            this._value = value.value;
        }
    }
    get unit() {
        return this.getStringAttribute('unit');
    }
    set unit(value) {
        this._unit = value;
    }
    // Temporarily expose input value. Use with caution.
    get unitInput() {
        return this._unit;
    }
    get value() {
        return this.getNumberAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.AppmeshVirtualNodeSpecListenerOutlierDetectionIntervalOutputReference = AppmeshVirtualNodeSpecListenerOutlierDetectionIntervalOutputReference;
_11 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerOutlierDetectionIntervalOutputReference[_11] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerOutlierDetectionIntervalOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerOutlierDetectionToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        max_ejection_percent: cdktf.numberToTerraform(struct.maxEjectionPercent),
        max_server_errors: cdktf.numberToTerraform(struct.maxServerErrors),
        base_ejection_duration: appmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationToTerraform(struct.baseEjectionDuration),
        interval: appmeshVirtualNodeSpecListenerOutlierDetectionIntervalToTerraform(struct.interval),
    };
}
exports.appmeshVirtualNodeSpecListenerOutlierDetectionToTerraform = appmeshVirtualNodeSpecListenerOutlierDetectionToTerraform;
function appmeshVirtualNodeSpecListenerOutlierDetectionToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        max_ejection_percent: {
            value: cdktf.numberToHclTerraform(struct.maxEjectionPercent),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        max_server_errors: {
            value: cdktf.numberToHclTerraform(struct.maxServerErrors),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        base_ejection_duration: {
            value: appmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationToHclTerraform(struct.baseEjectionDuration),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationList",
        },
        interval: {
            value: appmeshVirtualNodeSpecListenerOutlierDetectionIntervalToHclTerraform(struct.interval),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerOutlierDetectionIntervalList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerOutlierDetectionToHclTerraform = appmeshVirtualNodeSpecListenerOutlierDetectionToHclTerraform;
class AppmeshVirtualNodeSpecListenerOutlierDetectionOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // base_ejection_duration - computed: false, optional: false, required: true
        this._baseEjectionDuration = new AppmeshVirtualNodeSpecListenerOutlierDetectionBaseEjectionDurationOutputReference(this, "base_ejection_duration");
        // interval - computed: false, optional: false, required: true
        this._interval = new AppmeshVirtualNodeSpecListenerOutlierDetectionIntervalOutputReference(this, "interval");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._maxEjectionPercent !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxEjectionPercent = this._maxEjectionPercent;
        }
        if (this._maxServerErrors !== undefined) {
            hasAnyValues = true;
            internalValueResult.maxServerErrors = this._maxServerErrors;
        }
        if (this._baseEjectionDuration?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.baseEjectionDuration = this._baseEjectionDuration?.internalValue;
        }
        if (this._interval?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.interval = this._interval?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._maxEjectionPercent = undefined;
            this._maxServerErrors = undefined;
            this._baseEjectionDuration.internalValue = undefined;
            this._interval.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._maxEjectionPercent = value.maxEjectionPercent;
            this._maxServerErrors = value.maxServerErrors;
            this._baseEjectionDuration.internalValue = value.baseEjectionDuration;
            this._interval.internalValue = value.interval;
        }
    }
    get maxEjectionPercent() {
        return this.getNumberAttribute('max_ejection_percent');
    }
    set maxEjectionPercent(value) {
        this._maxEjectionPercent = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxEjectionPercentInput() {
        return this._maxEjectionPercent;
    }
    get maxServerErrors() {
        return this.getNumberAttribute('max_server_errors');
    }
    set maxServerErrors(value) {
        this._maxServerErrors = value;
    }
    // Temporarily expose input value. Use with caution.
    get maxServerErrorsInput() {
        return this._maxServerErrors;
    }
    get baseEjectionDuration() {
        return this._baseEjectionDuration;
    }
    putBaseEjectionDuration(value) {
        this._baseEjectionDuration.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get baseEjectionDurationInput() {
        return this._baseEjectionDuration.internalValue;
    }
    get interval() {
        return this._interval;
    }
    putInterval(value) {
        this._interval.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get intervalInput() {
        return this._interval.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecListenerOutlierDetectionOutputReference = AppmeshVirtualNodeSpecListenerOutlierDetectionOutputReference;
_12 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerOutlierDetectionOutputReference[_12] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerOutlierDetectionOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerPortMappingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        port: cdktf.numberToTerraform(struct.port),
        protocol: cdktf.stringToTerraform(struct.protocol),
    };
}
exports.appmeshVirtualNodeSpecListenerPortMappingToTerraform = appmeshVirtualNodeSpecListenerPortMappingToTerraform;
function appmeshVirtualNodeSpecListenerPortMappingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        port: {
            value: cdktf.numberToHclTerraform(struct.port),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
        protocol: {
            value: cdktf.stringToHclTerraform(struct.protocol),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerPortMappingToHclTerraform = appmeshVirtualNodeSpecListenerPortMappingToHclTerraform;
class AppmeshVirtualNodeSpecListenerPortMappingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._port !== undefined) {
            hasAnyValues = true;
            internalValueResult.port = this._port;
        }
        if (this._protocol !== undefined) {
            hasAnyValues = true;
            internalValueResult.protocol = this._protocol;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._port = undefined;
            this._protocol = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._port = value.port;
            this._protocol = value.protocol;
        }
    }
    get port() {
        return this.getNumberAttribute('port');
    }
    set port(value) {
        this._port = value;
    }
    // Temporarily expose input value. Use with caution.
    get portInput() {
        return this._port;
    }
    get protocol() {
        return this.getStringAttribute('protocol');
    }
    set protocol(value) {
        this._protocol = value;
    }
    // Temporarily expose input value. Use with caution.
    get protocolInput() {
        return this._protocol;
    }
}
exports.AppmeshVirtualNodeSpecListenerPortMappingOutputReference = AppmeshVirtualNodeSpecListenerPortMappingOutputReference;
_13 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerPortMappingOutputReference[_13] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerPortMappingOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTimeoutGrpcIdleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        unit: cdktf.stringToTerraform(struct.unit),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.appmeshVirtualNodeSpecListenerTimeoutGrpcIdleToTerraform = appmeshVirtualNodeSpecListenerTimeoutGrpcIdleToTerraform;
function appmeshVirtualNodeSpecListenerTimeoutGrpcIdleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        unit: {
            value: cdktf.stringToHclTerraform(struct.unit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.numberToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTimeoutGrpcIdleToHclTerraform = appmeshVirtualNodeSpecListenerTimeoutGrpcIdleToHclTerraform;
class AppmeshVirtualNodeSpecListenerTimeoutGrpcIdleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._unit !== undefined) {
            hasAnyValues = true;
            internalValueResult.unit = this._unit;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._unit = undefined;
            this._value = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._unit = value.unit;
            this._value = value.value;
        }
    }
    get unit() {
        return this.getStringAttribute('unit');
    }
    set unit(value) {
        this._unit = value;
    }
    // Temporarily expose input value. Use with caution.
    get unitInput() {
        return this._unit;
    }
    get value() {
        return this.getNumberAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.AppmeshVirtualNodeSpecListenerTimeoutGrpcIdleOutputReference = AppmeshVirtualNodeSpecListenerTimeoutGrpcIdleOutputReference;
_14 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTimeoutGrpcIdleOutputReference[_14] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTimeoutGrpcIdleOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        unit: cdktf.stringToTerraform(struct.unit),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.appmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestToTerraform = appmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestToTerraform;
function appmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        unit: {
            value: cdktf.stringToHclTerraform(struct.unit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.numberToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestToHclTerraform = appmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestToHclTerraform;
class AppmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._unit !== undefined) {
            hasAnyValues = true;
            internalValueResult.unit = this._unit;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._unit = undefined;
            this._value = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._unit = value.unit;
            this._value = value.value;
        }
    }
    get unit() {
        return this.getStringAttribute('unit');
    }
    set unit(value) {
        this._unit = value;
    }
    // Temporarily expose input value. Use with caution.
    get unitInput() {
        return this._unit;
    }
    get value() {
        return this.getNumberAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.AppmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestOutputReference = AppmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestOutputReference;
_15 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestOutputReference[_15] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTimeoutGrpcToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        idle: appmeshVirtualNodeSpecListenerTimeoutGrpcIdleToTerraform(struct.idle),
        per_request: appmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestToTerraform(struct.perRequest),
    };
}
exports.appmeshVirtualNodeSpecListenerTimeoutGrpcToTerraform = appmeshVirtualNodeSpecListenerTimeoutGrpcToTerraform;
function appmeshVirtualNodeSpecListenerTimeoutGrpcToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        idle: {
            value: appmeshVirtualNodeSpecListenerTimeoutGrpcIdleToHclTerraform(struct.idle),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTimeoutGrpcIdleList",
        },
        per_request: {
            value: appmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestToHclTerraform(struct.perRequest),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTimeoutGrpcToHclTerraform = appmeshVirtualNodeSpecListenerTimeoutGrpcToHclTerraform;
class AppmeshVirtualNodeSpecListenerTimeoutGrpcOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // idle - computed: false, optional: true, required: false
        this._idle = new AppmeshVirtualNodeSpecListenerTimeoutGrpcIdleOutputReference(this, "idle");
        // per_request - computed: false, optional: true, required: false
        this._perRequest = new AppmeshVirtualNodeSpecListenerTimeoutGrpcPerRequestOutputReference(this, "per_request");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._idle?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.idle = this._idle?.internalValue;
        }
        if (this._perRequest?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.perRequest = this._perRequest?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._idle.internalValue = undefined;
            this._perRequest.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._idle.internalValue = value.idle;
            this._perRequest.internalValue = value.perRequest;
        }
    }
    get idle() {
        return this._idle;
    }
    putIdle(value) {
        this._idle.internalValue = value;
    }
    resetIdle() {
        this._idle.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idleInput() {
        return this._idle.internalValue;
    }
    get perRequest() {
        return this._perRequest;
    }
    putPerRequest(value) {
        this._perRequest.internalValue = value;
    }
    resetPerRequest() {
        this._perRequest.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perRequestInput() {
        return this._perRequest.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecListenerTimeoutGrpcOutputReference = AppmeshVirtualNodeSpecListenerTimeoutGrpcOutputReference;
_16 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTimeoutGrpcOutputReference[_16] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTimeoutGrpcOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTimeoutHttpIdleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        unit: cdktf.stringToTerraform(struct.unit),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.appmeshVirtualNodeSpecListenerTimeoutHttpIdleToTerraform = appmeshVirtualNodeSpecListenerTimeoutHttpIdleToTerraform;
function appmeshVirtualNodeSpecListenerTimeoutHttpIdleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        unit: {
            value: cdktf.stringToHclTerraform(struct.unit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.numberToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTimeoutHttpIdleToHclTerraform = appmeshVirtualNodeSpecListenerTimeoutHttpIdleToHclTerraform;
class AppmeshVirtualNodeSpecListenerTimeoutHttpIdleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._unit !== undefined) {
            hasAnyValues = true;
            internalValueResult.unit = this._unit;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._unit = undefined;
            this._value = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._unit = value.unit;
            this._value = value.value;
        }
    }
    get unit() {
        return this.getStringAttribute('unit');
    }
    set unit(value) {
        this._unit = value;
    }
    // Temporarily expose input value. Use with caution.
    get unitInput() {
        return this._unit;
    }
    get value() {
        return this.getNumberAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.AppmeshVirtualNodeSpecListenerTimeoutHttpIdleOutputReference = AppmeshVirtualNodeSpecListenerTimeoutHttpIdleOutputReference;
_17 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTimeoutHttpIdleOutputReference[_17] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTimeoutHttpIdleOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTimeoutHttpPerRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        unit: cdktf.stringToTerraform(struct.unit),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.appmeshVirtualNodeSpecListenerTimeoutHttpPerRequestToTerraform = appmeshVirtualNodeSpecListenerTimeoutHttpPerRequestToTerraform;
function appmeshVirtualNodeSpecListenerTimeoutHttpPerRequestToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        unit: {
            value: cdktf.stringToHclTerraform(struct.unit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.numberToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTimeoutHttpPerRequestToHclTerraform = appmeshVirtualNodeSpecListenerTimeoutHttpPerRequestToHclTerraform;
class AppmeshVirtualNodeSpecListenerTimeoutHttpPerRequestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._unit !== undefined) {
            hasAnyValues = true;
            internalValueResult.unit = this._unit;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._unit = undefined;
            this._value = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._unit = value.unit;
            this._value = value.value;
        }
    }
    get unit() {
        return this.getStringAttribute('unit');
    }
    set unit(value) {
        this._unit = value;
    }
    // Temporarily expose input value. Use with caution.
    get unitInput() {
        return this._unit;
    }
    get value() {
        return this.getNumberAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.AppmeshVirtualNodeSpecListenerTimeoutHttpPerRequestOutputReference = AppmeshVirtualNodeSpecListenerTimeoutHttpPerRequestOutputReference;
_18 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTimeoutHttpPerRequestOutputReference[_18] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTimeoutHttpPerRequestOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTimeoutHttpToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        idle: appmeshVirtualNodeSpecListenerTimeoutHttpIdleToTerraform(struct.idle),
        per_request: appmeshVirtualNodeSpecListenerTimeoutHttpPerRequestToTerraform(struct.perRequest),
    };
}
exports.appmeshVirtualNodeSpecListenerTimeoutHttpToTerraform = appmeshVirtualNodeSpecListenerTimeoutHttpToTerraform;
function appmeshVirtualNodeSpecListenerTimeoutHttpToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        idle: {
            value: appmeshVirtualNodeSpecListenerTimeoutHttpIdleToHclTerraform(struct.idle),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTimeoutHttpIdleList",
        },
        per_request: {
            value: appmeshVirtualNodeSpecListenerTimeoutHttpPerRequestToHclTerraform(struct.perRequest),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTimeoutHttpPerRequestList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTimeoutHttpToHclTerraform = appmeshVirtualNodeSpecListenerTimeoutHttpToHclTerraform;
class AppmeshVirtualNodeSpecListenerTimeoutHttpOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // idle - computed: false, optional: true, required: false
        this._idle = new AppmeshVirtualNodeSpecListenerTimeoutHttpIdleOutputReference(this, "idle");
        // per_request - computed: false, optional: true, required: false
        this._perRequest = new AppmeshVirtualNodeSpecListenerTimeoutHttpPerRequestOutputReference(this, "per_request");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._idle?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.idle = this._idle?.internalValue;
        }
        if (this._perRequest?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.perRequest = this._perRequest?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._idle.internalValue = undefined;
            this._perRequest.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._idle.internalValue = value.idle;
            this._perRequest.internalValue = value.perRequest;
        }
    }
    get idle() {
        return this._idle;
    }
    putIdle(value) {
        this._idle.internalValue = value;
    }
    resetIdle() {
        this._idle.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idleInput() {
        return this._idle.internalValue;
    }
    get perRequest() {
        return this._perRequest;
    }
    putPerRequest(value) {
        this._perRequest.internalValue = value;
    }
    resetPerRequest() {
        this._perRequest.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perRequestInput() {
        return this._perRequest.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecListenerTimeoutHttpOutputReference = AppmeshVirtualNodeSpecListenerTimeoutHttpOutputReference;
_19 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTimeoutHttpOutputReference[_19] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTimeoutHttpOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTimeoutHttp2IdleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        unit: cdktf.stringToTerraform(struct.unit),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.appmeshVirtualNodeSpecListenerTimeoutHttp2IdleToTerraform = appmeshVirtualNodeSpecListenerTimeoutHttp2IdleToTerraform;
function appmeshVirtualNodeSpecListenerTimeoutHttp2IdleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        unit: {
            value: cdktf.stringToHclTerraform(struct.unit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.numberToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTimeoutHttp2IdleToHclTerraform = appmeshVirtualNodeSpecListenerTimeoutHttp2IdleToHclTerraform;
class AppmeshVirtualNodeSpecListenerTimeoutHttp2IdleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._unit !== undefined) {
            hasAnyValues = true;
            internalValueResult.unit = this._unit;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._unit = undefined;
            this._value = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._unit = value.unit;
            this._value = value.value;
        }
    }
    get unit() {
        return this.getStringAttribute('unit');
    }
    set unit(value) {
        this._unit = value;
    }
    // Temporarily expose input value. Use with caution.
    get unitInput() {
        return this._unit;
    }
    get value() {
        return this.getNumberAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.AppmeshVirtualNodeSpecListenerTimeoutHttp2IdleOutputReference = AppmeshVirtualNodeSpecListenerTimeoutHttp2IdleOutputReference;
_20 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTimeoutHttp2IdleOutputReference[_20] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTimeoutHttp2IdleOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        unit: cdktf.stringToTerraform(struct.unit),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.appmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestToTerraform = appmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestToTerraform;
function appmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        unit: {
            value: cdktf.stringToHclTerraform(struct.unit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.numberToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestToHclTerraform = appmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestToHclTerraform;
class AppmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._unit !== undefined) {
            hasAnyValues = true;
            internalValueResult.unit = this._unit;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._unit = undefined;
            this._value = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._unit = value.unit;
            this._value = value.value;
        }
    }
    get unit() {
        return this.getStringAttribute('unit');
    }
    set unit(value) {
        this._unit = value;
    }
    // Temporarily expose input value. Use with caution.
    get unitInput() {
        return this._unit;
    }
    get value() {
        return this.getNumberAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.AppmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestOutputReference = AppmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestOutputReference;
_21 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestOutputReference[_21] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTimeoutHttp2ToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        idle: appmeshVirtualNodeSpecListenerTimeoutHttp2IdleToTerraform(struct.idle),
        per_request: appmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestToTerraform(struct.perRequest),
    };
}
exports.appmeshVirtualNodeSpecListenerTimeoutHttp2ToTerraform = appmeshVirtualNodeSpecListenerTimeoutHttp2ToTerraform;
function appmeshVirtualNodeSpecListenerTimeoutHttp2ToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        idle: {
            value: appmeshVirtualNodeSpecListenerTimeoutHttp2IdleToHclTerraform(struct.idle),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTimeoutHttp2IdleList",
        },
        per_request: {
            value: appmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestToHclTerraform(struct.perRequest),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTimeoutHttp2ToHclTerraform = appmeshVirtualNodeSpecListenerTimeoutHttp2ToHclTerraform;
class AppmeshVirtualNodeSpecListenerTimeoutHttp2OutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // idle - computed: false, optional: true, required: false
        this._idle = new AppmeshVirtualNodeSpecListenerTimeoutHttp2IdleOutputReference(this, "idle");
        // per_request - computed: false, optional: true, required: false
        this._perRequest = new AppmeshVirtualNodeSpecListenerTimeoutHttp2PerRequestOutputReference(this, "per_request");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._idle?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.idle = this._idle?.internalValue;
        }
        if (this._perRequest?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.perRequest = this._perRequest?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._idle.internalValue = undefined;
            this._perRequest.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._idle.internalValue = value.idle;
            this._perRequest.internalValue = value.perRequest;
        }
    }
    get idle() {
        return this._idle;
    }
    putIdle(value) {
        this._idle.internalValue = value;
    }
    resetIdle() {
        this._idle.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idleInput() {
        return this._idle.internalValue;
    }
    get perRequest() {
        return this._perRequest;
    }
    putPerRequest(value) {
        this._perRequest.internalValue = value;
    }
    resetPerRequest() {
        this._perRequest.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get perRequestInput() {
        return this._perRequest.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecListenerTimeoutHttp2OutputReference = AppmeshVirtualNodeSpecListenerTimeoutHttp2OutputReference;
_22 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTimeoutHttp2OutputReference[_22] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTimeoutHttp2OutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTimeoutTcpIdleToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        unit: cdktf.stringToTerraform(struct.unit),
        value: cdktf.numberToTerraform(struct.value),
    };
}
exports.appmeshVirtualNodeSpecListenerTimeoutTcpIdleToTerraform = appmeshVirtualNodeSpecListenerTimeoutTcpIdleToTerraform;
function appmeshVirtualNodeSpecListenerTimeoutTcpIdleToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        unit: {
            value: cdktf.stringToHclTerraform(struct.unit),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        value: {
            value: cdktf.numberToHclTerraform(struct.value),
            isBlock: false,
            type: "simple",
            storageClassType: "number",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTimeoutTcpIdleToHclTerraform = appmeshVirtualNodeSpecListenerTimeoutTcpIdleToHclTerraform;
class AppmeshVirtualNodeSpecListenerTimeoutTcpIdleOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._unit !== undefined) {
            hasAnyValues = true;
            internalValueResult.unit = this._unit;
        }
        if (this._value !== undefined) {
            hasAnyValues = true;
            internalValueResult.value = this._value;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._unit = undefined;
            this._value = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._unit = value.unit;
            this._value = value.value;
        }
    }
    get unit() {
        return this.getStringAttribute('unit');
    }
    set unit(value) {
        this._unit = value;
    }
    // Temporarily expose input value. Use with caution.
    get unitInput() {
        return this._unit;
    }
    get value() {
        return this.getNumberAttribute('value');
    }
    set value(value) {
        this._value = value;
    }
    // Temporarily expose input value. Use with caution.
    get valueInput() {
        return this._value;
    }
}
exports.AppmeshVirtualNodeSpecListenerTimeoutTcpIdleOutputReference = AppmeshVirtualNodeSpecListenerTimeoutTcpIdleOutputReference;
_23 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTimeoutTcpIdleOutputReference[_23] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTimeoutTcpIdleOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTimeoutTcpToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        idle: appmeshVirtualNodeSpecListenerTimeoutTcpIdleToTerraform(struct.idle),
    };
}
exports.appmeshVirtualNodeSpecListenerTimeoutTcpToTerraform = appmeshVirtualNodeSpecListenerTimeoutTcpToTerraform;
function appmeshVirtualNodeSpecListenerTimeoutTcpToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        idle: {
            value: appmeshVirtualNodeSpecListenerTimeoutTcpIdleToHclTerraform(struct.idle),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTimeoutTcpIdleList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTimeoutTcpToHclTerraform = appmeshVirtualNodeSpecListenerTimeoutTcpToHclTerraform;
class AppmeshVirtualNodeSpecListenerTimeoutTcpOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // idle - computed: false, optional: true, required: false
        this._idle = new AppmeshVirtualNodeSpecListenerTimeoutTcpIdleOutputReference(this, "idle");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._idle?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.idle = this._idle?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._idle.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._idle.internalValue = value.idle;
        }
    }
    get idle() {
        return this._idle;
    }
    putIdle(value) {
        this._idle.internalValue = value;
    }
    resetIdle() {
        this._idle.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idleInput() {
        return this._idle.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecListenerTimeoutTcpOutputReference = AppmeshVirtualNodeSpecListenerTimeoutTcpOutputReference;
_24 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTimeoutTcpOutputReference[_24] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTimeoutTcpOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTimeoutToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        grpc: appmeshVirtualNodeSpecListenerTimeoutGrpcToTerraform(struct.grpc),
        http: appmeshVirtualNodeSpecListenerTimeoutHttpToTerraform(struct.http),
        http2: appmeshVirtualNodeSpecListenerTimeoutHttp2ToTerraform(struct.http2),
        tcp: appmeshVirtualNodeSpecListenerTimeoutTcpToTerraform(struct.tcp),
    };
}
exports.appmeshVirtualNodeSpecListenerTimeoutToTerraform = appmeshVirtualNodeSpecListenerTimeoutToTerraform;
function appmeshVirtualNodeSpecListenerTimeoutToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        grpc: {
            value: appmeshVirtualNodeSpecListenerTimeoutGrpcToHclTerraform(struct.grpc),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTimeoutGrpcList",
        },
        http: {
            value: appmeshVirtualNodeSpecListenerTimeoutHttpToHclTerraform(struct.http),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTimeoutHttpList",
        },
        http2: {
            value: appmeshVirtualNodeSpecListenerTimeoutHttp2ToHclTerraform(struct.http2),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTimeoutHttp2List",
        },
        tcp: {
            value: appmeshVirtualNodeSpecListenerTimeoutTcpToHclTerraform(struct.tcp),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTimeoutTcpList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTimeoutToHclTerraform = appmeshVirtualNodeSpecListenerTimeoutToHclTerraform;
class AppmeshVirtualNodeSpecListenerTimeoutOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // grpc - computed: false, optional: true, required: false
        this._grpc = new AppmeshVirtualNodeSpecListenerTimeoutGrpcOutputReference(this, "grpc");
        // http - computed: false, optional: true, required: false
        this._http = new AppmeshVirtualNodeSpecListenerTimeoutHttpOutputReference(this, "http");
        // http2 - computed: false, optional: true, required: false
        this._http2 = new AppmeshVirtualNodeSpecListenerTimeoutHttp2OutputReference(this, "http2");
        // tcp - computed: false, optional: true, required: false
        this._tcp = new AppmeshVirtualNodeSpecListenerTimeoutTcpOutputReference(this, "tcp");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._grpc?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.grpc = this._grpc?.internalValue;
        }
        if (this._http?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.http = this._http?.internalValue;
        }
        if (this._http2?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.http2 = this._http2?.internalValue;
        }
        if (this._tcp?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tcp = this._tcp?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._grpc.internalValue = undefined;
            this._http.internalValue = undefined;
            this._http2.internalValue = undefined;
            this._tcp.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._grpc.internalValue = value.grpc;
            this._http.internalValue = value.http;
            this._http2.internalValue = value.http2;
            this._tcp.internalValue = value.tcp;
        }
    }
    get grpc() {
        return this._grpc;
    }
    putGrpc(value) {
        this._grpc.internalValue = value;
    }
    resetGrpc() {
        this._grpc.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get grpcInput() {
        return this._grpc.internalValue;
    }
    get http() {
        return this._http;
    }
    putHttp(value) {
        this._http.internalValue = value;
    }
    resetHttp() {
        this._http.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get httpInput() {
        return this._http.internalValue;
    }
    get http2() {
        return this._http2;
    }
    putHttp2(value) {
        this._http2.internalValue = value;
    }
    resetHttp2() {
        this._http2.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get http2Input() {
        return this._http2.internalValue;
    }
    get tcp() {
        return this._tcp;
    }
    putTcp(value) {
        this._tcp.internalValue = value;
    }
    resetTcp() {
        this._tcp.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tcpInput() {
        return this._tcp.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecListenerTimeoutOutputReference = AppmeshVirtualNodeSpecListenerTimeoutOutputReference;
_25 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTimeoutOutputReference[_25] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTimeoutOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTlsCertificateAcmToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        certificate_arn: cdktf.stringToTerraform(struct.certificateArn),
    };
}
exports.appmeshVirtualNodeSpecListenerTlsCertificateAcmToTerraform = appmeshVirtualNodeSpecListenerTlsCertificateAcmToTerraform;
function appmeshVirtualNodeSpecListenerTlsCertificateAcmToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        certificate_arn: {
            value: cdktf.stringToHclTerraform(struct.certificateArn),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTlsCertificateAcmToHclTerraform = appmeshVirtualNodeSpecListenerTlsCertificateAcmToHclTerraform;
class AppmeshVirtualNodeSpecListenerTlsCertificateAcmOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certificateArn !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateArn = this._certificateArn;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certificateArn = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certificateArn = value.certificateArn;
        }
    }
    get certificateArn() {
        return this.getStringAttribute('certificate_arn');
    }
    set certificateArn(value) {
        this._certificateArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get certificateArnInput() {
        return this._certificateArn;
    }
}
exports.AppmeshVirtualNodeSpecListenerTlsCertificateAcmOutputReference = AppmeshVirtualNodeSpecListenerTlsCertificateAcmOutputReference;
_26 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTlsCertificateAcmOutputReference[_26] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTlsCertificateAcmOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTlsCertificateFileToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        certificate_chain: cdktf.stringToTerraform(struct.certificateChain),
        private_key: cdktf.stringToTerraform(struct.privateKey),
    };
}
exports.appmeshVirtualNodeSpecListenerTlsCertificateFileToTerraform = appmeshVirtualNodeSpecListenerTlsCertificateFileToTerraform;
function appmeshVirtualNodeSpecListenerTlsCertificateFileToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        certificate_chain: {
            value: cdktf.stringToHclTerraform(struct.certificateChain),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        private_key: {
            value: cdktf.stringToHclTerraform(struct.privateKey),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTlsCertificateFileToHclTerraform = appmeshVirtualNodeSpecListenerTlsCertificateFileToHclTerraform;
class AppmeshVirtualNodeSpecListenerTlsCertificateFileOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certificateChain !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateChain = this._certificateChain;
        }
        if (this._privateKey !== undefined) {
            hasAnyValues = true;
            internalValueResult.privateKey = this._privateKey;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certificateChain = undefined;
            this._privateKey = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certificateChain = value.certificateChain;
            this._privateKey = value.privateKey;
        }
    }
    get certificateChain() {
        return this.getStringAttribute('certificate_chain');
    }
    set certificateChain(value) {
        this._certificateChain = value;
    }
    // Temporarily expose input value. Use with caution.
    get certificateChainInput() {
        return this._certificateChain;
    }
    get privateKey() {
        return this.getStringAttribute('private_key');
    }
    set privateKey(value) {
        this._privateKey = value;
    }
    // Temporarily expose input value. Use with caution.
    get privateKeyInput() {
        return this._privateKey;
    }
}
exports.AppmeshVirtualNodeSpecListenerTlsCertificateFileOutputReference = AppmeshVirtualNodeSpecListenerTlsCertificateFileOutputReference;
_27 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTlsCertificateFileOutputReference[_27] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTlsCertificateFileOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTlsCertificateSdsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_name: cdktf.stringToTerraform(struct.secretName),
    };
}
exports.appmeshVirtualNodeSpecListenerTlsCertificateSdsToTerraform = appmeshVirtualNodeSpecListenerTlsCertificateSdsToTerraform;
function appmeshVirtualNodeSpecListenerTlsCertificateSdsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_name: {
            value: cdktf.stringToHclTerraform(struct.secretName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTlsCertificateSdsToHclTerraform = appmeshVirtualNodeSpecListenerTlsCertificateSdsToHclTerraform;
class AppmeshVirtualNodeSpecListenerTlsCertificateSdsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretName !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretName = this._secretName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretName = value.secretName;
        }
    }
    get secretName() {
        return this.getStringAttribute('secret_name');
    }
    set secretName(value) {
        this._secretName = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretNameInput() {
        return this._secretName;
    }
}
exports.AppmeshVirtualNodeSpecListenerTlsCertificateSdsOutputReference = AppmeshVirtualNodeSpecListenerTlsCertificateSdsOutputReference;
_28 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTlsCertificateSdsOutputReference[_28] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTlsCertificateSdsOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTlsCertificateToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        acm: appmeshVirtualNodeSpecListenerTlsCertificateAcmToTerraform(struct.acm),
        file: appmeshVirtualNodeSpecListenerTlsCertificateFileToTerraform(struct.file),
        sds: appmeshVirtualNodeSpecListenerTlsCertificateSdsToTerraform(struct.sds),
    };
}
exports.appmeshVirtualNodeSpecListenerTlsCertificateToTerraform = appmeshVirtualNodeSpecListenerTlsCertificateToTerraform;
function appmeshVirtualNodeSpecListenerTlsCertificateToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        acm: {
            value: appmeshVirtualNodeSpecListenerTlsCertificateAcmToHclTerraform(struct.acm),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTlsCertificateAcmList",
        },
        file: {
            value: appmeshVirtualNodeSpecListenerTlsCertificateFileToHclTerraform(struct.file),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTlsCertificateFileList",
        },
        sds: {
            value: appmeshVirtualNodeSpecListenerTlsCertificateSdsToHclTerraform(struct.sds),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTlsCertificateSdsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTlsCertificateToHclTerraform = appmeshVirtualNodeSpecListenerTlsCertificateToHclTerraform;
class AppmeshVirtualNodeSpecListenerTlsCertificateOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // acm - computed: false, optional: true, required: false
        this._acm = new AppmeshVirtualNodeSpecListenerTlsCertificateAcmOutputReference(this, "acm");
        // file - computed: false, optional: true, required: false
        this._file = new AppmeshVirtualNodeSpecListenerTlsCertificateFileOutputReference(this, "file");
        // sds - computed: false, optional: true, required: false
        this._sds = new AppmeshVirtualNodeSpecListenerTlsCertificateSdsOutputReference(this, "sds");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._acm?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.acm = this._acm?.internalValue;
        }
        if (this._file?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.file = this._file?.internalValue;
        }
        if (this._sds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sds = this._sds?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._acm.internalValue = undefined;
            this._file.internalValue = undefined;
            this._sds.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._acm.internalValue = value.acm;
            this._file.internalValue = value.file;
            this._sds.internalValue = value.sds;
        }
    }
    get acm() {
        return this._acm;
    }
    putAcm(value) {
        this._acm.internalValue = value;
    }
    resetAcm() {
        this._acm.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get acmInput() {
        return this._acm.internalValue;
    }
    get file() {
        return this._file;
    }
    putFile(value) {
        this._file.internalValue = value;
    }
    resetFile() {
        this._file.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileInput() {
        return this._file.internalValue;
    }
    get sds() {
        return this._sds;
    }
    putSds(value) {
        this._sds.internalValue = value;
    }
    resetSds() {
        this._sds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sdsInput() {
        return this._sds.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecListenerTlsCertificateOutputReference = AppmeshVirtualNodeSpecListenerTlsCertificateOutputReference;
_29 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTlsCertificateOutputReference[_29] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTlsCertificateOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        exact: cdktf.listMapper(cdktf.stringToTerraform, false)(struct.exact),
    };
}
exports.appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchToTerraform = appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchToTerraform;
function appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        exact: {
            value: cdktf.listMapperHcl(cdktf.stringToHclTerraform, false)(struct.exact),
            isBlock: false,
            type: "set",
            storageClassType: "stringList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchToHclTerraform = appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchToHclTerraform;
class AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._exact !== undefined) {
            hasAnyValues = true;
            internalValueResult.exact = this._exact;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._exact = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._exact = value.exact;
        }
    }
    get exact() {
        return cdktf.Fn.tolist(this.getListAttribute('exact'));
    }
    set exact(value) {
        this._exact = value;
    }
    // Temporarily expose input value. Use with caution.
    get exactInput() {
        return this._exact;
    }
}
exports.AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutputReference = AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutputReference;
_30 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutputReference[_30] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        match: appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchToTerraform(struct.match),
    };
}
exports.appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesToTerraform = appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesToTerraform;
function appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        match: {
            value: appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchToHclTerraform(struct.match),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesToHclTerraform = appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesToHclTerraform;
class AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // match - computed: false, optional: false, required: true
        this._match = new AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesMatchOutputReference(this, "match");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._match?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.match = this._match?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._match.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._match.internalValue = value.match;
        }
    }
    get match() {
        return this._match;
    }
    putMatch(value) {
        this._match.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get matchInput() {
        return this._match.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutputReference = AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutputReference;
_31 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutputReference[_31] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTlsValidationTrustFileToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        certificate_chain: cdktf.stringToTerraform(struct.certificateChain),
    };
}
exports.appmeshVirtualNodeSpecListenerTlsValidationTrustFileToTerraform = appmeshVirtualNodeSpecListenerTlsValidationTrustFileToTerraform;
function appmeshVirtualNodeSpecListenerTlsValidationTrustFileToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        certificate_chain: {
            value: cdktf.stringToHclTerraform(struct.certificateChain),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTlsValidationTrustFileToHclTerraform = appmeshVirtualNodeSpecListenerTlsValidationTrustFileToHclTerraform;
class AppmeshVirtualNodeSpecListenerTlsValidationTrustFileOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._certificateChain !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificateChain = this._certificateChain;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._certificateChain = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._certificateChain = value.certificateChain;
        }
    }
    get certificateChain() {
        return this.getStringAttribute('certificate_chain');
    }
    set certificateChain(value) {
        this._certificateChain = value;
    }
    // Temporarily expose input value. Use with caution.
    get certificateChainInput() {
        return this._certificateChain;
    }
}
exports.AppmeshVirtualNodeSpecListenerTlsValidationTrustFileOutputReference = AppmeshVirtualNodeSpecListenerTlsValidationTrustFileOutputReference;
_32 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTlsValidationTrustFileOutputReference[_32] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTlsValidationTrustFileOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTlsValidationTrustSdsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        secret_name: cdktf.stringToTerraform(struct.secretName),
    };
}
exports.appmeshVirtualNodeSpecListenerTlsValidationTrustSdsToTerraform = appmeshVirtualNodeSpecListenerTlsValidationTrustSdsToTerraform;
function appmeshVirtualNodeSpecListenerTlsValidationTrustSdsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        secret_name: {
            value: cdktf.stringToHclTerraform(struct.secretName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTlsValidationTrustSdsToHclTerraform = appmeshVirtualNodeSpecListenerTlsValidationTrustSdsToHclTerraform;
class AppmeshVirtualNodeSpecListenerTlsValidationTrustSdsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._secretName !== undefined) {
            hasAnyValues = true;
            internalValueResult.secretName = this._secretName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._secretName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._secretName = value.secretName;
        }
    }
    get secretName() {
        return this.getStringAttribute('secret_name');
    }
    set secretName(value) {
        this._secretName = value;
    }
    // Temporarily expose input value. Use with caution.
    get secretNameInput() {
        return this._secretName;
    }
}
exports.AppmeshVirtualNodeSpecListenerTlsValidationTrustSdsOutputReference = AppmeshVirtualNodeSpecListenerTlsValidationTrustSdsOutputReference;
_33 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTlsValidationTrustSdsOutputReference[_33] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTlsValidationTrustSdsOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTlsValidationTrustToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        file: appmeshVirtualNodeSpecListenerTlsValidationTrustFileToTerraform(struct.file),
        sds: appmeshVirtualNodeSpecListenerTlsValidationTrustSdsToTerraform(struct.sds),
    };
}
exports.appmeshVirtualNodeSpecListenerTlsValidationTrustToTerraform = appmeshVirtualNodeSpecListenerTlsValidationTrustToTerraform;
function appmeshVirtualNodeSpecListenerTlsValidationTrustToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        file: {
            value: appmeshVirtualNodeSpecListenerTlsValidationTrustFileToHclTerraform(struct.file),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTlsValidationTrustFileList",
        },
        sds: {
            value: appmeshVirtualNodeSpecListenerTlsValidationTrustSdsToHclTerraform(struct.sds),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTlsValidationTrustSdsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTlsValidationTrustToHclTerraform = appmeshVirtualNodeSpecListenerTlsValidationTrustToHclTerraform;
class AppmeshVirtualNodeSpecListenerTlsValidationTrustOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // file - computed: false, optional: true, required: false
        this._file = new AppmeshVirtualNodeSpecListenerTlsValidationTrustFileOutputReference(this, "file");
        // sds - computed: false, optional: true, required: false
        this._sds = new AppmeshVirtualNodeSpecListenerTlsValidationTrustSdsOutputReference(this, "sds");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._file?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.file = this._file?.internalValue;
        }
        if (this._sds?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.sds = this._sds?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._file.internalValue = undefined;
            this._sds.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._file.internalValue = value.file;
            this._sds.internalValue = value.sds;
        }
    }
    get file() {
        return this._file;
    }
    putFile(value) {
        this._file.internalValue = value;
    }
    resetFile() {
        this._file.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileInput() {
        return this._file.internalValue;
    }
    get sds() {
        return this._sds;
    }
    putSds(value) {
        this._sds.internalValue = value;
    }
    resetSds() {
        this._sds.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get sdsInput() {
        return this._sds.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecListenerTlsValidationTrustOutputReference = AppmeshVirtualNodeSpecListenerTlsValidationTrustOutputReference;
_34 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTlsValidationTrustOutputReference[_34] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTlsValidationTrustOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTlsValidationToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        subject_alternative_names: appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesToTerraform(struct.subjectAlternativeNames),
        trust: appmeshVirtualNodeSpecListenerTlsValidationTrustToTerraform(struct.trust),
    };
}
exports.appmeshVirtualNodeSpecListenerTlsValidationToTerraform = appmeshVirtualNodeSpecListenerTlsValidationToTerraform;
function appmeshVirtualNodeSpecListenerTlsValidationToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        subject_alternative_names: {
            value: appmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesToHclTerraform(struct.subjectAlternativeNames),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesList",
        },
        trust: {
            value: appmeshVirtualNodeSpecListenerTlsValidationTrustToHclTerraform(struct.trust),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTlsValidationTrustList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTlsValidationToHclTerraform = appmeshVirtualNodeSpecListenerTlsValidationToHclTerraform;
class AppmeshVirtualNodeSpecListenerTlsValidationOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // subject_alternative_names - computed: false, optional: true, required: false
        this._subjectAlternativeNames = new AppmeshVirtualNodeSpecListenerTlsValidationSubjectAlternativeNamesOutputReference(this, "subject_alternative_names");
        // trust - computed: false, optional: false, required: true
        this._trust = new AppmeshVirtualNodeSpecListenerTlsValidationTrustOutputReference(this, "trust");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._subjectAlternativeNames?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.subjectAlternativeNames = this._subjectAlternativeNames?.internalValue;
        }
        if (this._trust?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.trust = this._trust?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._subjectAlternativeNames.internalValue = undefined;
            this._trust.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._subjectAlternativeNames.internalValue = value.subjectAlternativeNames;
            this._trust.internalValue = value.trust;
        }
    }
    get subjectAlternativeNames() {
        return this._subjectAlternativeNames;
    }
    putSubjectAlternativeNames(value) {
        this._subjectAlternativeNames.internalValue = value;
    }
    resetSubjectAlternativeNames() {
        this._subjectAlternativeNames.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get subjectAlternativeNamesInput() {
        return this._subjectAlternativeNames.internalValue;
    }
    get trust() {
        return this._trust;
    }
    putTrust(value) {
        this._trust.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get trustInput() {
        return this._trust.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecListenerTlsValidationOutputReference = AppmeshVirtualNodeSpecListenerTlsValidationOutputReference;
_35 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTlsValidationOutputReference[_35] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTlsValidationOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerTlsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        mode: cdktf.stringToTerraform(struct.mode),
        certificate: appmeshVirtualNodeSpecListenerTlsCertificateToTerraform(struct.certificate),
        validation: appmeshVirtualNodeSpecListenerTlsValidationToTerraform(struct.validation),
    };
}
exports.appmeshVirtualNodeSpecListenerTlsToTerraform = appmeshVirtualNodeSpecListenerTlsToTerraform;
function appmeshVirtualNodeSpecListenerTlsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        mode: {
            value: cdktf.stringToHclTerraform(struct.mode),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        certificate: {
            value: appmeshVirtualNodeSpecListenerTlsCertificateToHclTerraform(struct.certificate),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTlsCertificateList",
        },
        validation: {
            value: appmeshVirtualNodeSpecListenerTlsValidationToHclTerraform(struct.validation),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTlsValidationList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerTlsToHclTerraform = appmeshVirtualNodeSpecListenerTlsToHclTerraform;
class AppmeshVirtualNodeSpecListenerTlsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // certificate - computed: false, optional: false, required: true
        this._certificate = new AppmeshVirtualNodeSpecListenerTlsCertificateOutputReference(this, "certificate");
        // validation - computed: false, optional: true, required: false
        this._validation = new AppmeshVirtualNodeSpecListenerTlsValidationOutputReference(this, "validation");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._mode !== undefined) {
            hasAnyValues = true;
            internalValueResult.mode = this._mode;
        }
        if (this._certificate?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.certificate = this._certificate?.internalValue;
        }
        if (this._validation?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.validation = this._validation?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._mode = undefined;
            this._certificate.internalValue = undefined;
            this._validation.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._mode = value.mode;
            this._certificate.internalValue = value.certificate;
            this._validation.internalValue = value.validation;
        }
    }
    get mode() {
        return this.getStringAttribute('mode');
    }
    set mode(value) {
        this._mode = value;
    }
    // Temporarily expose input value. Use with caution.
    get modeInput() {
        return this._mode;
    }
    get certificate() {
        return this._certificate;
    }
    putCertificate(value) {
        this._certificate.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get certificateInput() {
        return this._certificate.internalValue;
    }
    get validation() {
        return this._validation;
    }
    putValidation(value) {
        this._validation.internalValue = value;
    }
    resetValidation() {
        this._validation.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get validationInput() {
        return this._validation.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecListenerTlsOutputReference = AppmeshVirtualNodeSpecListenerTlsOutputReference;
_36 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerTlsOutputReference[_36] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerTlsOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecListenerToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        connection_pool: appmeshVirtualNodeSpecListenerConnectionPoolToTerraform(struct.connectionPool),
        health_check: appmeshVirtualNodeSpecListenerHealthCheckToTerraform(struct.healthCheck),
        outlier_detection: appmeshVirtualNodeSpecListenerOutlierDetectionToTerraform(struct.outlierDetection),
        port_mapping: appmeshVirtualNodeSpecListenerPortMappingToTerraform(struct.portMapping),
        timeout: appmeshVirtualNodeSpecListenerTimeoutToTerraform(struct.timeout),
        tls: appmeshVirtualNodeSpecListenerTlsToTerraform(struct.tls),
    };
}
exports.appmeshVirtualNodeSpecListenerToTerraform = appmeshVirtualNodeSpecListenerToTerraform;
function appmeshVirtualNodeSpecListenerToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        connection_pool: {
            value: appmeshVirtualNodeSpecListenerConnectionPoolToHclTerraform(struct.connectionPool),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerConnectionPoolList",
        },
        health_check: {
            value: appmeshVirtualNodeSpecListenerHealthCheckToHclTerraform(struct.healthCheck),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerHealthCheckList",
        },
        outlier_detection: {
            value: appmeshVirtualNodeSpecListenerOutlierDetectionToHclTerraform(struct.outlierDetection),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerOutlierDetectionList",
        },
        port_mapping: {
            value: appmeshVirtualNodeSpecListenerPortMappingToHclTerraform(struct.portMapping),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerPortMappingList",
        },
        timeout: {
            value: appmeshVirtualNodeSpecListenerTimeoutToHclTerraform(struct.timeout),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTimeoutList",
        },
        tls: {
            value: appmeshVirtualNodeSpecListenerTlsToHclTerraform(struct.tls),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerTlsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecListenerToHclTerraform = appmeshVirtualNodeSpecListenerToHclTerraform;
class AppmeshVirtualNodeSpecListenerOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // connection_pool - computed: false, optional: true, required: false
        this._connectionPool = new AppmeshVirtualNodeSpecListenerConnectionPoolOutputReference(this, "connection_pool");
        // health_check - computed: false, optional: true, required: false
        this._healthCheck = new AppmeshVirtualNodeSpecListenerHealthCheckOutputReference(this, "health_check");
        // outlier_detection - computed: false, optional: true, required: false
        this._outlierDetection = new AppmeshVirtualNodeSpecListenerOutlierDetectionOutputReference(this, "outlier_detection");
        // port_mapping - computed: false, optional: false, required: true
        this._portMapping = new AppmeshVirtualNodeSpecListenerPortMappingOutputReference(this, "port_mapping");
        // timeout - computed: false, optional: true, required: false
        this._timeout = new AppmeshVirtualNodeSpecListenerTimeoutOutputReference(this, "timeout");
        // tls - computed: false, optional: true, required: false
        this._tls = new AppmeshVirtualNodeSpecListenerTlsOutputReference(this, "tls");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._connectionPool?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.connectionPool = this._connectionPool?.internalValue;
        }
        if (this._healthCheck?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.healthCheck = this._healthCheck?.internalValue;
        }
        if (this._outlierDetection?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.outlierDetection = this._outlierDetection?.internalValue;
        }
        if (this._portMapping?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.portMapping = this._portMapping?.internalValue;
        }
        if (this._timeout?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.timeout = this._timeout?.internalValue;
        }
        if (this._tls?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.tls = this._tls?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._connectionPool.internalValue = undefined;
            this._healthCheck.internalValue = undefined;
            this._outlierDetection.internalValue = undefined;
            this._portMapping.internalValue = undefined;
            this._timeout.internalValue = undefined;
            this._tls.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._connectionPool.internalValue = value.connectionPool;
            this._healthCheck.internalValue = value.healthCheck;
            this._outlierDetection.internalValue = value.outlierDetection;
            this._portMapping.internalValue = value.portMapping;
            this._timeout.internalValue = value.timeout;
            this._tls.internalValue = value.tls;
        }
    }
    get connectionPool() {
        return this._connectionPool;
    }
    putConnectionPool(value) {
        this._connectionPool.internalValue = value;
    }
    resetConnectionPool() {
        this._connectionPool.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get connectionPoolInput() {
        return this._connectionPool.internalValue;
    }
    get healthCheck() {
        return this._healthCheck;
    }
    putHealthCheck(value) {
        this._healthCheck.internalValue = value;
    }
    resetHealthCheck() {
        this._healthCheck.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get healthCheckInput() {
        return this._healthCheck.internalValue;
    }
    get outlierDetection() {
        return this._outlierDetection;
    }
    putOutlierDetection(value) {
        this._outlierDetection.internalValue = value;
    }
    resetOutlierDetection() {
        this._outlierDetection.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get outlierDetectionInput() {
        return this._outlierDetection.internalValue;
    }
    get portMapping() {
        return this._portMapping;
    }
    putPortMapping(value) {
        this._portMapping.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get portMappingInput() {
        return this._portMapping.internalValue;
    }
    get timeout() {
        return this._timeout;
    }
    putTimeout(value) {
        this._timeout.internalValue = value;
    }
    resetTimeout() {
        this._timeout.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get timeoutInput() {
        return this._timeout.internalValue;
    }
    get tls() {
        return this._tls;
    }
    putTls(value) {
        this._tls.internalValue = value;
    }
    resetTls() {
        this._tls.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tlsInput() {
        return this._tls.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecListenerOutputReference = AppmeshVirtualNodeSpecListenerOutputReference;
_37 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecListenerOutputReference[_37] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecListenerOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecLoggingAccessLogFileToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        path: cdktf.stringToTerraform(struct.path),
    };
}
exports.appmeshVirtualNodeSpecLoggingAccessLogFileToTerraform = appmeshVirtualNodeSpecLoggingAccessLogFileToTerraform;
function appmeshVirtualNodeSpecLoggingAccessLogFileToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        path: {
            value: cdktf.stringToHclTerraform(struct.path),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecLoggingAccessLogFileToHclTerraform = appmeshVirtualNodeSpecLoggingAccessLogFileToHclTerraform;
class AppmeshVirtualNodeSpecLoggingAccessLogFileOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._path !== undefined) {
            hasAnyValues = true;
            internalValueResult.path = this._path;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._path = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._path = value.path;
        }
    }
    get path() {
        return this.getStringAttribute('path');
    }
    set path(value) {
        this._path = value;
    }
    // Temporarily expose input value. Use with caution.
    get pathInput() {
        return this._path;
    }
}
exports.AppmeshVirtualNodeSpecLoggingAccessLogFileOutputReference = AppmeshVirtualNodeSpecLoggingAccessLogFileOutputReference;
_38 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecLoggingAccessLogFileOutputReference[_38] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecLoggingAccessLogFileOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecLoggingAccessLogToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        file: appmeshVirtualNodeSpecLoggingAccessLogFileToTerraform(struct.file),
    };
}
exports.appmeshVirtualNodeSpecLoggingAccessLogToTerraform = appmeshVirtualNodeSpecLoggingAccessLogToTerraform;
function appmeshVirtualNodeSpecLoggingAccessLogToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        file: {
            value: appmeshVirtualNodeSpecLoggingAccessLogFileToHclTerraform(struct.file),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecLoggingAccessLogFileList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecLoggingAccessLogToHclTerraform = appmeshVirtualNodeSpecLoggingAccessLogToHclTerraform;
class AppmeshVirtualNodeSpecLoggingAccessLogOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // file - computed: false, optional: true, required: false
        this._file = new AppmeshVirtualNodeSpecLoggingAccessLogFileOutputReference(this, "file");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._file?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.file = this._file?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._file.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._file.internalValue = value.file;
        }
    }
    get file() {
        return this._file;
    }
    putFile(value) {
        this._file.internalValue = value;
    }
    resetFile() {
        this._file.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get fileInput() {
        return this._file.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecLoggingAccessLogOutputReference = AppmeshVirtualNodeSpecLoggingAccessLogOutputReference;
_39 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecLoggingAccessLogOutputReference[_39] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecLoggingAccessLogOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecLoggingToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        access_log: appmeshVirtualNodeSpecLoggingAccessLogToTerraform(struct.accessLog),
    };
}
exports.appmeshVirtualNodeSpecLoggingToTerraform = appmeshVirtualNodeSpecLoggingToTerraform;
function appmeshVirtualNodeSpecLoggingToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        access_log: {
            value: appmeshVirtualNodeSpecLoggingAccessLogToHclTerraform(struct.accessLog),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecLoggingAccessLogList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecLoggingToHclTerraform = appmeshVirtualNodeSpecLoggingToHclTerraform;
class AppmeshVirtualNodeSpecLoggingOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // access_log - computed: false, optional: true, required: false
        this._accessLog = new AppmeshVirtualNodeSpecLoggingAccessLogOutputReference(this, "access_log");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._accessLog?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.accessLog = this._accessLog?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._accessLog.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._accessLog.internalValue = value.accessLog;
        }
    }
    get accessLog() {
        return this._accessLog;
    }
    putAccessLog(value) {
        this._accessLog.internalValue = value;
    }
    resetAccessLog() {
        this._accessLog.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get accessLogInput() {
        return this._accessLog.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecLoggingOutputReference = AppmeshVirtualNodeSpecLoggingOutputReference;
_40 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecLoggingOutputReference[_40] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecLoggingOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        attributes: cdktf.hashMapper(cdktf.stringToTerraform)(struct.attributes),
        namespace_name: cdktf.stringToTerraform(struct.namespaceName),
        service_name: cdktf.stringToTerraform(struct.serviceName),
    };
}
exports.appmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapToTerraform = appmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapToTerraform;
function appmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        attributes: {
            value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(struct.attributes),
            isBlock: false,
            type: "map",
            storageClassType: "stringMap",
        },
        namespace_name: {
            value: cdktf.stringToHclTerraform(struct.namespaceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
        service_name: {
            value: cdktf.stringToHclTerraform(struct.serviceName),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapToHclTerraform = appmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapToHclTerraform;
class AppmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._attributes !== undefined) {
            hasAnyValues = true;
            internalValueResult.attributes = this._attributes;
        }
        if (this._namespaceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.namespaceName = this._namespaceName;
        }
        if (this._serviceName !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceName = this._serviceName;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._attributes = undefined;
            this._namespaceName = undefined;
            this._serviceName = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._attributes = value.attributes;
            this._namespaceName = value.namespaceName;
            this._serviceName = value.serviceName;
        }
    }
    get attributes() {
        return this.getStringMapAttribute('attributes');
    }
    set attributes(value) {
        this._attributes = value;
    }
    resetAttributes() {
        this._attributes = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get attributesInput() {
        return this._attributes;
    }
    get namespaceName() {
        return this.getStringAttribute('namespace_name');
    }
    set namespaceName(value) {
        this._namespaceName = value;
    }
    // Temporarily expose input value. Use with caution.
    get namespaceNameInput() {
        return this._namespaceName;
    }
    get serviceName() {
        return this.getStringAttribute('service_name');
    }
    set serviceName(value) {
        this._serviceName = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceNameInput() {
        return this._serviceName;
    }
}
exports.AppmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputReference = AppmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputReference;
_41 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputReference[_41] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecServiceDiscoveryDnsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        hostname: cdktf.stringToTerraform(struct.hostname),
    };
}
exports.appmeshVirtualNodeSpecServiceDiscoveryDnsToTerraform = appmeshVirtualNodeSpecServiceDiscoveryDnsToTerraform;
function appmeshVirtualNodeSpecServiceDiscoveryDnsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        hostname: {
            value: cdktf.stringToHclTerraform(struct.hostname),
            isBlock: false,
            type: "simple",
            storageClassType: "string",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecServiceDiscoveryDnsToHclTerraform = appmeshVirtualNodeSpecServiceDiscoveryDnsToHclTerraform;
class AppmeshVirtualNodeSpecServiceDiscoveryDnsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._hostname !== undefined) {
            hasAnyValues = true;
            internalValueResult.hostname = this._hostname;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._hostname = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._hostname = value.hostname;
        }
    }
    get hostname() {
        return this.getStringAttribute('hostname');
    }
    set hostname(value) {
        this._hostname = value;
    }
    // Temporarily expose input value. Use with caution.
    get hostnameInput() {
        return this._hostname;
    }
}
exports.AppmeshVirtualNodeSpecServiceDiscoveryDnsOutputReference = AppmeshVirtualNodeSpecServiceDiscoveryDnsOutputReference;
_42 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecServiceDiscoveryDnsOutputReference[_42] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecServiceDiscoveryDnsOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecServiceDiscoveryToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        aws_cloud_map: appmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapToTerraform(struct.awsCloudMap),
        dns: appmeshVirtualNodeSpecServiceDiscoveryDnsToTerraform(struct.dns),
    };
}
exports.appmeshVirtualNodeSpecServiceDiscoveryToTerraform = appmeshVirtualNodeSpecServiceDiscoveryToTerraform;
function appmeshVirtualNodeSpecServiceDiscoveryToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        aws_cloud_map: {
            value: appmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapToHclTerraform(struct.awsCloudMap),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapList",
        },
        dns: {
            value: appmeshVirtualNodeSpecServiceDiscoveryDnsToHclTerraform(struct.dns),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecServiceDiscoveryDnsList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecServiceDiscoveryToHclTerraform = appmeshVirtualNodeSpecServiceDiscoveryToHclTerraform;
class AppmeshVirtualNodeSpecServiceDiscoveryOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // aws_cloud_map - computed: false, optional: true, required: false
        this._awsCloudMap = new AppmeshVirtualNodeSpecServiceDiscoveryAwsCloudMapOutputReference(this, "aws_cloud_map");
        // dns - computed: false, optional: true, required: false
        this._dns = new AppmeshVirtualNodeSpecServiceDiscoveryDnsOutputReference(this, "dns");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._awsCloudMap?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.awsCloudMap = this._awsCloudMap?.internalValue;
        }
        if (this._dns?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.dns = this._dns?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._awsCloudMap.internalValue = undefined;
            this._dns.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._awsCloudMap.internalValue = value.awsCloudMap;
            this._dns.internalValue = value.dns;
        }
    }
    get awsCloudMap() {
        return this._awsCloudMap;
    }
    putAwsCloudMap(value) {
        this._awsCloudMap.internalValue = value;
    }
    resetAwsCloudMap() {
        this._awsCloudMap.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get awsCloudMapInput() {
        return this._awsCloudMap.internalValue;
    }
    get dns() {
        return this._dns;
    }
    putDns(value) {
        this._dns.internalValue = value;
    }
    resetDns() {
        this._dns.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get dnsInput() {
        return this._dns.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecServiceDiscoveryOutputReference = AppmeshVirtualNodeSpecServiceDiscoveryOutputReference;
_43 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecServiceDiscoveryOutputReference[_43] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecServiceDiscoveryOutputReference", version: "0.0.0" };
function appmeshVirtualNodeSpecToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {
        backend: cdktf.listMapper(appmeshVirtualNodeSpecBackendToTerraform, true)(struct.backend),
        backend_defaults: appmeshVirtualNodeSpecBackendDefaultsToTerraform(struct.backendDefaults),
        listener: appmeshVirtualNodeSpecListenerToTerraform(struct.listener),
        logging: appmeshVirtualNodeSpecLoggingToTerraform(struct.logging),
        service_discovery: appmeshVirtualNodeSpecServiceDiscoveryToTerraform(struct.serviceDiscovery),
    };
}
exports.appmeshVirtualNodeSpecToTerraform = appmeshVirtualNodeSpecToTerraform;
function appmeshVirtualNodeSpecToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {
        backend: {
            value: cdktf.listMapperHcl(appmeshVirtualNodeSpecBackendToHclTerraform, true)(struct.backend),
            isBlock: true,
            type: "set",
            storageClassType: "AppmeshVirtualNodeSpecBackendList",
        },
        backend_defaults: {
            value: appmeshVirtualNodeSpecBackendDefaultsToHclTerraform(struct.backendDefaults),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecBackendDefaultsList",
        },
        listener: {
            value: appmeshVirtualNodeSpecListenerToHclTerraform(struct.listener),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecListenerList",
        },
        logging: {
            value: appmeshVirtualNodeSpecLoggingToHclTerraform(struct.logging),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecLoggingList",
        },
        service_discovery: {
            value: appmeshVirtualNodeSpecServiceDiscoveryToHclTerraform(struct.serviceDiscovery),
            isBlock: true,
            type: "list",
            storageClassType: "AppmeshVirtualNodeSpecServiceDiscoveryList",
        },
    };
    // remove undefined attributes
    return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
}
exports.appmeshVirtualNodeSpecToHclTerraform = appmeshVirtualNodeSpecToHclTerraform;
class AppmeshVirtualNodeSpecOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    */
    constructor(terraformResource, terraformAttribute) {
        super(terraformResource, terraformAttribute, false, 0);
        this.isEmptyObject = false;
        // backend - computed: false, optional: true, required: false
        this._backend = new AppmeshVirtualNodeSpecBackendList(this, "backend", true);
        // backend_defaults - computed: false, optional: true, required: false
        this._backendDefaults = new AppmeshVirtualNodeSpecBackendDefaultsOutputReference(this, "backend_defaults");
        // listener - computed: false, optional: true, required: false
        this._listener = new AppmeshVirtualNodeSpecListenerOutputReference(this, "listener");
        // logging - computed: false, optional: true, required: false
        this._logging = new AppmeshVirtualNodeSpecLoggingOutputReference(this, "logging");
        // service_discovery - computed: false, optional: true, required: false
        this._serviceDiscovery = new AppmeshVirtualNodeSpecServiceDiscoveryOutputReference(this, "service_discovery");
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        if (this._backend?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.backend = this._backend?.internalValue;
        }
        if (this._backendDefaults?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.backendDefaults = this._backendDefaults?.internalValue;
        }
        if (this._listener?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.listener = this._listener?.internalValue;
        }
        if (this._logging?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.logging = this._logging?.internalValue;
        }
        if (this._serviceDiscovery?.internalValue !== undefined) {
            hasAnyValues = true;
            internalValueResult.serviceDiscovery = this._serviceDiscovery?.internalValue;
        }
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
            this._backend.internalValue = undefined;
            this._backendDefaults.internalValue = undefined;
            this._listener.internalValue = undefined;
            this._logging.internalValue = undefined;
            this._serviceDiscovery.internalValue = undefined;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
            this._backend.internalValue = value.backend;
            this._backendDefaults.internalValue = value.backendDefaults;
            this._listener.internalValue = value.listener;
            this._logging.internalValue = value.logging;
            this._serviceDiscovery.internalValue = value.serviceDiscovery;
        }
    }
    get backend() {
        return this._backend;
    }
    putBackend(value) {
        this._backend.internalValue = value;
    }
    resetBackend() {
        this._backend.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backendInput() {
        return this._backend.internalValue;
    }
    get backendDefaults() {
        return this._backendDefaults;
    }
    putBackendDefaults(value) {
        this._backendDefaults.internalValue = value;
    }
    resetBackendDefaults() {
        this._backendDefaults.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get backendDefaultsInput() {
        return this._backendDefaults.internalValue;
    }
    get listener() {
        return this._listener;
    }
    putListener(value) {
        this._listener.internalValue = value;
    }
    resetListener() {
        this._listener.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get listenerInput() {
        return this._listener.internalValue;
    }
    get logging() {
        return this._logging;
    }
    putLogging(value) {
        this._logging.internalValue = value;
    }
    resetLogging() {
        this._logging.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get loggingInput() {
        return this._logging.internalValue;
    }
    get serviceDiscovery() {
        return this._serviceDiscovery;
    }
    putServiceDiscovery(value) {
        this._serviceDiscovery.internalValue = value;
    }
    resetServiceDiscovery() {
        this._serviceDiscovery.internalValue = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get serviceDiscoveryInput() {
        return this._serviceDiscovery.internalValue;
    }
}
exports.AppmeshVirtualNodeSpecOutputReference = AppmeshVirtualNodeSpecOutputReference;
_44 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNodeSpecOutputReference[_44] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNodeSpecOutputReference", version: "0.0.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/3.76.1/docs/resources/appmesh_virtual_node aws_appmesh_virtual_node}
*/
class AppmeshVirtualNode extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a AppmeshVirtualNode resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the AppmeshVirtualNode to import
    * @param importFromId The id of the existing AppmeshVirtualNode that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/3.76.1/docs/resources/appmesh_virtual_node#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the AppmeshVirtualNode to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_appmesh_virtual_node", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/3.76.1/docs/resources/appmesh_virtual_node aws_appmesh_virtual_node} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options AppmeshVirtualNodeConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_appmesh_virtual_node',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '3.76.1',
                providerVersionConstraint: '~> 3.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // spec - computed: false, optional: false, required: true
        this._spec = new AppmeshVirtualNodeSpecOutputReference(this, "spec");
        this._id = config.id;
        this._meshName = config.meshName;
        this._meshOwner = config.meshOwner;
        this._name = config.name;
        this._tags = config.tags;
        this._tagsAll = config.tagsAll;
        this._spec.internalValue = config.spec;
    }
    // ==========
    // ATTRIBUTES
    // ==========
    // arn - computed: true, optional: false, required: false
    get arn() {
        return this.getStringAttribute('arn');
    }
    // created_date - computed: true, optional: false, required: false
    get createdDate() {
        return this.getStringAttribute('created_date');
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    // last_updated_date - computed: true, optional: false, required: false
    get lastUpdatedDate() {
        return this.getStringAttribute('last_updated_date');
    }
    get meshName() {
        return this.getStringAttribute('mesh_name');
    }
    set meshName(value) {
        this._meshName = value;
    }
    // Temporarily expose input value. Use with caution.
    get meshNameInput() {
        return this._meshName;
    }
    get meshOwner() {
        return this.getStringAttribute('mesh_owner');
    }
    set meshOwner(value) {
        this._meshOwner = value;
    }
    resetMeshOwner() {
        this._meshOwner = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get meshOwnerInput() {
        return this._meshOwner;
    }
    get name() {
        return this.getStringAttribute('name');
    }
    set name(value) {
        this._name = value;
    }
    // Temporarily expose input value. Use with caution.
    get nameInput() {
        return this._name;
    }
    // resource_owner - computed: true, optional: false, required: false
    get resourceOwner() {
        return this.getStringAttribute('resource_owner');
    }
    get tags() {
        return this.getStringMapAttribute('tags');
    }
    set tags(value) {
        this._tags = value;
    }
    resetTags() {
        this._tags = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsInput() {
        return this._tags;
    }
    get tagsAll() {
        return this.getStringMapAttribute('tags_all');
    }
    set tagsAll(value) {
        this._tagsAll = value;
    }
    resetTagsAll() {
        this._tagsAll = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get tagsAllInput() {
        return this._tagsAll;
    }
    get spec() {
        return this._spec;
    }
    putSpec(value) {
        this._spec.internalValue = value;
    }
    // Temporarily expose input value. Use with caution.
    get specInput() {
        return this._spec.internalValue;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            mesh_name: cdktf.stringToTerraform(this._meshName),
            mesh_owner: cdktf.stringToTerraform(this._meshOwner),
            name: cdktf.stringToTerraform(this._name),
            tags: cdktf.hashMapper(cdktf.stringToTerraform)(this._tags),
            tags_all: cdktf.hashMapper(cdktf.stringToTerraform)(this._tagsAll),
            spec: appmeshVirtualNodeSpecToTerraform(this._spec.internalValue),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            mesh_name: {
                value: cdktf.stringToHclTerraform(this._meshName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            mesh_owner: {
                value: cdktf.stringToHclTerraform(this._meshOwner),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            name: {
                value: cdktf.stringToHclTerraform(this._name),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            tags: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tags),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            tags_all: {
                value: cdktf.hashMapperHcl(cdktf.stringToHclTerraform)(this._tagsAll),
                isBlock: false,
                type: "map",
                storageClassType: "stringMap",
            },
            spec: {
                value: appmeshVirtualNodeSpecToHclTerraform(this._spec.internalValue),
                isBlock: true,
                type: "list",
                storageClassType: "AppmeshVirtualNodeSpecList",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.AppmeshVirtualNode = AppmeshVirtualNode;
_45 = JSII_RTTI_SYMBOL_1;
AppmeshVirtualNode[_45] = { fqn: "@cdktf/aws-cdk.appmeshVirtualNode.AppmeshVirtualNode", version: "0.0.0" };
// =================
// STATIC PROPERTIES
// =================
AppmeshVirtualNode.tfResourceType = "aws_appmesh_virtual_node";
//# sourceMappingURL=data:application/json;base64,