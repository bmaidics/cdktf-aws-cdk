"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApprunnerCustomDomainAssociation = exports.ApprunnerCustomDomainAssociationCertificateValidationRecordsList = exports.ApprunnerCustomDomainAssociationCertificateValidationRecordsOutputReference = exports.apprunnerCustomDomainAssociationCertificateValidationRecordsToHclTerraform = exports.apprunnerCustomDomainAssociationCertificateValidationRecordsToTerraform = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
function apprunnerCustomDomainAssociationCertificateValidationRecordsToTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    return {};
}
exports.apprunnerCustomDomainAssociationCertificateValidationRecordsToTerraform = apprunnerCustomDomainAssociationCertificateValidationRecordsToTerraform;
function apprunnerCustomDomainAssociationCertificateValidationRecordsToHclTerraform(struct) {
    if (!cdktf.canInspect(struct) || cdktf.Tokenization.isResolvable(struct)) {
        return struct;
    }
    if (cdktf.isComplexElement(struct)) {
        throw new Error("A complex element was used as configuration, this is not supported: https://cdk.tf/complex-object-as-configuration");
    }
    const attrs = {};
    return attrs;
}
exports.apprunnerCustomDomainAssociationCertificateValidationRecordsToHclTerraform = apprunnerCustomDomainAssociationCertificateValidationRecordsToHclTerraform;
class ApprunnerCustomDomainAssociationCertificateValidationRecordsOutputReference extends cdktf.ComplexObject {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param complexObjectIndex the index of this item in the list
    * @param complexObjectIsFromSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, complexObjectIndex, complexObjectIsFromSet) {
        super(terraformResource, terraformAttribute, complexObjectIsFromSet, complexObjectIndex);
        this.isEmptyObject = false;
    }
    get internalValue() {
        let hasAnyValues = this.isEmptyObject;
        const internalValueResult = {};
        return hasAnyValues ? internalValueResult : undefined;
    }
    set internalValue(value) {
        if (value === undefined) {
            this.isEmptyObject = false;
        }
        else {
            this.isEmptyObject = Object.keys(value).length === 0;
        }
    }
    // name - computed: true, optional: false, required: false
    get name() {
        return this.getStringAttribute('name');
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // type - computed: true, optional: false, required: false
    get type() {
        return this.getStringAttribute('type');
    }
    // value - computed: true, optional: false, required: false
    get value() {
        return this.getStringAttribute('value');
    }
}
exports.ApprunnerCustomDomainAssociationCertificateValidationRecordsOutputReference = ApprunnerCustomDomainAssociationCertificateValidationRecordsOutputReference;
_a = JSII_RTTI_SYMBOL_1;
ApprunnerCustomDomainAssociationCertificateValidationRecordsOutputReference[_a] = { fqn: "@cdktf/aws-cdk.apprunnerCustomDomainAssociation.ApprunnerCustomDomainAssociationCertificateValidationRecordsOutputReference", version: "0.0.0" };
class ApprunnerCustomDomainAssociationCertificateValidationRecordsList extends cdktf.ComplexList {
    /**
    * @param terraformResource The parent resource
    * @param terraformAttribute The attribute on the parent resource this class is referencing
    * @param wrapsSet whether the list is wrapping a set (will add tolist() to be able to access an item via an index)
    */
    constructor(terraformResource, terraformAttribute, wrapsSet) {
        super(terraformResource, terraformAttribute, wrapsSet);
        this.terraformResource = terraformResource;
        this.terraformAttribute = terraformAttribute;
        this.wrapsSet = wrapsSet;
    }
    /**
    * @param index the index of the item to return
    */
    get(index) {
        return new ApprunnerCustomDomainAssociationCertificateValidationRecordsOutputReference(this.terraformResource, this.terraformAttribute, index, this.wrapsSet);
    }
}
exports.ApprunnerCustomDomainAssociationCertificateValidationRecordsList = ApprunnerCustomDomainAssociationCertificateValidationRecordsList;
_b = JSII_RTTI_SYMBOL_1;
ApprunnerCustomDomainAssociationCertificateValidationRecordsList[_b] = { fqn: "@cdktf/aws-cdk.apprunnerCustomDomainAssociation.ApprunnerCustomDomainAssociationCertificateValidationRecordsList", version: "0.0.0" };
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/3.76.1/docs/resources/apprunner_custom_domain_association aws_apprunner_custom_domain_association}
*/
class ApprunnerCustomDomainAssociation extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a ApprunnerCustomDomainAssociation resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the ApprunnerCustomDomainAssociation to import
    * @param importFromId The id of the existing ApprunnerCustomDomainAssociation that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/3.76.1/docs/resources/apprunner_custom_domain_association#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the ApprunnerCustomDomainAssociation to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_apprunner_custom_domain_association", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/3.76.1/docs/resources/apprunner_custom_domain_association aws_apprunner_custom_domain_association} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options ApprunnerCustomDomainAssociationConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_apprunner_custom_domain_association',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '3.76.1',
                providerVersionConstraint: '~> 3.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        // ==========
        // ATTRIBUTES
        // ==========
        // certificate_validation_records - computed: true, optional: false, required: false
        this._certificateValidationRecords = new ApprunnerCustomDomainAssociationCertificateValidationRecordsList(this, "certificate_validation_records", true);
        this._domainName = config.domainName;
        this._enableWwwSubdomain = config.enableWwwSubdomain;
        this._id = config.id;
        this._serviceArn = config.serviceArn;
    }
    get certificateValidationRecords() {
        return this._certificateValidationRecords;
    }
    // dns_target - computed: true, optional: false, required: false
    get dnsTarget() {
        return this.getStringAttribute('dns_target');
    }
    get domainName() {
        return this.getStringAttribute('domain_name');
    }
    set domainName(value) {
        this._domainName = value;
    }
    // Temporarily expose input value. Use with caution.
    get domainNameInput() {
        return this._domainName;
    }
    get enableWwwSubdomain() {
        return this.getBooleanAttribute('enable_www_subdomain');
    }
    set enableWwwSubdomain(value) {
        this._enableWwwSubdomain = value;
    }
    resetEnableWwwSubdomain() {
        this._enableWwwSubdomain = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get enableWwwSubdomainInput() {
        return this._enableWwwSubdomain;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get serviceArn() {
        return this.getStringAttribute('service_arn');
    }
    set serviceArn(value) {
        this._serviceArn = value;
    }
    // Temporarily expose input value. Use with caution.
    get serviceArnInput() {
        return this._serviceArn;
    }
    // status - computed: true, optional: false, required: false
    get status() {
        return this.getStringAttribute('status');
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            domain_name: cdktf.stringToTerraform(this._domainName),
            enable_www_subdomain: cdktf.booleanToTerraform(this._enableWwwSubdomain),
            id: cdktf.stringToTerraform(this._id),
            service_arn: cdktf.stringToTerraform(this._serviceArn),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            domain_name: {
                value: cdktf.stringToHclTerraform(this._domainName),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            enable_www_subdomain: {
                value: cdktf.booleanToHclTerraform(this._enableWwwSubdomain),
                isBlock: false,
                type: "simple",
                storageClassType: "boolean",
            },
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            service_arn: {
                value: cdktf.stringToHclTerraform(this._serviceArn),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.ApprunnerCustomDomainAssociation = ApprunnerCustomDomainAssociation;
_c = JSII_RTTI_SYMBOL_1;
ApprunnerCustomDomainAssociation[_c] = { fqn: "@cdktf/aws-cdk.apprunnerCustomDomainAssociation.ApprunnerCustomDomainAssociation", version: "0.0.0" };
// =================
// STATIC PROPERTIES
// =================
ApprunnerCustomDomainAssociation.tfResourceType = "aws_apprunner_custom_domain_association";
//# sourceMappingURL=data:application/json;base64,