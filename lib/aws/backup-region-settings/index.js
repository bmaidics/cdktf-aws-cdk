"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupRegionSettings = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdktf = require("cdktf");
/**
* Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/3.76.1/docs/resources/backup_region_settings aws_backup_region_settings}
*/
class BackupRegionSettings extends cdktf.TerraformResource {
    // ==============
    // STATIC Methods
    // ==============
    /**
    * Generates CDKTF code for importing a BackupRegionSettings resource upon running "cdktf plan <stack-name>"
    * @param scope The scope in which to define this construct
    * @param importToId The construct id used in the generated config for the BackupRegionSettings to import
    * @param importFromId The id of the existing BackupRegionSettings that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/3.76.1/docs/resources/backup_region_settings#import import section} in the documentation of this resource for the id to use
    * @param provider? Optional instance of the provider where the BackupRegionSettings to import is found
    */
    static generateConfigForImport(scope, importToId, importFromId, provider) {
        return new cdktf.ImportableResource(scope, importToId, { terraformResourceType: "aws_backup_region_settings", importId: importFromId, provider });
    }
    // ===========
    // INITIALIZER
    // ===========
    /**
    * Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/3.76.1/docs/resources/backup_region_settings aws_backup_region_settings} Resource
    *
    * @param scope The scope in which to define this construct
    * @param id The scoped construct ID. Must be unique amongst siblings in the same scope
    * @param options BackupRegionSettingsConfig
    */
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: 'aws_backup_region_settings',
            terraformGeneratorMetadata: {
                providerName: 'aws',
                providerVersion: '3.76.1',
                providerVersionConstraint: '~> 3.0'
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle,
            provisioners: config.provisioners,
            connection: config.connection,
            forEach: config.forEach
        });
        this._id = config.id;
        this._resourceTypeManagementPreference = config.resourceTypeManagementPreference;
        this._resourceTypeOptInPreference = config.resourceTypeOptInPreference;
    }
    get id() {
        return this.getStringAttribute('id');
    }
    set id(value) {
        this._id = value;
    }
    resetId() {
        this._id = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get idInput() {
        return this._id;
    }
    get resourceTypeManagementPreference() {
        return this.getBooleanMapAttribute('resource_type_management_preference');
    }
    set resourceTypeManagementPreference(value) {
        this._resourceTypeManagementPreference = value;
    }
    resetResourceTypeManagementPreference() {
        this._resourceTypeManagementPreference = undefined;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeManagementPreferenceInput() {
        return this._resourceTypeManagementPreference;
    }
    get resourceTypeOptInPreference() {
        return this.getBooleanMapAttribute('resource_type_opt_in_preference');
    }
    set resourceTypeOptInPreference(value) {
        this._resourceTypeOptInPreference = value;
    }
    // Temporarily expose input value. Use with caution.
    get resourceTypeOptInPreferenceInput() {
        return this._resourceTypeOptInPreference;
    }
    // =========
    // SYNTHESIS
    // =========
    synthesizeAttributes() {
        return {
            id: cdktf.stringToTerraform(this._id),
            resource_type_management_preference: cdktf.hashMapper(cdktf.booleanToTerraform)(this._resourceTypeManagementPreference),
            resource_type_opt_in_preference: cdktf.hashMapper(cdktf.booleanToTerraform)(this._resourceTypeOptInPreference),
        };
    }
    synthesizeHclAttributes() {
        const attrs = {
            id: {
                value: cdktf.stringToHclTerraform(this._id),
                isBlock: false,
                type: "simple",
                storageClassType: "string",
            },
            resource_type_management_preference: {
                value: cdktf.hashMapperHcl(cdktf.booleanToHclTerraform)(this._resourceTypeManagementPreference),
                isBlock: false,
                type: "map",
                storageClassType: "booleanMap",
            },
            resource_type_opt_in_preference: {
                value: cdktf.hashMapperHcl(cdktf.booleanToHclTerraform)(this._resourceTypeOptInPreference),
                isBlock: false,
                type: "map",
                storageClassType: "booleanMap",
            },
        };
        // remove undefined attributes
        return Object.fromEntries(Object.entries(attrs).filter(([_, value]) => value !== undefined && value.value !== undefined));
    }
}
exports.BackupRegionSettings = BackupRegionSettings;
_a = JSII_RTTI_SYMBOL_1;
BackupRegionSettings[_a] = { fqn: "@cdktf/aws-cdk.backupRegionSettings.BackupRegionSettings", version: "0.0.0" };
// =================
// STATIC PROPERTIES
// =================
BackupRegionSettings.tfResourceType = "aws_backup_region_settings";
//# sourceMappingURL=data:application/json;base64,