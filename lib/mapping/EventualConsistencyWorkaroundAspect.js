"use strict";
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventualConsistencyWorkaroundAspect = void 0;
const cdktf_1 = require("cdktf");
const _tokens_1 = require("cdktf/lib/_tokens");
const resolve_1 = require("cdktf/lib/tokens/private/resolve");
const cloudcontrolapi_resource_1 = require("../aws/cloudcontrolapi-resource");
const provider_1 = require("../time/provider");
const sleep_1 = require("../time/sleep");
/**
 * This Aspect serves as a workaround for eventually consistent resources (e.g. IAM resources)
 * It has to be added to the root (i.e. the Terraform Stack) so that it is invoked
 * on all resources that might reference the `eventualConsistentTarget` which is passed when
 * instantiating an `EventualConsistencyWorkaroundAspect`.
 *
 * How does it work?
 * - The `visit` function will be invoked for every resource in e.g. the TerraformStack
 * - Whenever a visited resource contains a reference to a property of the `eventualConsistentTarget`
 *   a `time_sleep` resource will be added as a dependency for that resource
 * - The `time_sleep` resource itself depends on the `eventualConsistentTarget` and by default waits
 *   20 seconds after the `eventualConsistentTarget` was created until it marks itself as done
 * - The dependend resources will then have their dependency on `time_sleep` fullfilled and will start
 *   to deploy
 */
class EventualConsistencyWorkaroundAspect {
    // The CDK for Terraform currently requires providers to be configured even if they don't have
    // any config. As we cannot know whether the stack already contains a time provider, we create
    // an aliased one for usage within this Aspect
    static getTimeProvider(stack) {
        if (!EventualConsistencyWorkaroundAspect.stackTimeProviders.has(stack.node.id)) {
            EventualConsistencyWorkaroundAspect.stackTimeProviders.set(stack.node.id, new provider_1.TimeProvider(stack, "eventual_consistency_workaround_aspect", {
                alias: `awsadapter_eventual_consistency_workaround_aspect_${stack.node.id}`,
            }));
        }
        return EventualConsistencyWorkaroundAspect.stackTimeProviders.get(stack.node.id);
    }
    constructor(eventualConsistentTarget, options = {
        createDurationSeconds: 20,
        destroyDurationSeconds: 0,
    }) {
        this.eventualConsistentTarget = eventualConsistentTarget;
        this.options = options;
    }
    visit(node) {
        if (node instanceof cdktf_1.TerraformResource &&
            node instanceof cloudcontrolapi_resource_1.CloudcontrolapiResource &&
            dependsOn(node, this.eventualConsistentTarget)) {
            if (!node.dependsOn) {
                node.dependsOn = [];
            }
            node.dependsOn.push((0, cdktf_1.dependable)(this.getSleepResource()));
        }
    }
    /**
     * makes sure we reuse the same sleep resource for the same eventual consistent target
     * (aka for an instance of this class)
     */
    getSleepResource() {
        if (!this.sleepResource) {
            this.sleepResource = new sleep_1.Sleep(this.eventualConsistentTarget, `sleep_${this.eventualConsistentTarget.node.id}`, {
                createDuration: `${this.options.createDurationSeconds}s`,
                destroyDuration: `${this.options.destroyDurationSeconds}s`,
                dependsOn: [this.eventualConsistentTarget],
                provider: EventualConsistencyWorkaroundAspect.getTimeProvider(cdktf_1.TerraformStack.of(this.eventualConsistentTarget)),
            });
        }
        return this.sleepResource;
    }
}
exports.EventualConsistencyWorkaroundAspect = EventualConsistencyWorkaroundAspect;
EventualConsistencyWorkaroundAspect.stackTimeProviders = new Map();
/**
 * returns true if source contains a property that depends on target
 */
function dependsOn(source, target) {
    const tokens = (0, resolve_1.findTokens)(cdktf_1.TerraformStack.of(source), () => source.toTerraform());
    // Checks if there's at least one token that resolves to an Terraform reference
    // which references the target
    // e.g. resolved could be "${aws_iam_role.typescriptcronlambda_adapter_lambdaServiceRole494E4CA6_233C76C0.arn}"
    // which includes the target "aws_iam_role.typescriptcronlambda_adapter_lambdaServiceRole494E4CA6_233C76C0"
    return tokens.some((token) => {
        const resolved = (0, _tokens_1.resolve)(cdktf_1.TerraformStack.of(source), token);
        const resolvedFqn = (0, _tokens_1.resolve)(cdktf_1.TerraformStack.of(source), target.fqn); // still wrapped in "${}"
        const resolvedFqnRaw = typeof resolvedFqn === "string"
            ? resolvedFqn.replace(/^\$\{/, "").replace(/\}$/, "")
            : resolvedFqn;
        return typeof resolved === "string" && resolved.includes(resolvedFqnRaw);
    });
}
//# sourceMappingURL=data:application/json;base64,