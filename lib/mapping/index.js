"use strict";
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerMapping = exports.findMapping = void 0;
// originally from https://github.com/skorfmann/cfn2tf/blob/6ff9f366462b270229b7415f68c13a7bea28c144/mapping.ts
const cdktf_1 = require("cdktf");
const cloudcontrolapi_resource_1 = require("../aws/cloudcontrolapi-resource");
const supportedTypes_1 = require("../awscc/supportedTypes");
const mapping = {};
function createGenericCCApiMapping(resourceType) {
    if (!supportedTypes_1.default.has(resourceType)) {
        throw new Error(`Unsupported resource Type ${resourceType}. There is no custom mapping registered for ${resourceType} and the AWS CloudControl API does not seem to support it yet. If you think this is an error or you need support for this resource, file an issue at: ${encodeURI(`https://github.com/hashicorp/cdktf-aws-cdk/issues/new?labels=cloudcontrol%2Cenhancement%2Chelp+wanted&template=cloudcontrol-mapping.yml&title=Unsupported Resource Type \`${resourceType}\``)} and mention the AWS CDK constructs you want to use`);
    }
    return {
        resource: (scope, id, props) => {
            // clone object as we have to delete props from the original one
            const desiredState = cdktf_1.Fn.jsonencode({ ...props });
            Object.keys(props).forEach((key) => delete props[key]);
            return new cloudcontrolapi_resource_1.CloudcontrolapiResource(scope, id, {
                desiredState,
                typeName: resourceType,
            });
        },
        attributes: (attribute, resource) => {
            return (0, cdktf_1.propertyAccess)(cdktf_1.Fn.jsondecode(resource.properties), [attribute]);
        },
    };
}
function findMapping(resourceType) {
    if (mapping[resourceType]) {
        return mapping[resourceType];
    }
    // no mapping found, trying to use generic aws_cloudcontrolapi_resource
    return createGenericCCApiMapping(resourceType); // TODO: fix type to allow this
}
exports.findMapping = findMapping;
function registerMapping(resourceType, map) {
    mapping[resourceType] = map;
}
exports.registerMapping = registerMapping;
// load manual mappings for resources not yet supported by the awscc api
require("./aws");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFwcGluZy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFFSCwrR0FBK0c7QUFDL0csaUNBQTJFO0FBRTNFLDhFQUEwRTtBQUMxRSw0REFBa0U7QUF3QmxFLE1BQU0sT0FBTyxHQUE0QixFQUFFLENBQUM7QUFFNUMsU0FBUyx5QkFBeUIsQ0FDaEMsWUFBb0I7SUFFcEIsSUFBSSxDQUFDLHdCQUEyQixDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO1FBQ25ELE1BQU0sSUFBSSxLQUFLLENBQ2IsNkJBQTZCLFlBQVksK0NBQStDLFlBQVkseUpBQXlKLFNBQVMsQ0FDcFEsNktBQTZLLFlBQVksSUFBSSxDQUM5TCxxREFBcUQsQ0FDdkQsQ0FBQztJQUNKLENBQUM7SUFFRCxPQUFPO1FBQ0wsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUM3QixnRUFBZ0U7WUFDaEUsTUFBTSxZQUFZLEdBQUcsVUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUNqRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUV2RCxPQUFPLElBQUksa0RBQXVCLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtnQkFDNUMsWUFBWTtnQkFDWixRQUFRLEVBQUUsWUFBWTthQUN2QixDQUFDLENBQUM7UUFDTCxDQUFDO1FBQ0QsVUFBVSxFQUFFLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQ2xDLE9BQU8sSUFBQSxzQkFBYyxFQUFDLFVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUN6RSxDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFnQixXQUFXLENBQUMsWUFBb0I7SUFDOUMsSUFBSSxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQztRQUMxQixPQUFPLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsdUVBQXVFO0lBQ3ZFLE9BQU8seUJBQXlCLENBQUMsWUFBWSxDQUFRLENBQUMsQ0FBQywrQkFBK0I7QUFDeEYsQ0FBQztBQVBELGtDQU9DO0FBRUQsU0FBZ0IsZUFBZSxDQUM3QixZQUFvQixFQUNwQixHQUFlO0lBRWYsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUM5QixDQUFDO0FBTEQsMENBS0M7QUFFRCx3RUFBd0U7QUFDeEUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEhhc2hpQ29ycCwgSW5jLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1QTC0yLjBcbiAqL1xuXG4vLyBvcmlnaW5hbGx5IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Nrb3JmbWFubi9jZm4ydGYvYmxvYi82ZmY5ZjM2NjQ2MmIyNzAyMjliNzQxNWY2OGMxM2E3YmVhMjhjMTQ0L21hcHBpbmcudHNcbmltcG9ydCB7IEZuLCBJUmVzb2x2YWJsZSwgcHJvcGVydHlBY2Nlc3MsIFRlcnJhZm9ybVJlc291cmNlIH0gZnJvbSBcImNka3RmXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgQ2xvdWRjb250cm9sYXBpUmVzb3VyY2UgfSBmcm9tIFwiLi4vYXdzL2Nsb3VkY29udHJvbGFwaS1yZXNvdXJjZVwiO1xuaW1wb3J0IHN1cHBvcnRlZEF3c2NjUmVzb3VyY2VUeXBlcyBmcm9tIFwiLi4vYXdzY2Mvc3VwcG9ydGVkVHlwZXNcIjtcblxuZXhwb3J0IHR5cGUgUmVzb3VyY2VNYXBwZXI8VCBleHRlbmRzIFRlcnJhZm9ybVJlc291cmNlPiA9IChcbiAgc2NvcGU6IENvbnN0cnVjdCxcbiAgaWQ6IHN0cmluZyxcbiAgcHJvcHM6IGFueSxcbikgPT4gVCB8IG51bGw7XG50eXBlIEF0dHJpYnV0ZU1hcHBlcjxUIGV4dGVuZHMgVGVycmFmb3JtUmVzb3VyY2U+ID0gKFxuICByZXNvdXJjZTogVCxcbikgPT4gc3RyaW5nIHwgSVJlc29sdmFibGU7XG50eXBlIEFueUF0dHJpYnV0ZU1hcHBlcjxUIGV4dGVuZHMgVGVycmFmb3JtUmVzb3VyY2U+ID0gKFxuICBhdHRyaWJ1dGU6IHN0cmluZyxcbiAgcmVzb3VyY2U6IFQsXG4pID0+IHN0cmluZyB8IElSZXNvbHZhYmxlO1xuXG5leHBvcnQgdHlwZSBNYXBwaW5nPFQgZXh0ZW5kcyBUZXJyYWZvcm1SZXNvdXJjZT4gPSB7XG4gIHJlc291cmNlOiBSZXNvdXJjZU1hcHBlcjxUPjtcbiAgYXR0cmlidXRlczpcbiAgICB8IHtcbiAgICAgICAgW25hbWU6IHN0cmluZ106IEF0dHJpYnV0ZU1hcHBlcjxUPjtcbiAgICAgIH1cbiAgICB8IEFueUF0dHJpYnV0ZU1hcHBlcjxUPjtcbn07XG5cbmNvbnN0IG1hcHBpbmc6IHsgW3R5cGU6IHN0cmluZ106IGFueSB9ID0ge307XG5cbmZ1bmN0aW9uIGNyZWF0ZUdlbmVyaWNDQ0FwaU1hcHBpbmcoXG4gIHJlc291cmNlVHlwZTogc3RyaW5nLFxuKTogTWFwcGluZzxDbG91ZGNvbnRyb2xhcGlSZXNvdXJjZT4ge1xuICBpZiAoIXN1cHBvcnRlZEF3c2NjUmVzb3VyY2VUeXBlcy5oYXMocmVzb3VyY2VUeXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBVbnN1cHBvcnRlZCByZXNvdXJjZSBUeXBlICR7cmVzb3VyY2VUeXBlfS4gVGhlcmUgaXMgbm8gY3VzdG9tIG1hcHBpbmcgcmVnaXN0ZXJlZCBmb3IgJHtyZXNvdXJjZVR5cGV9IGFuZCB0aGUgQVdTIENsb3VkQ29udHJvbCBBUEkgZG9lcyBub3Qgc2VlbSB0byBzdXBwb3J0IGl0IHlldC4gSWYgeW91IHRoaW5rIHRoaXMgaXMgYW4gZXJyb3Igb3IgeW91IG5lZWQgc3VwcG9ydCBmb3IgdGhpcyByZXNvdXJjZSwgZmlsZSBhbiBpc3N1ZSBhdDogJHtlbmNvZGVVUkkoXG4gICAgICAgIGBodHRwczovL2dpdGh1Yi5jb20vaGFzaGljb3JwL2Nka3RmLWF3cy1jZGsvaXNzdWVzL25ldz9sYWJlbHM9Y2xvdWRjb250cm9sJTJDZW5oYW5jZW1lbnQlMkNoZWxwK3dhbnRlZCZ0ZW1wbGF0ZT1jbG91ZGNvbnRyb2wtbWFwcGluZy55bWwmdGl0bGU9VW5zdXBwb3J0ZWQgUmVzb3VyY2UgVHlwZSBcXGAke3Jlc291cmNlVHlwZX1cXGBgLFxuICAgICAgKX0gYW5kIG1lbnRpb24gdGhlIEFXUyBDREsgY29uc3RydWN0cyB5b3Ugd2FudCB0byB1c2VgLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlc291cmNlOiAoc2NvcGUsIGlkLCBwcm9wcykgPT4ge1xuICAgICAgLy8gY2xvbmUgb2JqZWN0IGFzIHdlIGhhdmUgdG8gZGVsZXRlIHByb3BzIGZyb20gdGhlIG9yaWdpbmFsIG9uZVxuICAgICAgY29uc3QgZGVzaXJlZFN0YXRlID0gRm4uanNvbmVuY29kZSh7IC4uLnByb3BzIH0pO1xuICAgICAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goKGtleSkgPT4gZGVsZXRlIHByb3BzW2tleV0pO1xuXG4gICAgICByZXR1cm4gbmV3IENsb3VkY29udHJvbGFwaVJlc291cmNlKHNjb3BlLCBpZCwge1xuICAgICAgICBkZXNpcmVkU3RhdGUsXG4gICAgICAgIHR5cGVOYW1lOiByZXNvdXJjZVR5cGUsXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGF0dHJpYnV0ZXM6IChhdHRyaWJ1dGUsIHJlc291cmNlKSA9PiB7XG4gICAgICByZXR1cm4gcHJvcGVydHlBY2Nlc3MoRm4uanNvbmRlY29kZShyZXNvdXJjZS5wcm9wZXJ0aWVzKSwgW2F0dHJpYnV0ZV0pO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kTWFwcGluZyhyZXNvdXJjZVR5cGU6IHN0cmluZyk6IE1hcHBpbmc8VGVycmFmb3JtUmVzb3VyY2U+IHtcbiAgaWYgKG1hcHBpbmdbcmVzb3VyY2VUeXBlXSkge1xuICAgIHJldHVybiBtYXBwaW5nW3Jlc291cmNlVHlwZV07XG4gIH1cblxuICAvLyBubyBtYXBwaW5nIGZvdW5kLCB0cnlpbmcgdG8gdXNlIGdlbmVyaWMgYXdzX2Nsb3VkY29udHJvbGFwaV9yZXNvdXJjZVxuICByZXR1cm4gY3JlYXRlR2VuZXJpY0NDQXBpTWFwcGluZyhyZXNvdXJjZVR5cGUpIGFzIGFueTsgLy8gVE9ETzogZml4IHR5cGUgdG8gYWxsb3cgdGhpc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJNYXBwaW5nPFQgZXh0ZW5kcyBUZXJyYWZvcm1SZXNvdXJjZT4oXG4gIHJlc291cmNlVHlwZTogc3RyaW5nLFxuICBtYXA6IE1hcHBpbmc8VD4sXG4pIHtcbiAgbWFwcGluZ1tyZXNvdXJjZVR5cGVdID0gbWFwO1xufVxuXG4vLyBsb2FkIG1hbnVhbCBtYXBwaW5ncyBmb3IgcmVzb3VyY2VzIG5vdCB5ZXQgc3VwcG9ydGVkIGJ5IHRoZSBhd3NjYyBhcGlcbnJlcXVpcmUoXCIuL2F3c1wiKTtcbiJdfQ==