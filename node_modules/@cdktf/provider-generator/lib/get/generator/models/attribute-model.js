"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributeModel = exports.escapeAttributeName = void 0;
function escapeAttributeName(name) {
    // `self` and `build` doesn't work in as property name in Python
    if (name === "self" || name === "build")
        return `${name}Attribute`;
    // jsii can't handle `getFoo` properties, since it's incompatible with Java
    if (name.match(/^get[A-Za-z]+/))
        return name.replace("get", "fetch");
    // `equals` is a prohibited name in jsii
    if (name === "equals")
        return "equalTo";
    // `node` is already used by the Constructs base class
    if (name === "node")
        return "nodeAttribute";
    // `System` shadows built-in types in CSharp (see #1420)
    if (name === "system")
        return "systemAttribute";
    // `tfResourceType` is already used by resources to distinguish between different resource types
    if (name === "tfResourceType")
        return `${name}Attribute`;
    // `importFrom` has potential for common name collision with providers
    if (name === "importFrom")
        return `${name}Attribute`;
    // `move` could have common name collision with providers
    if (name === "moveTo")
        return `${name}Attribute`;
    // `software` attribute can be confused with the JSII Java runtime package (see #3115)
    if (name === "software")
        return `${name}Attribute`;
    return name;
}
exports.escapeAttributeName = escapeAttributeName;
class AttributeModel {
    constructor(options) {
        this.storageName = options.storageName;
        this._name = options.name;
        this.type = options.type;
        this.optional = options.optional;
        this.computed = options.computed;
        this.terraformName = options.terraformName;
        this.terraformFullName = options.terraformFullName;
        this._description = options.description;
        this.provider = options.provider;
        this.required = options.required;
    }
    get typeDefinition() {
        const optional = this.optional ? "?" : "";
        return `${this.name}${optional}: ${this.type.inputTypeDefinition}`;
    }
    get isAssignable() {
        return this.required || this.optional;
    }
    get isOptional() {
        return this.optional;
    }
    get isRequired() {
        return this.required;
    }
    get isProvider() {
        return this.provider;
    }
    get getterType() {
        let getterType = { _type: "plain" };
        if (this.isProvider) {
            return getterType;
        }
        if (this.type.hasReferenceClass) {
            getterType = {
                _type: "stored_class",
            };
        }
        else if (this.computed &&
            !this.isAssignable &&
            (!this.type.isTokenizable || this.type.typeModelType === "map")) {
            getterType = {
                _type: "stored_class",
            };
        }
        return getterType;
    }
    get isStored() {
        return this.isAssignable;
    }
    get setterType() {
        if (!this.isStored) {
            return { _type: "none" };
        }
        if (this.getterType._type === "stored_class") {
            return {
                _type: "stored_class",
                type: this.type.inputTypeDefinition,
            };
        }
        return {
            _type: "set",
            type: `${this.type.inputTypeDefinition}${this.isProvider ? " | undefined" : ""}`,
        };
    }
    get name() {
        return AttributeModel.escapeName(this._name);
    }
    static escapeName(name) {
        return escapeAttributeName(name);
    }
    get description() {
        var _a;
        return (_a = this._description) === null || _a === void 0 ? void 0 : _a.replace(/'''/gi, "```");
    }
    getReferencedTypes(isConfigStruct) {
        const attTypeStruct = this.type.struct;
        if (!attTypeStruct) {
            return undefined;
        }
        const types = [];
        if (this.isAssignable) {
            types.push(attTypeStruct.name);
            types.push(attTypeStruct.mapperName);
            types.push(attTypeStruct.hclMapperName);
        }
        if (!attTypeStruct.isSingleItem &&
            (attTypeStruct.nestingMode === "list" ||
                attTypeStruct.nestingMode === "set")) {
            types.push(attTypeStruct.listName);
        }
        else if (attTypeStruct.nestingMode === "map") {
            types.push(attTypeStruct.mapName);
        }
        else if (attTypeStruct.nestingMode === "maplist") {
            types.push(attTypeStruct.mapListName);
        }
        else if (attTypeStruct.nestingMode === "mapset") {
            types.push(attTypeStruct.mapListName);
        }
        else if (attTypeStruct.nestingMode === "listmap") {
            types.push(attTypeStruct.listMapName);
        }
        else if (attTypeStruct.nestingMode === "setmap") {
            types.push(attTypeStruct.listMapName);
        }
        else if (attTypeStruct.nestingMode === "listlist" ||
            attTypeStruct.nestingMode === "listset" ||
            attTypeStruct.nestingMode === "setlist" ||
            attTypeStruct.nestingMode == "setset") {
            types.push(attTypeStruct.listListName);
        }
        else if (!isConfigStruct) {
            types.push(attTypeStruct.outputReferenceName);
        }
        // other types of nested collections aren't supported
        return types;
    }
}
exports.AttributeModel = AttributeModel;
//# sourceMappingURL=data:application/json;base64,