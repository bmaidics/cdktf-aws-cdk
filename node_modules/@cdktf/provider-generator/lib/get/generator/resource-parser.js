"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceParser = exports.sanitizeClassOrNamespaceName = void 0;
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const codemaker_1 = require("codemaker");
const commons_1 = require("@cdktf/commons");
const provider_schema_1 = require("@cdktf/provider-schema");
const models_1 = require("./models");
const loop_detection_1 = require("./loop-detection");
const skipped_attributes_1 = require("./skipped-attributes");
const commons_2 = require("@cdktf/commons");
// Can't be used in expressions like "export * as <keyword> from ... "
// filtered from all keywords from: https://github.com/microsoft/TypeScript/blob/503604c884bd0557c851b11b699ef98cdb65b93b/src/compiler/types.ts#L114-L197
const RESERVED_KEYWORDS_FOR_NAMESPACES = [
    "implements",
    "interface",
    "let",
    "package",
    "private",
    "protected",
    "public",
    "static",
    "yield",
    "await",
];
const COLLIDING_NAMESPACE_NAMES = [
    // e.g. hashicorp/consul – collides with the LICENSE file on case-insensitive filesystems in the Go package (#2627)
    "license",
];
const isReservedClassOrNamespaceName = (className) => {
    return [
        "string",
        "object",
        "function",
        ...RESERVED_KEYWORDS_FOR_NAMESPACES,
        ...COLLIDING_NAMESPACE_NAMES,
    ].includes(className.toLowerCase());
};
const isReservedStructClassName = (className) => {
    return className.toLowerCase().endsWith("list");
};
const getFileName = (provider, baseName) => {
    if (baseName === "index") {
        return "index-resource/index.ts";
    }
    if (baseName === `${provider}_provider`) {
        return "provider/index.ts";
    }
    return `${(0, codemaker_1.toSnakeCase)(baseName).replace(/_/g, "-")}/index.ts`;
};
function sanitizeClassOrNamespaceName(baseName, isProvider = false) {
    const resourceIsNamedProvider = !isProvider && baseName === "provider";
    if (isReservedClassOrNamespaceName(baseName) || resourceIsNamedProvider) {
        return `${baseName}_resource`;
    }
    else {
        return baseName;
    }
}
exports.sanitizeClassOrNamespaceName = sanitizeClassOrNamespaceName;
/**
 * Remove attributes that may conflict after being snake cased
 * Example: oci_core_ipsec_connection_tunnel_management (hashicorp/oci@=5.21.0) has bgp_ipv6_state and bgp_ipv6state
 * (which both result in "bgpIpv6State" when camel-cased, with the second one being deprecated: true)
 * As we currently don't handle any deprecated ones at all, we'll just delete one of the two attributes for now
 * @param attributes
 */
function deduplicateAttributesWithSameName(attributes) {
    return attributes.filter((attr, idx) => {
        const hasOtherWithSameName = attributes
            .slice(idx + 1) // only search after the index of the current attribute to avoid deleting both
            .some((other) => other.name === attr.name && other !== attr);
        return !hasOtherWithSameName;
    });
}
class Parser {
    constructor(classNames) {
        this.classNames = classNames;
        this.structs = new Array();
    }
    uniqueClassName(className) {
        if (this.classNames.includes(className)) {
            className = `${className}A`;
        }
        this.classNames.push(className);
        return className;
    }
    resourceFrom(fqpn, type, schema, terraformSchemaType, constraint) {
        let baseName = type;
        const providerNameFromConstraint = constraint
            ? constraint.name
            : undefined;
        const providerNameFromFQPN = (0, provider_schema_1.parseFQPN)(fqpn).name;
        if (baseName.startsWith(`${providerNameFromFQPN}_`)) {
            baseName = baseName.substr(providerNameFromFQPN.length + 1);
        }
        const providerName = providerNameFromConstraint
            ? providerNameFromConstraint
            : providerNameFromFQPN;
        const isProvider = terraformSchemaType === "provider";
        if (isProvider) {
            baseName = `${providerName}_${baseName}`;
            if (!("attributes" in schema.block)) {
                schema.block = {
                    attributes: {},
                    block_types: schema.block.block_types || {},
                };
            }
            // somehow missing from provider schema
            schema.block.attributes["alias"] = {
                type: "string",
                description: "Alias name",
                optional: true,
                computed: false,
            };
        }
        baseName = sanitizeClassOrNamespaceName(baseName, isProvider);
        const className = this.uniqueClassName((0, codemaker_1.toPascalCase)(baseName));
        // avoid naming collision - see https://github.com/hashicorp/terraform-cdk/issues/299
        const configStructName = this.uniqueClassName(`${className}Config`);
        const fileName = getFileName(providerName, baseName);
        const filePath = `providers/${(0, codemaker_1.toSnakeCase)(providerName)}/${fileName}`;
        let attributes = this.renderAttributesForBlock(new models_1.Scope({
            name: baseName,
            isProvider,
            parent: isProvider
                ? undefined
                : new models_1.Scope({ name: providerName, isProvider: true }),
        }), schema.block);
        function getStructAttribute(attributes, path) {
            const [first, ...rest] = path.split(".");
            const attribute = attributes.find((att) => {
                return att.terraformName === first;
            });
            if (!attribute)
                throw new Error(`Expected to find recursive attribute at path: ${path}`);
            if (!attribute.type.struct)
                throw new Error(`Expected to find struct type attribute at path: ${path} but got ${attribute.type.storedClassType}`);
            if (rest.length === 0)
                return attribute;
            return getStructAttribute(attribute.type.struct.attributes, rest.join("."));
        }
        // Introduce recursion for some attributes
        const recursiveAttributePaths = (0, loop_detection_1.detectAttributeLoops)(attributes);
        Object.entries(recursiveAttributePaths).forEach(([attributePath, structPath]) => {
            // TODO: build this to be a bit more defensive (e.g. remove ! operator)
            const recursionTargetStructAttribute = getStructAttribute(attributes, structPath);
            const parts = attributePath.split(".");
            const attributeName = parts.pop();
            const parentAttribute = getStructAttribute(attributes, parts.join("."));
            const indexToReplace = parentAttribute.type.struct.attributes.findIndex((att) => att.terraformName === attributeName);
            if (indexToReplace === -1)
                throw new Error("Can't find attribute at path " + attributePath);
            const previousAttribute = parentAttribute.type.struct.attributes[indexToReplace];
            parentAttribute.type.struct.attributes[indexToReplace] =
                recursionTargetStructAttribute; // introduce recursion
            // ugly, pls c̶a̶l̶l̶ refactor me maybe
            // we store all structs in this.structs – now we need to dispose all structs that are part of previousAttribute
            const disposeStructs = (attr) => {
                if (attr.type.struct) {
                    attr.type.struct.attributes.forEach(disposeStructs);
                    this.structs = this.structs.filter((s) => s !== attr.type.struct);
                }
            };
            disposeStructs(previousAttribute);
        });
        attributes = deduplicateAttributesWithSameName(attributes);
        const resourceModel = new models_1.ResourceModel({
            terraformType: type,
            baseName,
            fileName,
            filePath,
            className,
            schema,
            fqpn,
            attributes,
            terraformSchemaType,
            structs: this.structs,
            configStructName,
        });
        return resourceModel;
    }
    renderAttributeType(scope, attributeType, parentKind) {
        const parent = scope[scope.length - 1];
        if ((0, skipped_attributes_1.shouldSkipAttribute)(parent.baseName)) {
            return new models_1.MapAttributeTypeModel(new models_1.SimpleAttributeTypeModel("any"));
        }
        if (typeof attributeType === "string") {
            switch (attributeType) {
                case "bool":
                    return new models_1.SimpleAttributeTypeModel("boolean");
                case "string":
                    return new models_1.SimpleAttributeTypeModel("string");
                case "number":
                    return new models_1.SimpleAttributeTypeModel("number");
                case "dynamic":
                    return new models_1.MapAttributeTypeModel(new models_1.SimpleAttributeTypeModel("any"));
                default:
                    throw new Error(`invalid primitive type ${attributeType}`);
            }
        }
        if (Array.isArray(attributeType)) {
            if (attributeType.length !== 2) {
                throw new Error(`unexpected array`);
            }
            const [kind, type] = attributeType;
            if (kind === "set" || kind === "list") {
                const elementType = this.renderAttributeType(scope, type, [kind, parentKind].join(""));
                return kind === "list"
                    ? new models_1.ListAttributeTypeModel(elementType, false, false)
                    : new models_1.SetAttributeTypeModel(elementType, false, false);
            }
            if (kind === "map") {
                const valueType = this.renderAttributeType(scope, type, [kind, parentKind].join(""));
                return new models_1.MapAttributeTypeModel(valueType);
            }
            if (kind === "object") {
                const objAttributes = type;
                const attributes = {};
                for (const [name, type] of Object.entries(objAttributes)) {
                    attributes[name] = { type };
                }
                const struct = this.addAnonymousStruct(scope, attributes, parentKind !== null && parentKind !== void 0 ? parentKind : kind);
                return new models_1.StructAttributeTypeModel(struct);
            }
        }
        if ((0, commons_1.isAttributeNestedType)(attributeType)) {
            let struct = undefined;
            let typeModel = undefined;
            switch (attributeType.nesting_mode) {
                case "list":
                    struct = this.addAnonymousStruct(scope, attributeType.attributes, attributeType.nesting_mode);
                    typeModel = new models_1.ListAttributeTypeModel(new models_1.StructAttributeTypeModel(struct), false, false);
                    break;
                case "set":
                    struct = this.addAnonymousStruct(scope, attributeType.attributes, attributeType.nesting_mode);
                    typeModel = new models_1.SetAttributeTypeModel(new models_1.StructAttributeTypeModel(struct), false, false);
                    break;
                case "map":
                    struct = this.addAnonymousStruct(scope, attributeType.attributes, attributeType.nesting_mode);
                    typeModel = new models_1.MapAttributeTypeModel(new models_1.StructAttributeTypeModel(struct));
                    break;
                case "single":
                    struct = this.addAnonymousStruct(scope, attributeType.attributes, attributeType.nesting_mode);
                    typeModel = new models_1.StructAttributeTypeModel(struct);
                    break;
                default: {
                    throw new Error(`nested_type with nesting_mode "${attributeType.nesting_mode}" not supported (attribute scope: ${scope
                        .map((s) => s.fullName)
                        .join(",")}`);
                }
            }
            return typeModel;
        }
        throw new Error(`unknown type ${JSON.stringify(attributeType)}`);
    }
    renderAttributesForBlock(parentType, block) {
        const attributes = new Array();
        for (const [terraformAttributeName, att] of Object.entries(block.attributes || {})) {
            if ((0, skipped_attributes_1.shouldSkipAttribute)(parentType.fullName(terraformAttributeName))) {
                throw commons_2.Errors.Internal(`Skipping attribute ${parentType.fullName(terraformAttributeName)} is not implemented since it's an attribute and not a block type`);
            }
            const type = this.renderAttributeType([
                parentType,
                new models_1.Scope({
                    name: terraformAttributeName,
                    parent: parentType,
                    isProvider: parentType.isProvider,
                    isComputed: !!att.computed,
                    isOptional: !!att.optional,
                    isRequired: !!att.required,
                    isNestedType: (0, commons_1.isNestedTypeAttribute)(att),
                }),
            ], att.type || att.nested_type);
            const name = (0, codemaker_1.toCamelCase)(terraformAttributeName);
            attributes.push(new models_1.AttributeModel({
                terraformFullName: parentType.fullName(terraformAttributeName),
                description: att.description,
                name,
                storageName: `_${name}`,
                computed: !!att.computed,
                optional: !!att.optional,
                terraformName: terraformAttributeName,
                type,
                provider: parentType.isProvider,
                required: !!att.required,
            }));
        }
        for (const [blockTypeName, blockType] of Object.entries(block.block_types || {})) {
            if ((0, skipped_attributes_1.shouldSkipAttribute)(parentType.fullName(blockTypeName))) {
                const name = (0, codemaker_1.toCamelCase)(blockTypeName);
                const parent = new models_1.Scope({
                    name: blockTypeName,
                    parent: parentType,
                    isProvider: parentType.isProvider,
                });
                attributes.push(new models_1.AttributeModel({
                    name,
                    terraformName: blockTypeName,
                    terraformFullName: parent.fullName(blockTypeName),
                    type: new models_1.SkippedAttributeTypeModel(),
                    description: `${blockTypeName} block`,
                    storageName: `_${name}`,
                    optional: true,
                    computed: false,
                    provider: parentType.isProvider,
                    required: false,
                }));
                continue;
            }
            // create a struct for this block
            let blockAttributes = this.renderAttributesForBlock(new models_1.Scope({
                name: `${parentType.name}_${blockTypeName}`,
                parent: parentType,
                isProvider: parentType.isProvider,
                inBlockType: true,
            }), blockType.block);
            blockAttributes = deduplicateAttributesWithSameName(blockAttributes);
            const blockStruct = this.addStruct([
                parentType,
                new models_1.Scope({
                    name: blockTypeName,
                    parent: parentType,
                    isProvider: parentType.isProvider,
                }),
            ], blockAttributes, blockType.nesting_mode, (blockType.nesting_mode === "list" ||
                blockType.nesting_mode === "set") &&
                blockType.max_items === 1);
            // define the attribute
            attributes.push(attributeForBlockType(blockTypeName, blockType, blockStruct, parentType.isProvider, parentType));
        }
        return attributes;
        function attributeForBlockType(terraformName, blockType, struct, isProvider, parent) {
            const name = (0, codemaker_1.toCamelCase)(terraformName);
            let optional;
            let required;
            switch (blockType.nesting_mode) {
                case "single":
                    optional = !struct.attributes.some((x) => !x.optional);
                    required = !struct.attributes.some((x) => !x.required);
                    return new models_1.AttributeModel({
                        name,
                        terraformName,
                        terraformFullName: parent.fullName(terraformName),
                        type: new models_1.StructAttributeTypeModel(struct),
                        description: `${terraformName} block`,
                        storageName: `_${name}`,
                        optional,
                        computed: false,
                        provider: isProvider,
                        required,
                    });
                case "map":
                    return new models_1.AttributeModel({
                        name,
                        terraformName,
                        terraformFullName: parent.fullName(terraformName),
                        type: new models_1.MapAttributeTypeModel(new models_1.StructAttributeTypeModel(struct)),
                        description: `${terraformName} block`,
                        storageName: `_${name}`,
                        optional: false,
                        computed: false,
                        provider: isProvider,
                        required: false,
                    });
                case "list":
                case "set":
                    optional =
                        blockType.min_items === undefined ? true : blockType.min_items < 1;
                    required =
                        blockType.min_items === undefined ? false : blockType.min_items > 0;
                    return new models_1.AttributeModel({
                        name,
                        terraformName: terraformName,
                        terraformFullName: parent.fullName(terraformName),
                        type: blockType.nesting_mode === "list"
                            ? new models_1.ListAttributeTypeModel(new models_1.StructAttributeTypeModel(struct), blockType.max_items === 1, true)
                            : new models_1.SetAttributeTypeModel(new models_1.StructAttributeTypeModel(struct), blockType.max_items === 1, true),
                        description: `${terraformName} block`,
                        storageName: `_${name}`,
                        optional,
                        computed: false,
                        provider: isProvider,
                        required,
                    });
            }
        }
    }
    addAnonymousStruct(scope, attrs, nesting_mode) {
        let attributes = new Array();
        const parent = scope[scope.length - 1];
        if (attrs) {
            for (const [terraformName, att] of Object.entries(attrs || {})) {
                // nested types support computed, optional and required on attribute level
                // if parent is computed, child always is computed as well
                const computed = !!parent.isComputed || (parent.isNestedType && !!att.computed);
                const optional = parent.isNestedType
                    ? !!att.optional
                    : !!parent.isOptional;
                const required = parent.isNestedType
                    ? !!att.required
                    : !!parent.isRequired;
                const name = (0, codemaker_1.toCamelCase)(terraformName);
                const type = this.renderAttributeType([
                    ...scope,
                    new models_1.Scope({
                        name: terraformName,
                        parent,
                        isProvider: parent.isProvider,
                        isComputed: computed,
                        isOptional: optional,
                        isRequired: required,
                        isNestedType: parent.isNestedType,
                    }),
                ], att.type || att.nested_type);
                attributes.push(new models_1.AttributeModel({
                    name,
                    storageName: `_${name}`,
                    computed: computed,
                    description: att.description,
                    optional: optional,
                    terraformName,
                    terraformFullName: parent.fullName(terraformName),
                    type,
                    provider: parent.isProvider,
                    required: required,
                }));
            }
        }
        attributes = deduplicateAttributesWithSameName(attributes);
        return this.addStruct(scope, attributes, nesting_mode);
    }
    addStruct(scope, attributes, nesting_mode, isSingleItem = false) {
        const possibleName = (0, codemaker_1.toPascalCase)(scope.map((x) => (0, codemaker_1.toSnakeCase)(x.name)).join("_"));
        const name = this.uniqueClassName(isReservedStructClassName(possibleName)
            ? `${possibleName}Struct`
            : possibleName);
        const parent = scope[scope.length - 1];
        // blockType.nesting_mode => list/set & blockType.max_items === 1,
        const isClass = (parent.isComputed && !parent.isOptional) || isSingleItem;
        const isAnonymous = true;
        const s = new models_1.Struct(name, attributes, isClass, isAnonymous, isSingleItem, nesting_mode);
        this.structs.push(s);
        return s;
    }
}
class ResourceParser {
    constructor() {
        this.uniqueClassnames = [];
        this.resources = {};
    }
    parse(fqpn, type, schema, terraformType, constraint) {
        if (this.resources[type]) {
            return this.resources[type];
        }
        const parser = new Parser(this.uniqueClassnames);
        const resource = parser.resourceFrom(fqpn, type, schema, terraformType, constraint);
        this.resources[type] = resource;
        return resource;
    }
    // Used by convert to determine the right name for a class
    getClassNameForResource(terraformType) {
        const resource = this.resources[terraformType];
        return resource ? resource.className : "";
    }
    // Used by convert to determine the right name for a namespace
    getNamespaceNameForResource(terraformType) {
        // Special case external provider since the name of resource doesn't have a prefix
        if (terraformType === "data_external_") {
            terraformType = "data_external";
        }
        const resource = this.resources[terraformType];
        if (!resource) {
            return "";
        }
        const folder = `providers/${resource.provider}`;
        return resource.filePath.replace(`${folder}/`, "").replace("/index.ts", "");
    }
}
exports.ResourceParser = ResourceParser;
//# sourceMappingURL=data:application/json;base64,