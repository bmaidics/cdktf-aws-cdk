"use strict";
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readSchema = exports.isLocalModule = exports.TerraformProviderConstraint = exports.TerraformModuleConstraint = exports.isRegistryModule = void 0;
var commons_1 = require("@cdktf/commons");
Object.defineProperty(exports, "isRegistryModule", { enumerable: true, get: function () { return commons_1.isRegistryModule; } });
Object.defineProperty(exports, "TerraformModuleConstraint", { enumerable: true, get: function () { return commons_1.TerraformModuleConstraint; } });
Object.defineProperty(exports, "TerraformProviderConstraint", { enumerable: true, get: function () { return commons_1.TerraformProviderConstraint; } });
Object.defineProperty(exports, "isLocalModule", { enumerable: true, get: function () { return commons_1.isLocalModule; } });
const commons_2 = require("@cdktf/commons");
const deepmerge_1 = __importDefault(require("deepmerge"));
const provider_schema_1 = require("./provider-schema");
const cache_1 = require("./cache");
async function readSchema(constraints, cacheDir) {
    const cachedReadProviderSchema = (0, cache_1.cachedAccess)(provider_schema_1.readProviderSchema, cacheDir);
    const targets = constraints.map((constraint) => commons_2.ConstructsMakerProviderTarget.from(constraint, commons_2.LANGUAGES[0]));
    const schemas = await Promise.all(targets.map((t) => t.isModule
        ? (0, provider_schema_1.readModuleSchema)(t).then((s) => ({ moduleSchema: s }))
        : cachedReadProviderSchema(t).then((s) => ({ providerSchema: s }))));
    // ensure we have a schema for each target type
    schemas.unshift({
        providerSchema: {
            format_version: "0.1",
        },
        moduleSchema: {},
    });
    return deepmerge_1.default.all(schemas);
}
exports.readSchema = readSchema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7Ozs7O0FBRUgsMENBS3dCO0FBSnRCLDJHQUFBLGdCQUFnQixPQUFBO0FBQ2hCLG9IQUFBLHlCQUF5QixPQUFBO0FBQ3pCLHNIQUFBLDJCQUEyQixPQUFBO0FBQzNCLHdHQUFBLGFBQWEsT0FBQTtBQUVmLDRDQUl3QjtBQUN4QiwwREFBa0M7QUFDbEMsdURBQXlFO0FBQ3pFLG1DQUF1QztBQU9oQyxLQUFLLFVBQVUsVUFBVSxDQUM5QixXQUE0QyxFQUM1QyxRQUFpQjtJQUVqQixNQUFNLHdCQUF3QixHQUFHLElBQUEsb0JBQVksRUFBQyxvQ0FBa0IsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM1RSxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FDN0MsdUNBQTZCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxtQkFBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQzdELENBQUM7SUFDRixNQUFNLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUNoQixDQUFDLENBQUMsUUFBUTtRQUNSLENBQUMsQ0FBQyxJQUFBLGtDQUFnQixFQUFDLENBQVEsQ0FBQyxDQUFDLElBQUksQ0FDN0IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxFQUFhLENBQUEsQ0FDdkM7UUFDSCxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBUSxDQUFDLENBQUMsSUFBSSxDQUNyQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLGNBQWMsRUFBRSxDQUFDLEVBQWEsQ0FBQSxDQUN6QyxDQUNOLENBQ0YsQ0FBQztJQUVGLCtDQUErQztJQUMvQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ2QsY0FBYyxFQUFFO1lBQ2QsY0FBYyxFQUFFLEtBQUs7U0FDdEI7UUFDRCxZQUFZLEVBQUUsRUFBRTtLQUNqQixDQUFDLENBQUM7SUFFSCxPQUFPLG1CQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUE3QkQsZ0NBNkJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEhhc2hpQ29ycCwgSW5jLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1QTC0yLjBcbiAqL1xuXG5leHBvcnQge1xuICBpc1JlZ2lzdHJ5TW9kdWxlLFxuICBUZXJyYWZvcm1Nb2R1bGVDb25zdHJhaW50LFxuICBUZXJyYWZvcm1Qcm92aWRlckNvbnN0cmFpbnQsXG4gIGlzTG9jYWxNb2R1bGUsXG59IGZyb20gXCJAY2RrdGYvY29tbW9uc1wiO1xuaW1wb3J0IHtcbiAgVGVycmFmb3JtRGVwZW5kZW5jeUNvbnN0cmFpbnQsXG4gIExBTkdVQUdFUyxcbiAgQ29uc3RydWN0c01ha2VyUHJvdmlkZXJUYXJnZXQsXG59IGZyb20gXCJAY2RrdGYvY29tbW9uc1wiO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tIFwiZGVlcG1lcmdlXCI7XG5pbXBvcnQgeyByZWFkTW9kdWxlU2NoZW1hLCByZWFkUHJvdmlkZXJTY2hlbWEgfSBmcm9tIFwiLi9wcm92aWRlci1zY2hlbWFcIjtcbmltcG9ydCB7IGNhY2hlZEFjY2VzcyB9IGZyb20gXCIuL2NhY2hlXCI7XG5cbmV4cG9ydCB0eXBlIFNjaGVtYSA9IHtcbiAgcHJvdmlkZXJTY2hlbWE/OiBBd2FpdGVkPFJldHVyblR5cGU8dHlwZW9mIHJlYWRQcm92aWRlclNjaGVtYT4+O1xuICBtb2R1bGVTY2hlbWE/OiBBd2FpdGVkPFJldHVyblR5cGU8dHlwZW9mIHJlYWRNb2R1bGVTY2hlbWE+Pjtcbn07XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkU2NoZW1hKFxuICBjb25zdHJhaW50czogVGVycmFmb3JtRGVwZW5kZW5jeUNvbnN0cmFpbnRbXSxcbiAgY2FjaGVEaXI/OiBzdHJpbmdcbik6IFByb21pc2U8U2NoZW1hPiB7XG4gIGNvbnN0IGNhY2hlZFJlYWRQcm92aWRlclNjaGVtYSA9IGNhY2hlZEFjY2VzcyhyZWFkUHJvdmlkZXJTY2hlbWEsIGNhY2hlRGlyKTtcbiAgY29uc3QgdGFyZ2V0cyA9IGNvbnN0cmFpbnRzLm1hcCgoY29uc3RyYWludCkgPT5cbiAgICBDb25zdHJ1Y3RzTWFrZXJQcm92aWRlclRhcmdldC5mcm9tKGNvbnN0cmFpbnQsIExBTkdVQUdFU1swXSlcbiAgKTtcbiAgY29uc3Qgc2NoZW1hcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgIHRhcmdldHMubWFwKCh0KSA9PlxuICAgICAgdC5pc01vZHVsZVxuICAgICAgICA/IHJlYWRNb2R1bGVTY2hlbWEodCBhcyBhbnkpLnRoZW4oXG4gICAgICAgICAgICAocykgPT4gKHsgbW9kdWxlU2NoZW1hOiBzIH0gYXMgU2NoZW1hKVxuICAgICAgICAgIClcbiAgICAgICAgOiBjYWNoZWRSZWFkUHJvdmlkZXJTY2hlbWEodCBhcyBhbnkpLnRoZW4oXG4gICAgICAgICAgICAocykgPT4gKHsgcHJvdmlkZXJTY2hlbWE6IHMgfSBhcyBTY2hlbWEpXG4gICAgICAgICAgKVxuICAgIClcbiAgKTtcblxuICAvLyBlbnN1cmUgd2UgaGF2ZSBhIHNjaGVtYSBmb3IgZWFjaCB0YXJnZXQgdHlwZVxuICBzY2hlbWFzLnVuc2hpZnQoe1xuICAgIHByb3ZpZGVyU2NoZW1hOiB7XG4gICAgICBmb3JtYXRfdmVyc2lvbjogXCIwLjFcIixcbiAgICB9LFxuICAgIG1vZHVsZVNjaGVtYToge30sXG4gIH0pO1xuXG4gIHJldHVybiBkZWVwbWVyZ2UuYWxsKHNjaGVtYXMpO1xufVxuIl19