"use strict";
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.unableToResolveCircularReference = exports.intrinsicNewError = exports.argToIntrinsicMustBePlainValue = exports.indexTooLargeToEncode = exports.canOnlyEncodePositiveIntegers = exports.doesNotImplementDependableTrait = exports.cannotConcatenateStringsInTokenizedMap = exports.mapValueAddedToReferenceList = exports.numberValueAddedToReferenceList = exports.cannotConcatenateStringsInTokenizedStringArray = exports.stringValueAddedToReferenceList = exports.cannotCalcIdForEmptySetOfComponents = exports.functionArgumentValidationFailure = exports.functionReceivedWrongNumberOfArgs = exports.listElementIsOfWrongType = exports.valueIsInvalidNumberOrToken = exports.valueIsInvalidStringOrToken = exports.encounteredAnnotationWithLevelError = exports.valueContainsUnescapedQuotes = exports.cloudBackendWorkspaceIsNotDefinedByName = exports.constructDependencyBelowV10 = exports.sourceOrTargetNotAnObject = exports.targetNotResolvableWithOverrides = exports.invalidStack = exports.expectNotGloballyAccessible = exports.jestNotInstantiated = exports.matchersFoundErrorsInStack = exports.matchersPathIsNotDirectory = exports.stackValidationFailure = exports.stackHasCircularDependency = exports.noStackForConstruct = exports.stackIdContainsWhitespace = exports.stackContainsDisallowedChar = exports.resourceGivenTwoMoveOperationsByTarget = exports.resourceGivenTwoMoveOperationsById = exports.resourceGivenTwoMoveOperationsByTargetAndId = exports.movedToResourceOfDifferentType = exports.moveTargetNotSet = exports.moveTargetAlreadySet = exports.modulesWithSameAlias = exports.iteratorOnResourceWithoutForEach = exports.iteratorOnResourceWithCount = exports.unresolvedTokenInConstructId = exports.dynamicBlockNotSupported = exports.assetTypeNotImplemented = exports.assetExpectsDirectory = exports.assetOutOfScopeOfCDKTFJson = exports.providerVersionMismatch = exports.appValidationFailure = exports.noAppFound = void 0;
exports.IdIncludesUnresolvedTokens = exports.unrecognizedTokenKey = exports.unknownNumberTokenFound = exports.mapKeyMustResolveToString = exports.constructsCannotBeResolved = exports.encodedMapTokenInScalarNumberContext = exports.encodedMapTokenInScalarStringContext = exports.encodedListTokenInScalarStringContext = exports.cannotResolveFunction = void 0;
const noAppFound = (constructPath) => new Error(`No app could be identified for the construct at path '${constructPath}', likely a TerraformStack.
The scope of CDKTF's TerraformStack class is a single App instance created by 'const app = new App()'. The App is the root of your project that holds project configuration and validations.
You can learn more about the App here: https://developer.hashicorp.com/terraform/cdktf/concepts/cdktf-architecture#app-class:~:text=and%20Resource.-,App%20Class,-Each%20CDKTF%20project
    `);
exports.noAppFound = noAppFound;
const appValidationFailure = (errorList) => new Error(`App level validation failed with the following errors:\n  ${errorList}
Validations allow for dynamic verification of your project.
To skip validations, add 'skipValidation: true' to your App config
    `);
exports.appValidationFailure = appValidationFailure;
const providerVersionMismatch = () => new Error(`Version mismatch detected: The provider bindings seem to have been built for an older version of CDKTF. 
Upgrade your pre-built provider or re-run cdktf get with a more recent version (>= 0.10) of the cdktf-cli.
    `);
exports.providerVersionMismatch = providerVersionMismatch;
const assetOutOfScopeOfCDKTFJson = (id, configPath) => new Error(`TerraformAsset ${id} was created with a relative path '${configPath}', but no cdktf.json file was found to base it on.

The cdktf.json is needed to establish the base for the relative path (e.g the '.' in './foo/bar'). We cannot find the cdktf.json within your current working directory '${process.cwd()}'
To avoid this, please place a cdktf.json at the root of your project. Learn more here: https://developer.hashicorp.com/terraform/cdktf/create-and-deploy/configuration-file
To learn more about TerraformAsset read here: https://developer.hashicorp.com/terraform/cdktf/concepts/assets
`);
exports.assetOutOfScopeOfCDKTFJson = assetOutOfScopeOfCDKTFJson;
const assetExpectsDirectory = (id, configPath) => new Error(`TerraformAsset ${id} expects path to be a directory, a file was passed: '${configPath}'
To learn more about TerraformAsset read here: https://developer.hashicorp.com/terraform/cdktf/concepts/assets
    `);
exports.assetExpectsDirectory = assetExpectsDirectory;
const assetTypeNotImplemented = () => new Error(`Asset type is not implemented
Possible Asset types include: FILE, DIRECTORY, and ARCHIVE
The values are to be taken from the AssetType Enum.
To learn more about TerraformAsset read here: https://developer.hashicorp.com/terraform/cdktf/concepts/assets
  `);
exports.assetTypeNotImplemented = assetTypeNotImplemented;
const dynamicBlockNotSupported = (_foreachExpression) => new Error(`Tried to directly resolve a TerraformDynamicBlock which is not supported.
The TerraformDynamicBlock is created by calling '.dynamic' on a TerraformIterator instance.
Dynamic blocks are only supported on block attributes of resources, data sources and providers.

The expression used for the dynamic block: .dynamic({
  ${_foreachExpression}
})
`);
exports.dynamicBlockNotSupported = dynamicBlockNotSupported;
const unresolvedTokenInConstructId = (id) => new Error(`You cannot use a Token (e.g. a reference to an attribute) as the id of a construct.
The following id was passed: "${id}"
Ids of constructs must be known at synthesis time and the value of tokens is only known when Terraform runs, hence you cannot use tokens in construct ids.`);
exports.unresolvedTokenInConstructId = unresolvedTokenInConstructId;
const iteratorOnResourceWithCount = () => new Error(`Cannot create iterator from a resource with a count argument.
The resource passed to the iterator has a count argument which determines how many instances of the resource are created.
Please re-use the same TerraformCount used in this resource on the resource where you planned to use this iterator instead.

If you need to use the iterator to populate a list attribute, replace the count on the resource with an iterator passed into the forEach argument.`);
exports.iteratorOnResourceWithCount = iteratorOnResourceWithCount;
const iteratorOnResourceWithoutForEach = () => new Error(`Cannot create an iterator from resource without a forEach argument.
The resource passed to the iterator does not have a forEach argument, meaning only a single instance of it will be created.
If you want to create more instances of this resource pass an iterator to the forEach argument of the resource first.
  `);
exports.iteratorOnResourceWithoutForEach = iteratorOnResourceWithoutForEach;
const modulesWithSameAlias = (alias) => new Error(`Error: Multiple providers have the same alias: "${alias}"
When passing multiple providers of the same type to modules, each provider must have a unique alias.
  `);
exports.modulesWithSameAlias = modulesWithSameAlias;
const moveTargetAlreadySet = (target, friendlyUniqueId) => new Error(`Target "${target}" has already been used for the construct at ${friendlyUniqueId}.
Target must be a string that is unique across all resources in the same stack.`);
exports.moveTargetAlreadySet = moveTargetAlreadySet;
const moveTargetNotSet = (target, entries) => new Error(`Target "${target}" has not been set.
You tried to move a resource to a target that has not been set on any resource.
Call .addMoveTarget("${target}") on the instance of the resource you want to move this one to.

Alternatively you can use one of the following targets (in case you had a typo):
${entries}
`);
exports.moveTargetNotSet = moveTargetNotSet;
const movedToResourceOfDifferentType = (moveTarget, originalResourceType, destinationResourceType) => new Error(`You have tried to move a resource to a different type which is not supported.

The move target "${moveTarget}" corresponding to the resource of type ${destinationResourceType} to move to differs from the resource of type ${originalResourceType} being moved from.

If this was intentional, you can instead try importing the existing resource into your target as described in the import docs:
https://developer.hashicorp.com/terraform/cdktf/concepts/resources#importing-resources

Please note, that you will manually need to remove the original resource from your state file after importing it, using the "terraform state rm" command in the output directory of the stack this resource is defined in. Read more about the command here:
https://developer.hashicorp.com/terraform/cli/commands/state/rm
`);
exports.movedToResourceOfDifferentType = movedToResourceOfDifferentType;
const resourceGivenTwoMoveOperationsByTargetAndId = (id, existingTarget, newMove) => new Error(`
${id} has been given two separate moved operations.

Move target: "${existingTarget}"
Move by id: {
  from: ${newMove.from}
  to: ${newMove.to}
}

Only one move operation can occur per plan/apply. Remove one of the operations.

To learn more about moving resources see: https://developer.hashicorp.com/terraform/cdktf/examples-and-guides/refactoring#:~:text=Moving%20%26%20Renaming%20Resources%20Within%20a%20Stack
`);
exports.resourceGivenTwoMoveOperationsByTargetAndId = resourceGivenTwoMoveOperationsByTargetAndId;
const resourceGivenTwoMoveOperationsById = (id, existingMove, newMove) => new Error(`
${id} has been given two separate moved operations.

{
  from: ${existingMove.from}
  to: ${existingMove.to}
}
{
  from: ${newMove.from}
  to: ${newMove.to} (Resource calling the move to operation)
}

Only one move operation can occur per plan/apply. Remove one of the operations.

To learn more about moving resources see: https://developer.hashicorp.com/terraform/cdktf/examples-and-guides/refactoring#:~:text=Moving%20%26%20Renaming%20Resources%20Within%20a%20Stack
`);
exports.resourceGivenTwoMoveOperationsById = resourceGivenTwoMoveOperationsById;
const resourceGivenTwoMoveOperationsByTarget = (resourceId, existingMoveTarget, newMoveTarget) => new Error(`The resource ${resourceId} has been given two moveTargets: "${newMoveTarget}" and "${existingMoveTarget}"

A resource can only be moved once per plan/apply

To learn more about moving resources see: https://developer.hashicorp.com/terraform/cdktf/examples-and-guides/refactoring#:~:text=Moving%20%26%20Renaming%20Resources%20Within%20a%20Stack
`);
exports.resourceGivenTwoMoveOperationsByTarget = resourceGivenTwoMoveOperationsByTarget;
const stackContainsDisallowedChar = (stackId, invalidChar) => new Error(`Can not create Terraform stack with id "${stackId}". It contains a glob character: "${invalidChar}"

Glob characters are disallowed in stack names due to their use in deploying/destroying multiple stacks 

Such as 'cdktf deploy \`*-production\`' which deploys all stacks with names that end in '-production'
`);
exports.stackContainsDisallowedChar = stackContainsDisallowedChar;
const stackIdContainsWhitespace = (stackId) => new Error(`Can not create TerraformStack with id "${stackId}". It contains a whitespace character.

Please remove any whitespace characters in your TerraformStack id like so: "${stackId.replace(/\s/g, "")}"
`);
exports.stackIdContainsWhitespace = stackIdContainsWhitespace;
const noStackForConstruct = (constructPath, hint) => new Error(`No stack could be identified for the construct at path '${constructPath}'${hint}

Constructs can only be used as a part of a TerraformStack. While Constructs represent a collection of infrastructure, they must be used within a TerraformStack to be apart of a dedication Terraform configuration.

To learn more about Constructs vs. TerraformStacks see here: https://developer.hashicorp.com/terraform/cdktf/concepts/constructs#:~:text=Constructs%20vs.%20Stacks
`);
exports.noStackForConstruct = noStackForConstruct;
const stackHasCircularDependency = (thisStack, dependency) => new Error(`Can not add dependency ${dependency} to ${thisStack} since it would result in a loop

This is caused by the TerraformStack ${dependency} already being dependent on ${thisStack} directly, or dependent on a TerraformStack within ${thisStack}
  
To learn more about cross-stack references see here: https://developer.hashicorp.com/terraform/cdktf/concepts/stacks#:~:text=Cross%2DStack%20References
`);
exports.stackHasCircularDependency = stackHasCircularDependency;
const stackValidationFailure = (errorList) => new Error(`Validation failed with the following errors:\n  ${errorList}
  
If you wish to ignore these validations, pass 'skipValidation: true' to your App config
`);
exports.stackValidationFailure = stackValidationFailure;
const matchersPathIsNotDirectory = (functionName) => new Error(`Path is not a directory

Ensure you are passing the result of Testing.fullSynth('stack instance') and not Testing.synth('stack instance') in your usage of '${functionName}'. 

Testing.fullSynth returns a file path to temporary testing environment. This file path is used in CDKTF tests that ensure your TerraformStack produces a validate Terraform configuration (toBeValidTerraform & toPlanSuccessfully).
Like so: "Testing.toBeValidateTerraform(Testing.fullSynth('TerraformStack instance'))"

Testing.synth returns the JSON representation of your stack. This JSON can then be used in CDKTF assertions that check the composition of your stacks (toHaveResource, toHaveDataSource, ect.)
Like so: "Testing.toHaveResource(Testing.synth('TerraformStack instance'), S3Bucket)"

To learn more about testing in CDKTF see: https://developer.hashicorp.com/terraform/cdktf/test/unit-tests`);
exports.matchersPathIsNotDirectory = matchersPathIsNotDirectory;
const matchersFoundErrorsInStack = (errorCount, stackName, diagnostics) => new Error(`Found ${errorCount} Errors in stack ${stackName}: ${diagnostics}
  
These errors are not failures of your tests, but issues with the underlying TerraformStack being tested. Fix the above issues before running tests again.
`);
exports.matchersFoundErrorsInStack = matchersFoundErrorsInStack;
const jestNotInstantiated = () => new Error(`expect is not defined, jest was not properly instantiated
  
Ensure you have a 'setup.js' file in your project's directory that calls 'cdktf.Testing.setupJest()'

To learn more about setting up testing see: https://developer.hashicorp.com/terraform/cdktf/test/unit-tests#:~:text=Add%20Testing%20to%20Your%20Application
`);
exports.jestNotInstantiated = jestNotInstantiated;
const expectNotGloballyAccessible = () => new Error(`setupJest called, but expect is not globally accessible

To learn more about setting up testing see: https://developer.hashicorp.com/terraform/cdktf/test/unit-tests#:~:text=Add%20Testing%20to%20Your%20Application
`);
exports.expectNotGloballyAccessible = expectNotGloballyAccessible;
const invalidStack = (stackContent) => new Error(`invalid JSON string passed: ${stackContent}

Ensure you are passing the result of Testing.synth('stack instance') and not Testing.fullSynth('stack instance'). 

Testing.synth returns the JSON representation of your stack. This JSON can then be used in CDKTF assertions that check the composition of your stacks (toHaveResource, toHaveDataSource, ect.)
Like so: "Testing.toHaveResource(Testing.synth('TerraformStack instance'), S3Bucket)"

Testing.fullSynth returns a file path to temporary testing environment. This file path is used in CDKTF tests that ensure your TerraformStack produces a validate Terraform configuration (toBeValidTerraform & toPlanSuccessfully).
Like so: "Testing.toBeValidateTerraform(Testing.fullSynth('TerraformStack instance'))"

To learn more about testing in CDKTF see: https://developer.hashicorp.com/terraform/cdktf/test/unit-tests`);
exports.invalidStack = invalidStack;
const targetNotResolvableWithOverrides = (target) => new Error(`Invalid usage. Target (${target}) can not be a resolvable token when overrides are specified. Please replace the value of the field you are overriding with a static value.

Because the target is a resolvable Token any overrides cannot be applied as it has not yet been resolved. 

To learn more about Tokens see here: https://developer.hashicorp.com/terraform/cdktf/concepts/tokens
`);
exports.targetNotResolvableWithOverrides = targetNotResolvableWithOverrides;
const sourceOrTargetNotAnObject = (source, sourceType, target, targetType) => new Error(`An issue was encountered during the synthesization of your Terraform configuration. 
  
Both the source element (${source}) and and its containing target element (${target}) must be objects

Type of source: ${sourceType}
Type of target: ${targetType}
`);
exports.sourceOrTargetNotAnObject = sourceOrTargetNotAnObject;
const constructDependencyBelowV10 = () => new Error(`Version mismatch! The constructs dependency appears to be lower than v10 which is required as of cdktf version 0.6.
Your current constructs version is missing Construct.node which was added in v10.
Please update your constructs dependency: https://cdk.tf/upgrade-constructs-v10
`);
exports.constructDependencyBelowV10 = constructDependencyBelowV10;
const cloudBackendWorkspaceIsNotDefinedByName = () => new Error(`The Cloud backend only supports cross-stack references when the workspace is defined by name instead of by tags.

To properly utilize cross-stack references, replace your usage of 'TaggedCloudWorkspaces' to 'NamedCloudWorkspace' like so:

new CloudBackend(stack, {
  ...
  workspaces: new NamedCloudWorkspace("my-app"),
});

To learn more about Remote Backends see: https://developer.hashicorp.com/terraform/cdktf/concepts/remote-backends
`);
exports.cloudBackendWorkspaceIsNotDefinedByName = cloudBackendWorkspaceIsNotDefinedByName;
const valueContainsUnescapedQuotes = (value) => new Error(`'${value}' can not be used as value directly since it has unescaped double quotes in it.

To safely use the value, use Fn.rawString on your string like so:

Fn.rawString('${value}')

This is needed as CDKTF or Terraform will otherwise try to interpret these double quotes incorrectly.

To learn more about built in Terraform functions within CDKTF see: https://developer.hashicorp.com/terraform/cdktf/concepts/functions
`);
exports.valueContainsUnescapedQuotes = valueContainsUnescapedQuotes;
const encounteredAnnotationWithLevelError = (errors) => new Error(`Encountered Annotations with level "ERROR":\n${errors}
  
Either fix the issues above, or set the environment variable CDKTF_CONTINUE_SYNTH_ON_ERROR_ANNOTATIONS to ignore these annotations
`);
exports.encounteredAnnotationWithLevelError = encounteredAnnotationWithLevelError;
const valueIsInvalidStringOrToken = (value) => new Error(`'${value}' is not a valid string nor a token, This function only accepts strings or tokens resolving to strings, please change your code accordingly.`);
exports.valueIsInvalidStringOrToken = valueIsInvalidStringOrToken;
const valueIsInvalidNumberOrToken = (value) => new Error(`${value} is not a valid number nor a token. This function only accepts numbers or tokens resolving to numbers, please change your code accordingly.`);
exports.valueIsInvalidNumberOrToken = valueIsInvalidNumberOrToken;
const listElementIsOfWrongType = (value, position, error) => new Error(`Element in list ${value} at position ${position} is not of the right type: ${error}. Please make sure all elements in the list are of the correct type for this function.`);
exports.listElementIsOfWrongType = listElementIsOfWrongType;
const functionReceivedWrongNumberOfArgs = (name, argValidatorsLength, argsLength) => new Error(`${name} takes ${argValidatorsLength} arguments, but ${argsLength} were provided. Please provide the missing arguments to the function.`);
exports.functionReceivedWrongNumberOfArgs = functionReceivedWrongNumberOfArgs;
const functionArgumentValidationFailure = (argNumber, name, error) => new Error(`Argument ${argNumber} of ${name} failed the validation: ${error}. Please change your code to pass a valid value for this argument.`);
exports.functionArgumentValidationFailure = functionArgumentValidationFailure;
const cannotCalcIdForEmptySetOfComponents = () => new Error(`Unable to calculate a unique id for an empty set of components. This can only happen if you are trying to create a unique id while not passing in any construct node ids. This means your construct likely has no parent, which is not allowed. Please make sure your construct has a parent, e.g. new App(this) or new TerraformStack(this, 'stack')`);
exports.cannotCalcIdForEmptySetOfComponents = cannotCalcIdForEmptySetOfComponents;
const stringValueAddedToReferenceList = (listToken) => new Error(`Cannot add elements to list token, got: ${listToken}. We expect the elements of a tokenized string array to be a single string token, e.g. ["&{TfToken[Token.1]}"]. In this case the one element in the array consist of more than one value. To add values to a tokenized list use Terraform Functions instead, e.g. Fn.concat([yourReferencedList, ["my", "new", "items"]]).`);
exports.stringValueAddedToReferenceList = stringValueAddedToReferenceList;
const cannotConcatenateStringsInTokenizedStringArray = (listToken) => new Error(`Cannot concatenate strings in a tokenized string array, got: ${listToken}. We expect the elements of a tokenized string array to be a single string token, e.g. ["&{TfToken[Token.1]}"]. In this case the one element in the array consist of something different than a single token, likely by mutating the value inside this list. This leads to CDKTF not being able to resolve the token into the appropriate runtime value. Please don't mutate tokenized string arrays.`);
exports.cannotConcatenateStringsInTokenizedStringArray = cannotConcatenateStringsInTokenizedStringArray;
const numberValueAddedToReferenceList = (listToken) => new Error(`Cannot add elements to list token, got: ${listToken}. Tokens are used to represent runtime values (e.g. references to attributes of resource or data sources), they don't contain the values since the values are only available at apply time, whereas the Tokens are present during compile time. You tried to add a value to a tokenized list, this should be done via Terraform function: Fn.concat([yourReferencedList, [42, 43, 44]]).`);
exports.numberValueAddedToReferenceList = numberValueAddedToReferenceList;
const mapValueAddedToReferenceList = (mapToken) => new Error(`Cannot add elements to map token, got: ${mapToken}. This can happen if you merge multiple maps or if you add a new key value pair to the map token. Tokens are used to represent runtime values (e.g. references to attributes of resource or data sources), they don't contain the values since the values are only available at apply time, whereas the Tokens are present during compile time. Instead of adding the value to the tokenized map you need to use a Terraform Function, e.g. Fn.merge([yourReferencedMap, { your: 'value' }]) that creates a new map Token for a value that represents what you want to express. For example this might get rendered as merge(my_resource.resource_name.one_specific_map_attribute, { your: ' value' })`);
exports.mapValueAddedToReferenceList = mapValueAddedToReferenceList;
const cannotConcatenateStringsInTokenizedMap = (tokenizedMap) => new Error(`Cannot concatenate strings in a tokenized map, got: ${tokenizedMap}. We expect the key of a tokenized map to be a string token, e.g. { "&{TfToken[Token.1]}": "String Map Token Value" }. In this case the key in the map consists of more than a string token (e.g. the Token and a static string or multiple Token). This can happen if you mutate the key of the map, which is not allowed. Please don't mutate tokenized Maps as it makes it impossible for CDKTF to translate them to their intended values.`);
exports.cannotConcatenateStringsInTokenizedMap = cannotConcatenateStringsInTokenizedMap;
const doesNotImplementDependableTrait = (instance) => new Error(`${instance} does not implement DependableTrait`);
exports.doesNotImplementDependableTrait = doesNotImplementDependableTrait;
const canOnlyEncodePositiveIntegers = () => new Error(`Can only encode positive integers into Tokens. This is a bug in CDKTF, please file a bug report.`);
exports.canOnlyEncodePositiveIntegers = canOnlyEncodePositiveIntegers;
const indexTooLargeToEncode = (index) => new Error(`Got an index too large to encode into a Token :${index}. This happens if you have an enormous amount of Tokens in a single CDKTF application. Most likely you are creating numeric tokens in an infinite loop, e.g. by calling 'Token.asNumber()' a lot. If you reach the maximum number of allowed Tokens (a limitation imposed by the way we encode Tokens / separate them from real numeric values) you need to work around this issue by splitting up your application into multiple applications.`);
exports.indexTooLargeToEncode = indexTooLargeToEncode;
const argToIntrinsicMustBePlainValue = (value, creationStack) => new Error(`You can only use a plain value (not a function) when creating an Intrinsic token. We got the value '${value}' created at:\n${creationStack.join("\n")}. If you want to use a function, please use the Lazy class, e.g. Lazy.anyValue({ produce: () => "Hello World" }).`);
exports.argToIntrinsicMustBePlainValue = argToIntrinsicMustBePlainValue;
const intrinsicNewError = (message, createdAt) => new Error(`${message}\nToken created:\n    at ${createdAt}\nError thrown:`);
exports.intrinsicNewError = intrinsicNewError;
const unableToResolveCircularReference = (pathName) => new Error(`Unable to resolve object tree with circular reference at '${pathName}'.
This error is thrown if the depth of the object tree is greater than 200 to protect against cyclic references.
To resolve this inspect the construct creating the cyclic reference (most likely in '${pathName}') and make sure
it does not create an infinite nesting of constructs.`);
exports.unableToResolveCircularReference = unableToResolveCircularReference;
const cannotResolveFunction = (pathName, obj) => new Error(`Trying to resolve a non-data object (e.g. a function) at '${pathName}': ${obj}. Only tokens are supported for lazy evaluation.
If you want to have a lazily computed value, please use the Lazy class, e.g. Lazy.stringValue({ produce: () => "Hello World" })`);
exports.cannotResolveFunction = cannotResolveFunction;
const LIST_ERROR_EXPLANATION = `In CDKTF we represent lists where the value is only known at runtime (versus compile / synth time) as
Arrays with a single element that is a string token, e.g. ["Token.1"]. This is because at compile time we
don't know the length of the list, so far CDKTF did not invoke Terraform to communicate with the cloud provider.
This is done at a later stage on the synthesized static JSON file.
As we don't know the length of the list not the content we can not differentiate if the list was accessed at the first index,
the last index, or as part of a loop. To avoid this ambiguity:

- If you want to access a singular item use 'Fn.element(list, 0)' (not 'list[0]')
- If you want to loop over the list use 'TerraformIterator.fromList(list)' (not 'for (const item of list)' or 'list.forEach(item => ...)')

To learn more about tokens see https://developer.hashicorp.com/terraform/cdktf/concepts/tokens
To learn more about iterators see https://developer.hashicorp.com/terraform/cdktf/concepts/iterators`;
const MAP_ERROR_EXPLANATION = `In CDKTF we represent maps where the value is only known at runtime (versus compile / synth time) as
objects with a single key-value pair where the value is a string token, e.g. { "&{TfToken[Token.1]}": "String Map Token Value" }.
This is because the length of the list isn't know at compile time, as CDKTF has not yet invoked Terraform to communicate with the cloud provider.
This is done at a later stage on the synthesized static JSON file.
As we don't know the contents of the map we do not know which key was accessed, or if the map was accessed as part of a loop.
To avoid this ambiguity:

- If you want to access a singular item use 'Fn.lookup(map, key)' (not 'map[key]')
- If you want to loop over the map use 'TerraformIterator.fromMap(map)' (not 'for (const [key, value] of map)' or 'Object.entries(map).forEach((key, value) => ...)')

To learn more about tokens see https://developer.hashicorp.com/terraform/cdktf/concepts/tokens
To learn more about iterators see https://developer.hashicorp.com/terraform/cdktf/concepts/iterators`;
const encodedListTokenInScalarStringContext = () => new Error(`Found an encoded list token string in a scalar string context.
${LIST_ERROR_EXPLANATION}`);
exports.encodedListTokenInScalarStringContext = encodedListTokenInScalarStringContext;
const encodedMapTokenInScalarStringContext = () => new Error(`Found an encoded map token in a scalar string context.
${MAP_ERROR_EXPLANATION}`);
exports.encodedMapTokenInScalarStringContext = encodedMapTokenInScalarStringContext;
const encodedMapTokenInScalarNumberContext = () => new Error(`Found an encoded map token in a scalar number context.
${MAP_ERROR_EXPLANATION}`);
exports.encodedMapTokenInScalarNumberContext = encodedMapTokenInScalarNumberContext;
const constructsCannotBeResolved = (pathName) => new Error(`Trying to resolve() a Construct at '${pathName}'. 
This often means that there is an unintended cyclic dependency in your construct tree, leading to the resolution being stuck in an infinite loop which will eventually fail. This can happen if the scope passed into this construct is also part of its subtree in some way. To resolve this issue, please refactor your code to avoid this cyclic dependency by changing the scope of this construct.`);
exports.constructsCannotBeResolved = constructsCannotBeResolved;
const mapKeyMustResolveToString = (pathName, key, resolvedKey) => new Error(`At "${pathName}" the key "${key}" is used in a map so it must resolve to a string, but it resolves to a ${typeof resolvedKey} with the value ${JSON.stringify(resolvedKey)}. This means that the token used as the key is not resolving into string, you must change the Token so that it does.`);
exports.mapKeyMustResolveToString = mapKeyMustResolveToString;
const unknownTokenExplanation = `This means that you are trying to access a Token value that does not exist. This can only happen if the Token is e.g. from another CDK (i.e. AWS CDK, CDK8s, etc.) and is not known to the CDKTF Application. You either need to make the other CDK resolve this token before CDKTF tries to resolve the token or work around using this token at all. 

If this error occurs without another CDK (or a value looking like a Token) being involved, please file a bug.`;
const unknownNumberTokenFound = () => new Error(`Encoded representation of unknown number Token found. ${unknownTokenExplanation}`);
exports.unknownNumberTokenFound = unknownNumberTokenFound;
const unrecognizedTokenKey = (key) => new Error(`Unrecognized Token Key '${key}'. ${unknownTokenExplanation}`);
exports.unrecognizedTokenKey = unrecognizedTokenKey;
const IdIncludesUnresolvedTokens = (unresolvedTokens) => new Error(`This construct (or its parent construct) was configured with an ID that contains a Token: ${unresolvedTokens}. This is not allowed as IDs must be known statically during synthesis. The values of tokens are only known during apply, therefore they cannot be used in IDs. Please use a concrete value for your constructs ID instead.`);
exports.IdIncludesUnresolvedTokens = IdIncludesUnresolvedTokens;
//# sourceMappingURL=data:application/json;base64,