"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderAttributes = exports.renderSimpleAttributes = exports.renderBlock = exports.renderTerraform = exports.renderImport = exports.renderMoved = exports.renderVariable = exports.renderLocals = exports.renderOutput = exports.renderModule = exports.renderProvider = exports.renderDynamicBlocks = exports.renderProvisionerBlock = exports.renderDatasource = exports.renderResource = exports.renderMapValue = exports.renderMap = exports.renderListValue = exports.renderList = exports.cleanForMetadata = void 0;
/**
 * Copyright (c) HashiCorp, Inc.
 * SPDX-License-Identifier: MPL-2.0
 */
const token_1 = require("../tokens/token");
/**
 *
 */
function escapeQuotes(str) {
    // Don't attempt to escape if we have an expression
    if (str.match(/\$\{/)) {
        return str;
    }
    return str.replace(/(?<!\\)"/g, '\\"');
}
/**
 *
 */
function renderString(str) {
    if (!str) {
        return str;
    }
    if (typeof str !== "string") {
        throw new Error("Unable to process attribute that should have been a string, but isn't");
    }
    const lines = str.split(/\r\n|[\n\r]/);
    if (lines.length === 1)
        return `"${escapeQuotes(str)}"`;
    return `<<EOF\n${lines.map((s) => escapeQuotes(s)).join("\n")}\nEOF`;
}
/**
 *
 */
function cleanForMetadata(block) {
    const res = {};
    if (typeof block !== "object" && !Array.isArray(block)) {
        return block;
    }
    if (Array.isArray(block)) {
        return block.map((i) => cleanForMetadata(i));
    }
    const keys = Object.keys(block);
    if (keys.includes("value")) {
        return cleanForMetadata(block.value);
    }
    for (const key of keys) {
        const value = block[key];
        if (typeof value === "object" && value != null && !Array.isArray(value)) {
            // if the value is a resolvable we don't want to recurse into it
            if (token_1.Tokenization.isResolvable(value)) {
                res[key] = {};
                continue;
            }
            res[key] = cleanForMetadata(value);
            continue;
        }
        else if (typeof value === "object" &&
            value != null &&
            Array.isArray(value)) {
            if (Array.isArray(res[key])) {
                res[key] = [...res[key], ...value];
            }
            else {
                res[key] = value;
            }
        }
        else if (value === undefined) {
            delete res[key];
        }
        else {
            res[key] = value;
        }
    }
    return res;
}
exports.cleanForMetadata = cleanForMetadata;
/**
 *
 */
function renderList(v, name) {
    const { isBlock, is_block, value, storage_class_type, storageClassType } = v;
    const block = isBlock || is_block;
    const classType = storageClassType || storage_class_type;
    if (value === undefined) {
        return "";
    }
    if (typeof value === "string") {
        // this could be an expression, so we don't need to do anything here
        return renderString(value);
    }
    if (name) {
        if (block) {
            if (!Array.isArray(value)) {
                return `${name} {` + `\n${renderAttributes(value)}\n}`;
            }
            return value
                .map((v) => {
                return `${name} {` + `\n${renderAttributes(v)}\n}`;
            })
                .join("\n");
        }
        if (!Array.isArray(value)) {
            return `${name} = ${renderListValue(value, classType)}`;
        }
        return `${name} = [
${value.map((v) => renderListValue(v, classType)).join(",\n")}
]`;
    }
    if (!Array.isArray(value)) {
        // A list type of only a single item
        return renderListValue(value, classType);
    }
    if (block) {
        return value.map((v) => renderListValue(v, classType)).join("\n");
    }
    return `[
${value.map((v) => renderListValue(v, classType)).join(",\n")}
]`;
}
exports.renderList = renderList;
/**
 *
 */
function renderListValue(value, storageClassType) {
    if (storageClassType === "stringList") {
        return renderString(value);
    }
    if (storageClassType === "numberList" || storageClassType === "booleanList") {
        return `${value}`;
    }
    return renderBlock(value, storageClassType);
}
exports.renderListValue = renderListValue;
/**
 *
 */
function renderMap(map) {
    if (typeof map === "string") {
        // this could be an expression, so we don't need to do anything here
        return `"${escapeQuotes(map)}"`;
    }
    return `{
${Object.entries(map)
        .map(([k, v]) => `${k} = ${renderMapValue(v)}`)
        .join("\n")}
}`;
}
exports.renderMap = renderMap;
/**
 *
 */
function renderMapValue(value) {
    if (typeof value === "string") {
        return renderString(value);
    }
    if (typeof value === "number") {
        return `${value}`;
    }
    if (typeof value === "boolean") {
        return `${value}`;
    }
    return `${value}`;
}
exports.renderMapValue = renderMapValue;
/**
 *
 */
function renderResource(resource) {
    const resourceType = Object.keys(resource)[0];
    const resourcesWithType = resource[resourceType];
    const resourceName = Object.keys(resourcesWithType)[0];
    const resourceAttributes = resourcesWithType[resourceName];
    if (resourceAttributes.connection) {
        resourceAttributes.connection = {
            value: resourceAttributes.connection,
            isBlock: true,
        };
    }
    const { provisioner, dynamic, ...otherAttrs } = resourceAttributes;
    const hcl = [`resource "${resourceType}" "${resourceName}" {`];
    const attrs = renderAttributes(otherAttrs);
    if (attrs)
        hcl.push(attrs);
    if (provisioner)
        hcl.push(renderProvisionerBlock(provisioner));
    if (dynamic)
        hcl.push(...renderDynamicBlocks(dynamic));
    hcl.push("}");
    return {
        hcl: hcl.join("\n"),
        metadata: {
            resource: {
                [resourceType]: {
                    [resourceName]: {
                        "//": resourceAttributes["//"],
                    },
                },
            },
        },
    };
}
exports.renderResource = renderResource;
/**
 *
 */
function renderDatasource(dataSource) {
    const dataSourceType = Object.keys(dataSource)[0];
    const dataSourcesWithType = dataSource[dataSourceType];
    const dataSourceName = Object.keys(dataSourcesWithType)[0];
    const dataSourceAttributes = dataSourcesWithType[dataSourceName];
    const { dynamic, ...otherAttrs } = dataSourceAttributes;
    const hcl = [`data "${dataSourceType}" "${dataSourceName}" {`];
    const attrs = renderAttributes(otherAttrs);
    if (attrs)
        hcl.push(attrs);
    if (dynamic)
        hcl.push(...renderDynamicBlocks(dynamic));
    hcl.push("}");
    return {
        hcl: hcl.join("\n"),
        metadata: {
            data: {
                [dataSourceType]: {
                    [dataSourceName]: {
                        "//": dataSourceAttributes["//"],
                    },
                },
            },
        },
    };
}
exports.renderDatasource = renderDatasource;
/**
 *
 */
function renderProvisionerBlock(provisioners) {
    return provisioners
        .map((provisioner) => {
        const provisionerType = Object.keys(provisioner)[0];
        const provisionerAttrs = provisioner[provisionerType];
        if (provisionerAttrs.connection) {
            provisionerAttrs.connection = {
                value: provisionerAttrs.connection,
                isBlock: true,
            };
        }
        const { dynamic, ...otherAttrs } = provisionerAttrs;
        const hcl = [`provisioner "${provisionerType}" {`];
        const attrs = renderAttributes(otherAttrs.value || otherAttrs);
        if (attrs)
            hcl.push(attrs);
        if (dynamic)
            hcl.push(...renderDynamicBlocks(dynamic));
        hcl.push("}");
        return hcl.join("\n");
    })
        .join("\n\n");
}
exports.renderProvisionerBlock = renderProvisionerBlock;
/**
 *
 */
function renderDynamicBlocks(dynamic) {
    return Object.entries(dynamic).map(([dynamicName, dynamicAttrs]) => {
        const res = [`dynamic "${dynamicName}" {`];
        res.push(`for_each = ${renderFuzzyJsonExpression(dynamicAttrs?.for_each)}`);
        if (dynamicAttrs?.iterator) {
            res.push(`iterator = ${dynamicAttrs?.iterator}`);
        }
        if (dynamicAttrs?.labels) {
            res.push(`labels = ${renderFuzzyJsonExpression(dynamicAttrs?.labels)}`);
        }
        res.push(`content {
  ${renderAttributes(dynamicAttrs.content)}
  }`);
        res.push(`}`);
        return res.join("\n");
    });
}
exports.renderDynamicBlocks = renderDynamicBlocks;
/**
 *
 */
function renderProvider(provider) {
    const providerName = Object.keys(provider)[0];
    const providerAttributes = provider[providerName];
    return providerAttributes
        .map((providerInstance) => {
        const { dynamic, ...otherAttrs } = providerInstance;
        const hcl = [`provider "${providerName}" {`];
        const attrs = renderAttributes(otherAttrs);
        if (attrs)
            hcl.push(attrs);
        if (dynamic)
            hcl.push(...renderDynamicBlocks(dynamic));
        hcl.push("}");
        return hcl.join("\n");
    })
        .join("\n\n");
}
exports.renderProvider = renderProvider;
/**
 *
 */
function renderModule(module) {
    const moduleName = Object.keys(module)[0];
    const moduleAttributes = module[moduleName];
    return {
        hcl: `module "${moduleName}" {
${renderAttributes(moduleAttributes)}
}`,
        metadata: {
            module: {
                [moduleName]: {
                    "//": moduleAttributes["//"],
                },
            },
        },
    };
}
exports.renderModule = renderModule;
/**
 *
 */
function renderOutput(output) {
    const outputName = Object.keys(output)[0];
    const outputAttributes = output[outputName];
    return `output "${outputName}" {
${renderAttributes(outputAttributes)}
}`;
}
exports.renderOutput = renderOutput;
/**
 *
 */
function renderLocals(locals) {
    const localName = Object.keys(locals)[0];
    const localAttributes = locals[localName];
    if (localAttributes.value === undefined) {
        return "";
    }
    return `locals {
    ${localName} = ${renderFuzzyJsonExpression(localAttributes.value)}
}`;
}
exports.renderLocals = renderLocals;
/**
 *
 */
function renderVariable(variable) {
    const variableName = Object.keys(variable)[0];
    const variableAttributes = variable[variableName];
    return `variable "${variableName}" {
${renderAttributes(variableAttributes)}
}`;
}
exports.renderVariable = renderVariable;
/**
 *
 */
function renderMoved(move) {
    const movedBlocks = move.map((moveBlock) => {
        return `moved {
${renderAttributes(moveBlock)}
}`;
    });
    return movedBlocks.join("\n");
}
exports.renderMoved = renderMoved;
/**
 *
 */
function renderImport(imports) {
    const importBlocks = imports.map((importBlock) => {
        return `import {
${renderAttributes(importBlock)}
}`;
    });
    return importBlocks.join("\n");
}
exports.renderImport = renderImport;
/**
 *
 */
function renderTerraform(terraform) {
    const blockAttributes = ["required_providers", "backend", "cloud"];
    const requiredProviders = `required_providers {
${renderSimpleAttributes(terraform.required_providers)}
}`;
    const backends = Object.keys(terraform.backend || {}).map((backendName) => {
        return `backend "${backendName}" {
${renderAttributes(terraform.backend[backendName])}
}`;
    });
    const cloudBackend = terraform.cloud
        ? `cloud {
${renderAttributes(terraform.cloud)}
}`
        : undefined;
    const otherAttributes = Object.keys(terraform).filter((key) => !blockAttributes.includes(key));
    return `terraform {
${requiredProviders}
${[...backends, cloudBackend].join("\n")}
${renderSimpleAttributes(otherAttributes)}
}`;
}
exports.renderTerraform = renderTerraform;
/**
 *
 */
function renderBlock(block, _storageClassType) {
    return `{
${renderAttributes(block)}
}`;
}
exports.renderBlock = renderBlock;
/**
 *
 */
function renderFuzzyJsonObject(jsonObject) {
    return [
        "{",
        ...Object.entries(jsonObject).map(([name, value]) => {
            return `${name} = ${renderFuzzyJsonExpression(value)}`;
        }),
        "}",
    ].join("\n");
}
/**
 *
 */
function renderFuzzyJsonExpression(jsonExpression) {
    if (Array.isArray(jsonExpression)) {
        return [
            "[",
            ...jsonExpression.map((value) => `${renderFuzzyJsonExpression(value)},`),
            "]",
        ].join("\n");
    }
    if (typeof jsonExpression === "object") {
        return renderFuzzyJsonObject(jsonExpression);
    }
    if (!jsonExpression) {
        return "";
    }
    if (typeof jsonExpression === "string") {
        if (jsonExpression.includes("${")) {
            return `"${jsonExpression}"`;
        }
        if (parseInt(jsonExpression, 10).toString() === jsonExpression) {
            return jsonExpression;
        }
        if (jsonExpression.startsWith("[")) {
            return jsonExpression;
        }
        if (jsonExpression.startsWith("{")) {
            return jsonExpression;
        }
        if (jsonExpression.startsWith('"')) {
            return jsonExpression;
        }
        return `"${escapeQuotes(jsonExpression)}"`;
    }
    if (jsonExpression === "true" || jsonExpression === "false") {
        return jsonExpression;
    }
    if (jsonExpression === "null") {
        return jsonExpression;
    }
    return `${jsonExpression}`;
}
/**
 *
 */
function renderSimpleAttributes(attributes) {
    if (attributes === undefined) {
        return "";
    }
    return Object.entries(attributes)
        .map(([name, value]) => `  ${name} = ${renderFuzzyJsonExpression(value)}`)
        .join("\n");
}
exports.renderSimpleAttributes = renderSimpleAttributes;
/**
 *
 */
function renderAttributes(attributes) {
    if (attributes === undefined || attributes === null) {
        return "";
    }
    return Object.entries(attributes)
        .map(([name, v]) => {
        if (name === "//") {
            return undefined;
        }
        const metaBlocks = ["lifecycle", "provisioner"];
        //
        // We might have some attributes that don't have type information
        // just try to guess them
        if (typeof v === "string" || typeof v === "number") {
            return `${name} = ${renderFuzzyJsonExpression(v)}`;
        }
        else if (Array.isArray(v)) {
            return `${name} = ${renderFuzzyJsonExpression(v)}`;
        }
        else if (v === null) {
            return `${name} = null`;
            // eslint-disable-next-line no-prototype-builtins
        }
        else if (typeof v === "object" &&
            // eslint-disable-next-line no-prototype-builtins
            !v.hasOwnProperty("value") &&
            // eslint-disable-next-line no-prototype-builtins
            !v.hasOwnProperty("dynamic")) {
            if (metaBlocks.includes(name)) {
                return `${name} { 
${renderSimpleAttributes(v)}
}`;
            }
            return `${name} = ${renderFuzzyJsonExpression(v)}`;
        }
        else if (v === undefined) {
            return undefined;
        }
        // Referencing both isBlock and is_block, because sometimes we pass through a snake case filter
        // within attributes.
        const { dynamic, value, type, isBlock, storageClassType, is_block, storage_class_type, } = v;
        const block = isBlock || is_block || metaBlocks.includes(name);
        const classType = storageClassType || storage_class_type;
        if (dynamic) {
            return renderDynamicBlocks({
                [name]: dynamic.value,
            });
        }
        // Short circuit type checking if value is an expression
        if (typeof value === "string" && value.includes("${")) {
            return `${name} = ${renderString(value)}`;
        }
        if (block && type !== "list" && type !== "set") {
            return `${name} { 
${renderAttributes(value)} 
}`;
        }
        if (type === "list" || type === "set") {
            if (block) {
                return renderList(v, name);
            }
            return `${name} = ${renderList(v)}`;
        }
        if (type === "map") {
            return `${name} = ${renderMap(value)}`;
        }
        if (type === "simple") {
            if (classType === "string") {
                return `${name} = ${renderString(value)}`;
            }
            if (classType === "number" || classType === "boolean") {
                return `${name} = ${value}`;
            }
        }
        if (type === "any") {
            return `${name} = ${renderFuzzyJsonExpression(value)}`;
        }
        if (type === "reference") {
            return `${name} = ${value}`;
        }
        return `${name} = ${value}`;
    })
        .filter((v) => v !== undefined)
        .join("\n");
}
exports.renderAttributes = renderAttributes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVuZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7R0FHRztBQUNILDJDQUErQztBQUUvQzs7R0FFRztBQUNILFNBQVMsWUFBWSxDQUFDLEdBQVc7SUFDL0IsbURBQW1EO0lBQ25ELElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ3RCLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUNELE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBUyxZQUFZLENBQUMsR0FBVztJQUMvQixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDVCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRSxDQUFDO1FBQzVCLE1BQU0sSUFBSSxLQUFLLENBQ2IsdUVBQXVFLENBQ3hFLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUV2QyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUFFLE9BQU8sSUFBSSxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUV4RCxPQUFPLFVBQVUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDdkUsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsZ0JBQWdCLENBQUMsS0FBVTtJQUN6QyxNQUFNLEdBQUcsR0FBNEIsRUFBRSxDQUFDO0lBRXhDLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFD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SSxTQUFTLEtBQUssUUFBUSxJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUUsQ0FBQztnQkFDdEQsT0FBTyxHQUFHLElBQUksTUFBTSxLQUFLLEVBQUUsQ0FBQztZQUM5QixDQUFDO1FBQ0gsQ0FBQztRQUVELElBQUksSUFBSSxLQUFLLEtBQUssRUFBRSxDQUFDO1lBQ25CLE9BQU8sR0FBRyxJQUFJLE1BQU0seUJBQXlCLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUN6RCxDQUFDO1FBRUQsSUFBSSxJQUFJLEtBQUssV0FBVyxFQUFFLENBQUM7WUFDekIsT0FBTyxHQUFHLElBQUksTUFBTSxLQUFLLEVBQUUsQ0FBQztRQUM5QixDQUFDO1FBRUQsT0FBTyxHQUFHLElBQUksTUFBTSxLQUFLLEVBQUUsQ0FBQztJQUM5QixDQUFDLENBQUM7U0FDRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUM7U0FDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hCLENBQUM7QUFsR0QsNENBa0dDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEhhc2hpQ29ycCwgSW5jLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1QTC0yLjBcbiAqL1xuaW1wb3J0IHsgVG9rZW5pemF0aW9uIH0gZnJvbSBcIi4uL3Rva2Vucy90b2tlblwiO1xuXG4vKipcbiAqXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVF1b3RlcyhzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIC8vIERvbid0IGF0dGVtcHQgdG8gZXNjYXBlIGlmIHdlIGhhdmUgYW4gZXhwcmVzc2lvblxuICBpZiAoc3RyLm1hdGNoKC9cXCRcXHsvKSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oPzwhXFxcXClcIi9nLCAnXFxcXFwiJyk7XG59XG5cbi8qKlxuICpcbiAqL1xuZnVuY3Rpb24gcmVuZGVyU3RyaW5nKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKCFzdHIpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIlVuYWJsZSB0byBwcm9jZXNzIGF0dHJpYnV0ZSB0aGF0IHNob3VsZCBoYXZlIGJlZW4gYSBzdHJpbmcsIGJ1dCBpc24ndFwiXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGxpbmVzID0gc3RyLnNwbGl0KC9cXHJcXG58W1xcblxccl0vKTtcblxuICBpZiAobGluZXMubGVuZ3RoID09PSAxKSByZXR1cm4gYFwiJHtlc2NhcGVRdW90ZXMoc3RyKX1cImA7XG5cbiAgcmV0dXJuIGA8PEVPRlxcbiR7bGluZXMubWFwKChzKSA9PiBlc2NhcGVRdW90ZXMocykpLmpvaW4oXCJcXG5cIil9XFxuRU9GYDtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYW5Gb3JNZXRhZGF0YShibG9jazogYW55KTogYW55IHtcbiAgY29uc3QgcmVzOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSA9IHt9O1xuXG4gIGlmICh0eXBlb2YgYmxvY2sgIT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkoYmxvY2spKSB7XG4gICAgcmV0dXJuIGJsb2NrO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYmxvY2spKSB7XG4gICAgcmV0dXJuIGJsb2NrLm1hcCgoaSkgPT4gY2xlYW5Gb3JNZXRhZGF0YShpKSk7XG4gIH1cblxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYmxvY2spO1xuXG4gIGlmIChrZXlzLmluY2x1ZGVzKFwidmFsdWVcIikpIHtcbiAgICByZXR1cm4gY2xlYW5Gb3JNZXRhZGF0YShibG9jay52YWx1ZSk7XG4gIH1cblxuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgY29uc3QgdmFsdWUgPSBibG9ja1trZXldO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIC8vIGlmIHRoZSB2YWx1ZSBpcyBhIHJlc29sdmFibGUgd2UgZG9uJ3Qgd2FudCB0byByZWN1cnNlIGludG8gaXRcbiAgICAgIGlmIChUb2tlbml6YXRpb24uaXNSZXNvbHZhYmxlKHZhbHVlKSkge1xuICAgICAgICByZXNba2V5XSA9IHt9O1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcmVzW2tleV0gPSBjbGVhbkZvck1ldGFkYXRhKHZhbHVlKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgIHZhbHVlICE9IG51bGwgJiZcbiAgICAgIEFycmF5LmlzQXJyYXkodmFsdWUpXG4gICAgKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXNba2V5XSkpIHtcbiAgICAgICAgcmVzW2tleV0gPSBbLi4ucmVzW2tleV0sIC4uLnZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc1trZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBkZWxldGUgcmVzW2tleV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1trZXldID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckxpc3QodjogYW55LCBuYW1lPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgeyBpc0Jsb2NrLCBpc19ibG9jaywgdmFsdWUsIHN0b3JhZ2VfY2xhc3NfdHlwZSwgc3RvcmFnZUNsYXNzVHlwZSB9ID0gdjtcbiAgY29uc3QgYmxvY2sgPSBpc0Jsb2NrIHx8IGlzX2Jsb2NrO1xuICBjb25zdCBjbGFzc1R5cGUgPSBzdG9yYWdlQ2xhc3NUeXBlIHx8IHN0b3JhZ2VfY2xhc3NfdHlwZTtcblxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIC8vIHRoaXMgY291bGQgYmUgYW4gZXhwcmVzc2lvbiwgc28gd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZyBoZXJlXG4gICAgcmV0dXJuIHJlbmRlclN0cmluZyh2YWx1ZSk7XG4gIH1cblxuICBpZiAobmFtZSkge1xuICAgIGlmIChibG9jaykge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gYCR7bmFtZX0ge2AgKyBgXFxuJHtyZW5kZXJBdHRyaWJ1dGVzKHZhbHVlKX1cXG59YDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgIC5tYXAoKHY6IGFueSkgPT4ge1xuICAgICAgICAgIHJldHVybiBgJHtuYW1lfSB7YCArIGBcXG4ke3JlbmRlckF0dHJpYnV0ZXModil9XFxufWA7XG4gICAgICAgIH0pXG4gICAgICAgIC5qb2luKFwiXFxuXCIpO1xuICAgIH1cblxuICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBgJHtuYW1lfSA9ICR7cmVuZGVyTGlzdFZhbHVlKHZhbHVlLCBjbGFzc1R5cGUpfWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGAke25hbWV9ID0gW1xuJHt2YWx1ZS5tYXAoKHY6IGFueSkgPT4gcmVuZGVyTGlzdFZhbHVlKHYsIGNsYXNzVHlwZSkpLmpvaW4oXCIsXFxuXCIpfVxuXWA7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gQSBsaXN0IHR5cGUgb2Ygb25seSBhIHNpbmdsZSBpdGVtXG4gICAgcmV0dXJuIHJlbmRlckxpc3RWYWx1ZSh2YWx1ZSwgY2xhc3NUeXBlKTtcbiAgfVxuXG4gIGlmIChibG9jaykge1xuICAgIHJldHVybiB2YWx1ZS5tYXAoKHY6IGFueSkgPT4gcmVuZGVyTGlzdFZhbHVlKHYsIGNsYXNzVHlwZSkpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gYFtcbiR7dmFsdWUubWFwKCh2OiBhbnkpID0+IHJlbmRlckxpc3RWYWx1ZSh2LCBjbGFzc1R5cGUpKS5qb2luKFwiLFxcblwiKX1cbl1gO1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJMaXN0VmFsdWUodmFsdWU6IGFueSwgc3RvcmFnZUNsYXNzVHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKHN0b3JhZ2VDbGFzc1R5cGUgPT09IFwic3RyaW5nTGlzdFwiKSB7XG4gICAgcmV0dXJuIHJlbmRlclN0cmluZyh2YWx1ZSk7XG4gIH1cbiAgaWYgKHN0b3JhZ2VDbGFzc1R5cGUgPT09IFwibnVtYmVyTGlzdFwiIHx8IHN0b3JhZ2VDbGFzc1R5cGUgPT09IFwiYm9vbGVhbkxpc3RcIikge1xuICAgIHJldHVybiBgJHt2YWx1ZX1gO1xuICB9XG5cbiAgcmV0dXJuIHJlbmRlckJsb2NrKHZhbHVlLCBzdG9yYWdlQ2xhc3NUeXBlKTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyTWFwKG1hcDogYW55KTogc3RyaW5nIHtcbiAgaWYgKHR5cGVvZiBtYXAgPT09IFwic3RyaW5nXCIpIHtcbiAgICAvLyB0aGlzIGNvdWxkIGJlIGFuIGV4cHJlc3Npb24sIHNvIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcgaGVyZVxuICAgIHJldHVybiBgXCIke2VzY2FwZVF1b3RlcyhtYXApfVwiYDtcbiAgfVxuICByZXR1cm4gYHtcbiR7T2JqZWN0LmVudHJpZXMobWFwKVxuICAubWFwKChbaywgdl0pID0+IGAke2t9ID0gJHtyZW5kZXJNYXBWYWx1ZSh2KX1gKVxuICAuam9pbihcIlxcblwiKX1cbn1gO1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJNYXBWYWx1ZSh2YWx1ZTogYW55KTogc3RyaW5nIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiByZW5kZXJTdHJpbmcodmFsdWUpO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gYCR7dmFsdWV9YDtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIikge1xuICAgIHJldHVybiBgJHt2YWx1ZX1gO1xuICB9XG5cbiAgcmV0dXJuIGAke3ZhbHVlfWA7XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclJlc291cmNlKHJlc291cmNlOiBhbnkpIHtcbiAgY29uc3QgcmVzb3VyY2VUeXBlID0gT2JqZWN0LmtleXMocmVzb3VyY2UpWzBdO1xuICBjb25zdCByZXNvdXJjZXNXaXRoVHlwZSA9IHJlc291cmNlW3Jlc291cmNlVHlwZV07XG4gIGNvbnN0IHJlc291cmNlTmFtZSA9IE9iamVjdC5rZXlzKHJlc291cmNlc1dpdGhUeXBlKVswXTtcbiAgY29uc3QgcmVzb3VyY2VBdHRyaWJ1dGVzID0gcmVzb3VyY2VzV2l0aFR5cGVbcmVzb3VyY2VOYW1lXTtcblxuICBpZiAocmVzb3VyY2VBdHRyaWJ1dGVzLmNvbm5lY3Rpb24pIHtcbiAgICByZXNvdXJjZUF0dHJpYnV0ZXMuY29ubmVjdGlvbiA9IHtcbiAgICAgIHZhbHVlOiByZXNvdXJjZUF0dHJpYnV0ZXMuY29ubmVjdGlvbixcbiAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IHsgcHJvdmlzaW9uZXIsIGR5bmFtaWMsIC4uLm90aGVyQXR0cnMgfSA9IHJlc291cmNlQXR0cmlidXRlcztcblxuICBjb25zdCBoY2wgPSBbYHJlc291cmNlIFwiJHtyZXNvdXJjZVR5cGV9XCIgXCIke3Jlc291cmNlTmFtZX1cIiB7YF07XG5cbiAgY29uc3QgYXR0cnMgPSByZW5kZXJBdHRyaWJ1dGVzKG90aGVyQXR0cnMpO1xuXG4gIGlmIChhdHRycykgaGNsLnB1c2goYXR0cnMpO1xuICBpZiAocHJvdmlzaW9uZXIpIGhjbC5wdXNoKHJlbmRlclByb3Zpc2lvbmVyQmxvY2socHJvdmlzaW9uZXIpKTtcbiAgaWYgKGR5bmFtaWMpIGhjbC5wdXNoKC4uLnJlbmRlckR5bmFtaWNCbG9ja3MoZHluYW1pYykpO1xuXG4gIGhjbC5wdXNoKFwifVwiKTtcblxuICByZXR1cm4ge1xuICAgIGhjbDogaGNsLmpvaW4oXCJcXG5cIiksXG4gICAgbWV0YWRhdGE6IHtcbiAgICAgIHJlc291cmNlOiB7XG4gICAgICAgIFtyZXNvdXJjZVR5cGVdOiB7XG4gICAgICAgICAgW3Jlc291cmNlTmFtZV06IHtcbiAgICAgICAgICAgIFwiLy9cIjogcmVzb3VyY2VBdHRyaWJ1dGVzW1wiLy9cIl0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyRGF0YXNvdXJjZShkYXRhU291cmNlOiBhbnkpIHtcbiAgY29uc3QgZGF0YVNvdXJjZVR5cGUgPSBPYmplY3Qua2V5cyhkYXRhU291cmNlKVswXTtcbiAgY29uc3QgZGF0YVNvdXJjZXNXaXRoVHlwZSA9IGRhdGFTb3VyY2VbZGF0YVNvdXJjZVR5cGVdO1xuICBjb25zdCBkYXRhU291cmNlTmFtZSA9IE9iamVjdC5rZXlzKGRhdGFTb3VyY2VzV2l0aFR5cGUpWzBdO1xuICBjb25zdCBkYXRhU291cmNlQXR0cmlidXRlcyA9IGRhdGFTb3VyY2VzV2l0aFR5cGVbZGF0YVNvdXJjZU5hbWVdO1xuXG4gIGNvbnN0IHsgZHluYW1pYywgLi4ub3RoZXJBdHRycyB9ID0gZGF0YVNvdXJjZUF0dHJpYnV0ZXM7XG5cbiAgY29uc3QgaGNsID0gW2BkYXRhIFwiJHtkYXRhU291cmNlVHlwZX1cIiBcIiR7ZGF0YVNvdXJjZU5hbWV9XCIge2BdO1xuXG4gIGNvbnN0IGF0dHJzID0gcmVuZGVyQXR0cmlidXRlcyhvdGhlckF0dHJzKTtcbiAgaWYgKGF0dHJzKSBoY2wucHVzaChhdHRycyk7XG4gIGlmIChkeW5hbWljKSBoY2wucHVzaCguLi5yZW5kZXJEeW5hbWljQmxvY2tzKGR5bmFtaWMpKTtcbiAgaGNsLnB1c2goXCJ9XCIpO1xuXG4gIHJldHVybiB7XG4gICAgaGNsOiBoY2wuam9pbihcIlxcblwiKSxcbiAgICBtZXRhZGF0YToge1xuICAgICAgZGF0YToge1xuICAgICAgICBbZGF0YVNvdXJjZVR5cGVdOiB7XG4gICAgICAgICAgW2RhdGFTb3VyY2VOYW1lXToge1xuICAgICAgICAgICAgXCIvL1wiOiBkYXRhU291cmNlQXR0cmlidXRlc1tcIi8vXCJdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclByb3Zpc2lvbmVyQmxvY2socHJvdmlzaW9uZXJzOiBhbnkpIHtcbiAgcmV0dXJuIHByb3Zpc2lvbmVyc1xuICAgIC5tYXAoKHByb3Zpc2lvbmVyOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IHByb3Zpc2lvbmVyVHlwZSA9IE9iamVjdC5rZXlzKHByb3Zpc2lvbmVyKVswXTtcbiAgICAgIGNvbnN0IHByb3Zpc2lvbmVyQXR0cnMgPSBwcm92aXNpb25lcltwcm92aXNpb25lclR5cGVdO1xuXG4gICAgICBpZiAocHJvdmlzaW9uZXJBdHRycy5jb25uZWN0aW9uKSB7XG4gICAgICAgIHByb3Zpc2lvbmVyQXR0cnMuY29ubmVjdGlvbiA9IHtcbiAgICAgICAgICB2YWx1ZTogcHJvdmlzaW9uZXJBdHRycy5jb25uZWN0aW9uLFxuICAgICAgICAgIGlzQmxvY2s6IHRydWUsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgZHluYW1pYywgLi4ub3RoZXJBdHRycyB9ID0gcHJvdmlzaW9uZXJBdHRycztcblxuICAgICAgY29uc3QgaGNsID0gW2Bwcm92aXNpb25lciBcIiR7cHJvdmlzaW9uZXJUeXBlfVwiIHtgXTtcblxuICAgICAgY29uc3QgYXR0cnMgPSByZW5kZXJBdHRyaWJ1dGVzKG90aGVyQXR0cnMudmFsdWUgfHwgb3RoZXJBdHRycyk7XG4gICAgICBpZiAoYXR0cnMpIGhjbC5wdXNoKGF0dHJzKTtcbiAgICAgIGlmIChkeW5hbWljKSBoY2wucHVzaCguLi5yZW5kZXJEeW5hbWljQmxvY2tzKGR5bmFtaWMpKTtcbiAgICAgIGhjbC5wdXNoKFwifVwiKTtcblxuICAgICAgcmV0dXJuIGhjbC5qb2luKFwiXFxuXCIpO1xuICAgIH0pXG4gICAgLmpvaW4oXCJcXG5cXG5cIik7XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckR5bmFtaWNCbG9ja3MoZHluYW1pYzogYW55KSB7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhkeW5hbWljKS5tYXAoXG4gICAgKFtkeW5hbWljTmFtZSwgZHluYW1pY0F0dHJzXTogW3N0cmluZywgYW55XSkgPT4ge1xuICAgICAgY29uc3QgcmVzID0gW2BkeW5hbWljIFwiJHtkeW5hbWljTmFtZX1cIiB7YF07XG4gICAgICByZXMucHVzaChcbiAgICAgICAgYGZvcl9lYWNoID0gJHtyZW5kZXJGdXp6eUpzb25FeHByZXNzaW9uKGR5bmFtaWNBdHRycz8uZm9yX2VhY2gpfWBcbiAgICAgICk7XG4gICAgICBpZiAoZHluYW1pY0F0dHJzPy5pdGVyYXRvcikge1xuICAgICAgICByZXMucHVzaChgaXRlcmF0b3IgPSAke2R5bmFtaWNBdHRycz8uaXRlcmF0b3J9YCk7XG4gICAgICB9XG4gICAgICBpZiAoZHluYW1pY0F0dHJzPy5sYWJlbHMpIHtcbiAgICAgICAgcmVzLnB1c2goYGxhYmVscyA9ICR7cmVuZGVyRnV6enlKc29uRXhwcmVzc2lvbihkeW5hbWljQXR0cnM/LmxhYmVscyl9YCk7XG4gICAgICB9XG4gICAgICByZXMucHVzaChgY29udGVudCB7XG4gICR7cmVuZGVyQXR0cmlidXRlcyhkeW5hbWljQXR0cnMuY29udGVudCl9XG4gIH1gKTtcbiAgICAgIHJlcy5wdXNoKGB9YCk7XG5cbiAgICAgIHJldHVybiByZXMuam9pbihcIlxcblwiKTtcbiAgICB9XG4gICk7XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclByb3ZpZGVyKHByb3ZpZGVyOiBhbnkpIHtcbiAgY29uc3QgcHJvdmlkZXJOYW1lID0gT2JqZWN0LmtleXMocHJvdmlkZXIpWzBdO1xuICBjb25zdCBwcm92aWRlckF0dHJpYnV0ZXMgPSBwcm92aWRlcltwcm92aWRlck5hbWVdO1xuXG4gIHJldHVybiBwcm92aWRlckF0dHJpYnV0ZXNcbiAgICAubWFwKChwcm92aWRlckluc3RhbmNlOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IHsgZHluYW1pYywgLi4ub3RoZXJBdHRycyB9ID0gcHJvdmlkZXJJbnN0YW5jZTtcblxuICAgICAgY29uc3QgaGNsID0gW2Bwcm92aWRlciBcIiR7cHJvdmlkZXJOYW1lfVwiIHtgXTtcblxuICAgICAgY29uc3QgYXR0cnMgPSByZW5kZXJBdHRyaWJ1dGVzKG90aGVyQXR0cnMpO1xuICAgICAgaWYgKGF0dHJzKSBoY2wucHVzaChhdHRycyk7XG4gICAgICBpZiAoZHluYW1pYykgaGNsLnB1c2goLi4ucmVuZGVyRHluYW1pY0Jsb2NrcyhkeW5hbWljKSk7XG5cbiAgICAgIGhjbC5wdXNoKFwifVwiKTtcblxuICAgICAgcmV0dXJuIGhjbC5qb2luKFwiXFxuXCIpO1xuICAgIH0pXG4gICAgLmpvaW4oXCJcXG5cXG5cIik7XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlck1vZHVsZShtb2R1bGU6IGFueSkge1xuICBjb25zdCBtb2R1bGVOYW1lID0gT2JqZWN0LmtleXMobW9kdWxlKVswXTtcbiAgY29uc3QgbW9kdWxlQXR0cmlidXRlcyA9IG1vZHVsZVttb2R1bGVOYW1lXTtcblxuICByZXR1cm4ge1xuICAgIGhjbDogYG1vZHVsZSBcIiR7bW9kdWxlTmFtZX1cIiB7XG4ke3JlbmRlckF0dHJpYnV0ZXMobW9kdWxlQXR0cmlidXRlcyl9XG59YCxcbiAgICBtZXRhZGF0YToge1xuICAgICAgbW9kdWxlOiB7XG4gICAgICAgIFttb2R1bGVOYW1lXToge1xuICAgICAgICAgIFwiLy9cIjogbW9kdWxlQXR0cmlidXRlc1tcIi8vXCJdLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJPdXRwdXQob3V0cHV0OiBhbnkpIHtcbiAgY29uc3Qgb3V0cHV0TmFtZSA9IE9iamVjdC5rZXlzKG91dHB1dClbMF07XG4gIGNvbnN0IG91dHB1dEF0dHJpYnV0ZXMgPSBvdXRwdXRbb3V0cHV0TmFtZV07XG5cbiAgcmV0dXJuIGBvdXRwdXQgXCIke291dHB1dE5hbWV9XCIge1xuJHtyZW5kZXJBdHRyaWJ1dGVzKG91dHB1dEF0dHJpYnV0ZXMpfVxufWA7XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckxvY2Fscyhsb2NhbHM6IGFueSkge1xuICBjb25zdCBsb2NhbE5hbWUgPSBPYmplY3Qua2V5cyhsb2NhbHMpWzBdO1xuICBjb25zdCBsb2NhbEF0dHJpYnV0ZXMgPSBsb2NhbHNbbG9jYWxOYW1lXTtcblxuICBpZiAobG9jYWxBdHRyaWJ1dGVzLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIHJldHVybiBgbG9jYWxzIHtcbiAgICAke2xvY2FsTmFtZX0gPSAke3JlbmRlckZ1enp5SnNvbkV4cHJlc3Npb24obG9jYWxBdHRyaWJ1dGVzLnZhbHVlKX1cbn1gO1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJWYXJpYWJsZSh2YXJpYWJsZTogYW55KSB7XG4gIGNvbnN0IHZhcmlhYmxlTmFtZSA9IE9iamVjdC5rZXlzKHZhcmlhYmxlKVswXTtcbiAgY29uc3QgdmFyaWFibGVBdHRyaWJ1dGVzID0gdmFyaWFibGVbdmFyaWFibGVOYW1lXTtcblxuICByZXR1cm4gYHZhcmlhYmxlIFwiJHt2YXJpYWJsZU5hbWV9XCIge1xuJHtyZW5kZXJBdHRyaWJ1dGVzKHZhcmlhYmxlQXR0cmlidXRlcyl9XG59YDtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyTW92ZWQobW92ZTogYW55KSB7XG4gIGNvbnN0IG1vdmVkQmxvY2tzID0gbW92ZS5tYXAoKG1vdmVCbG9jazogYW55KSA9PiB7XG4gICAgcmV0dXJuIGBtb3ZlZCB7XG4ke3JlbmRlckF0dHJpYnV0ZXMobW92ZUJsb2NrKX1cbn1gO1xuICB9KTtcblxuICByZXR1cm4gbW92ZWRCbG9ja3Muam9pbihcIlxcblwiKTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVySW1wb3J0KGltcG9ydHM6IGFueSkge1xuICBjb25zdCBpbXBvcnRCbG9ja3MgPSBpbXBvcnRzLm1hcCgoaW1wb3J0QmxvY2s6IGFueSkgPT4ge1xuICAgIHJldHVybiBgaW1wb3J0IHtcbiR7cmVuZGVyQXR0cmlidXRlcyhpbXBvcnRCbG9jayl9XG59YDtcbiAgfSk7XG5cbiAgcmV0dXJuIGltcG9ydEJsb2Nrcy5qb2luKFwiXFxuXCIpO1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJUZXJyYWZvcm0odGVycmFmb3JtOiBhbnkpIHtcbiAgY29uc3QgYmxvY2tBdHRyaWJ1dGVzID0gW1wicmVxdWlyZWRfcHJvdmlkZXJzXCIsIFwiYmFja2VuZFwiLCBcImNsb3VkXCJdO1xuICBjb25zdCByZXF1aXJlZFByb3ZpZGVycyA9IGByZXF1aXJlZF9wcm92aWRlcnMge1xuJHtyZW5kZXJTaW1wbGVBdHRyaWJ1dGVzKHRlcnJhZm9ybS5yZXF1aXJlZF9wcm92aWRlcnMpfVxufWA7XG5cbiAgY29uc3QgYmFja2VuZHMgPSBPYmplY3Qua2V5cyh0ZXJyYWZvcm0uYmFja2VuZCB8fCB7fSkubWFwKChiYWNrZW5kTmFtZSkgPT4ge1xuICAgIHJldHVybiBgYmFja2VuZCBcIiR7YmFja2VuZE5hbWV9XCIge1xuJHtyZW5kZXJBdHRyaWJ1dGVzKHRlcnJhZm9ybS5iYWNrZW5kW2JhY2tlbmROYW1lXSl9XG59YDtcbiAgfSk7XG5cbiAgY29uc3QgY2xvdWRCYWNrZW5kID0gdGVycmFmb3JtLmNsb3VkXG4gICAgPyBgY2xvdWQge1xuJHtyZW5kZXJBdHRyaWJ1dGVzKHRlcnJhZm9ybS5jbG91ZCl9XG59YFxuICAgIDogdW5kZWZpbmVkO1xuXG4gIGNvbnN0IG90aGVyQXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKHRlcnJhZm9ybSkuZmlsdGVyKFxuICAgIChrZXkpID0+ICFibG9ja0F0dHJpYnV0ZXMuaW5jbHVkZXMoa2V5KVxuICApO1xuICByZXR1cm4gYHRlcnJhZm9ybSB7XG4ke3JlcXVpcmVkUHJvdmlkZXJzfVxuJHtbLi4uYmFja2VuZHMsIGNsb3VkQmFja2VuZF0uam9pbihcIlxcblwiKX1cbiR7cmVuZGVyU2ltcGxlQXR0cmlidXRlcyhvdGhlckF0dHJpYnV0ZXMpfVxufWA7XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckJsb2NrKGJsb2NrOiBhbnksIF9zdG9yYWdlQ2xhc3NUeXBlOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYHtcbiR7cmVuZGVyQXR0cmlidXRlcyhibG9jayl9XG59YDtcbn1cblxuLyoqXG4gKlxuICovXG5mdW5jdGlvbiByZW5kZXJGdXp6eUpzb25PYmplY3QoanNvbk9iamVjdDogYW55KTogc3RyaW5nIHtcbiAgcmV0dXJuIFtcbiAgICBcIntcIixcbiAgICAuLi5PYmplY3QuZW50cmllcyhqc29uT2JqZWN0KS5tYXAoKFtuYW1lLCB2YWx1ZV0pID0+IHtcbiAgICAgIHJldHVybiBgJHtuYW1lfSA9ICR7cmVuZGVyRnV6enlKc29uRXhwcmVzc2lvbih2YWx1ZSl9YDtcbiAgICB9KSxcbiAgICBcIn1cIixcbiAgXS5qb2luKFwiXFxuXCIpO1xufVxuLyoqXG4gKlxuICovXG5mdW5jdGlvbiByZW5kZXJGdXp6eUpzb25FeHByZXNzaW9uKGpzb25FeHByZXNzaW9uOiBhbnkpOiBzdHJpbmcge1xuICBpZiAoQXJyYXkuaXNBcnJheShqc29uRXhwcmVzc2lvbikpIHtcbiAgICByZXR1cm4gW1xuICAgICAgXCJbXCIsXG4gICAgICAuLi5qc29uRXhwcmVzc2lvbi5tYXAoKHZhbHVlKSA9PiBgJHtyZW5kZXJGdXp6eUpzb25FeHByZXNzaW9uKHZhbHVlKX0sYCksXG4gICAgICBcIl1cIixcbiAgICBdLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBpZiAodHlwZW9mIGpzb25FeHByZXNzaW9uID09PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIHJlbmRlckZ1enp5SnNvbk9iamVjdChqc29uRXhwcmVzc2lvbik7XG4gIH1cblxuICBpZiAoIWpzb25FeHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICBpZiAodHlwZW9mIGpzb25FeHByZXNzaW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKGpzb25FeHByZXNzaW9uLmluY2x1ZGVzKFwiJHtcIikpIHtcbiAgICAgIHJldHVybiBgXCIke2pzb25FeHByZXNzaW9ufVwiYDtcbiAgICB9XG5cbiAgICBpZiAocGFyc2VJbnQoanNvbkV4cHJlc3Npb24sIDEwKS50b1N0cmluZygpID09PSBqc29uRXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIGpzb25FeHByZXNzaW9uO1xuICAgIH1cblxuICAgIGlmIChqc29uRXhwcmVzc2lvbi5zdGFydHNXaXRoKFwiW1wiKSkge1xuICAgICAgcmV0dXJuIGpzb25FeHByZXNzaW9uO1xuICAgIH1cblxuICAgIGlmIChqc29uRXhwcmVzc2lvbi5zdGFydHNXaXRoKFwie1wiKSkge1xuICAgICAgcmV0dXJuIGpzb25FeHByZXNzaW9uO1xuICAgIH1cblxuICAgIGlmIChqc29uRXhwcmVzc2lvbi5zdGFydHNXaXRoKCdcIicpKSB7XG4gICAgICByZXR1cm4ganNvbkV4cHJlc3Npb247XG4gICAgfVxuXG4gICAgcmV0dXJuIGBcIiR7ZXNjYXBlUXVvdGVzKGpzb25FeHByZXNzaW9uKX1cImA7XG4gIH1cblxuICBpZiAoanNvbkV4cHJlc3Npb24gPT09IFwidHJ1ZVwiIHx8IGpzb25FeHByZXNzaW9uID09PSBcImZhbHNlXCIpIHtcbiAgICByZXR1cm4ganNvbkV4cHJlc3Npb24gYXMgc3RyaW5nO1xuICB9XG5cbiAgaWYgKGpzb25FeHByZXNzaW9uID09PSBcIm51bGxcIikge1xuICAgIHJldHVybiBqc29uRXhwcmVzc2lvbjtcbiAgfVxuXG4gIHJldHVybiBgJHtqc29uRXhwcmVzc2lvbn1gO1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTaW1wbGVBdHRyaWJ1dGVzKGF0dHJpYnV0ZXM6IGFueSk6IHN0cmluZyB7XG4gIGlmIChhdHRyaWJ1dGVzID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVzKVxuICAgIC5tYXAoXG4gICAgICAoW25hbWUsIHZhbHVlXSkgPT5cbiAgICAgICAgYCAgJHtuYW1lfSA9ICR7cmVuZGVyRnV6enlKc29uRXhwcmVzc2lvbih2YWx1ZSBhcyBhbnkpfWBcbiAgICApXG4gICAgLmpvaW4oXCJcXG5cIik7XG59XG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJBdHRyaWJ1dGVzKGF0dHJpYnV0ZXM6IGFueSk6IHN0cmluZyB7XG4gIGlmIChhdHRyaWJ1dGVzID09PSB1bmRlZmluZWQgfHwgYXR0cmlidXRlcyA9PT0gbnVsbCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVzKVxuICAgIC5tYXAoKFtuYW1lLCB2XSkgPT4ge1xuICAgICAgaWYgKG5hbWUgPT09IFwiLy9cIikge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgY29uc3QgbWV0YUJsb2NrcyA9IFtcImxpZmVjeWNsZVwiLCBcInByb3Zpc2lvbmVyXCJdO1xuXG4gICAgICAvL1xuICAgICAgLy8gV2UgbWlnaHQgaGF2ZSBzb21lIGF0dHJpYnV0ZXMgdGhhdCBkb24ndCBoYXZlIHR5cGUgaW5mb3JtYXRpb25cbiAgICAgIC8vIGp1c3QgdHJ5IHRvIGd1ZXNzIHRoZW1cbiAgICAgIGlmICh0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gYCR7bmFtZX0gPSAke3JlbmRlckZ1enp5SnNvbkV4cHJlc3Npb24odil9YDtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgICByZXR1cm4gYCR7bmFtZX0gPSAke3JlbmRlckZ1enp5SnNvbkV4cHJlc3Npb24odil9YDtcbiAgICAgIH0gZWxzZSBpZiAodiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYCR7bmFtZX0gPSBudWxsYDtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgICAhdi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpICYmXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgICAgIXYuaGFzT3duUHJvcGVydHkoXCJkeW5hbWljXCIpXG4gICAgICApIHtcbiAgICAgICAgaWYgKG1ldGFCbG9ja3MuaW5jbHVkZXMobmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gYCR7bmFtZX0geyBcbiR7cmVuZGVyU2ltcGxlQXR0cmlidXRlcyh2KX1cbn1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtuYW1lfSA9ICR7cmVuZGVyRnV6enlKc29uRXhwcmVzc2lvbih2KX1gO1xuICAgICAgfSBlbHNlIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgLy8gUmVmZXJlbmNpbmcgYm90aCBpc0Jsb2NrIGFuZCBpc19ibG9jaywgYmVjYXVzZSBzb21ldGltZXMgd2UgcGFzcyB0aHJvdWdoIGEgc25ha2UgY2FzZSBmaWx0ZXJcbiAgICAgIC8vIHdpdGhpbiBhdHRyaWJ1dGVzLlxuICAgICAgY29uc3Qge1xuICAgICAgICBkeW5hbWljLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgaXNCbG9jayxcbiAgICAgICAgc3RvcmFnZUNsYXNzVHlwZSxcbiAgICAgICAgaXNfYmxvY2ssXG4gICAgICAgIHN0b3JhZ2VfY2xhc3NfdHlwZSxcbiAgICAgIH0gPSB2IGFzIGFueTtcbiAgICAgIGNvbnN0IGJsb2NrID0gaXNCbG9jayB8fCBpc19ibG9jayB8fCBtZXRhQmxvY2tzLmluY2x1ZGVzKG5hbWUpO1xuICAgICAgY29uc3QgY2xhc3NUeXBlID0gc3RvcmFnZUNsYXNzVHlwZSB8fCBzdG9yYWdlX2NsYXNzX3R5cGU7XG5cbiAgICAgIGlmIChkeW5hbWljKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJEeW5hbWljQmxvY2tzKHtcbiAgICAgICAgICBbbmFtZV06IGR5bmFtaWMudmFsdWUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gU2hvcnQgY2lyY3VpdCB0eXBlIGNoZWNraW5nIGlmIHZhbHVlIGlzIGFuIGV4cHJlc3Npb25cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUuaW5jbHVkZXMoXCIke1wiKSkge1xuICAgICAgICByZXR1cm4gYCR7bmFtZX0gPSAke3JlbmRlclN0cmluZyh2YWx1ZSl9YDtcbiAgICAgIH1cblxuICAgICAgaWYgKGJsb2NrICYmIHR5cGUgIT09IFwibGlzdFwiICYmIHR5cGUgIT09IFwic2V0XCIpIHtcbiAgICAgICAgcmV0dXJuIGAke25hbWV9IHsgXG4ke3JlbmRlckF0dHJpYnV0ZXModmFsdWUpfSBcbn1gO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT09IFwibGlzdFwiIHx8IHR5cGUgPT09IFwic2V0XCIpIHtcbiAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgcmV0dXJuIHJlbmRlckxpc3QodiwgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke25hbWV9ID0gJHtyZW5kZXJMaXN0KHYpfWA7XG4gICAgICB9XG4gICAgICBpZiAodHlwZSA9PT0gXCJtYXBcIikge1xuICAgICAgICByZXR1cm4gYCR7bmFtZX0gPSAke3JlbmRlck1hcCh2YWx1ZSl9YDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09IFwic2ltcGxlXCIpIHtcbiAgICAgICAgaWYgKGNsYXNzVHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJldHVybiBgJHtuYW1lfSA9ICR7cmVuZGVyU3RyaW5nKHZhbHVlKX1gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGFzc1R5cGUgPT09IFwibnVtYmVyXCIgfHwgY2xhc3NUeXBlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgIHJldHVybiBgJHtuYW1lfSA9ICR7dmFsdWV9YDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gXCJhbnlcIikge1xuICAgICAgICByZXR1cm4gYCR7bmFtZX0gPSAke3JlbmRlckZ1enp5SnNvbkV4cHJlc3Npb24odmFsdWUpfWA7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlID09PSBcInJlZmVyZW5jZVwiKSB7XG4gICAgICAgIHJldHVybiBgJHtuYW1lfSA9ICR7dmFsdWV9YDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGAke25hbWV9ID0gJHt2YWx1ZX1gO1xuICAgIH0pXG4gICAgLmZpbHRlcigodikgPT4gdiAhPT0gdW5kZWZpbmVkKVxuICAgIC5qb2luKFwiXFxuXCIpO1xufVxuIl19