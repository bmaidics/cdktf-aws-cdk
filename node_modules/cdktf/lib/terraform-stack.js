"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerraformStack = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
// Copyright (c) HashiCorp, Inc
// SPDX-License-Identifier: MPL-2.0
const constructs_1 = require("constructs");
const _tokens_1 = require("./_tokens");
const terraform_element_1 = require("./terraform-element");
const util_1 = require("./util");
const terraform_provider_1 = require("./terraform-provider");
const local_backend_1 = require("./backends/local-backend");
const tfExpression_1 = require("./tfExpression");
const terraform_output_1 = require("./terraform-output");
const unique_1 = require("./private/unique");
const synthesizer_1 = require("./synthesize/synthesizer");
const STACK_SYMBOL = Symbol.for("cdktf/TerraformStack");
const validations_1 = require("./validations");
const app_1 = require("./app");
const terraform_backend_1 = require("./terraform-backend");
const terraform_resource_targets_1 = require("./terraform-resource-targets");
const terraform_resource_1 = require("./terraform-resource");
const render_1 = require("./hcl/render");
const errors_1 = require("./errors");
// eslint-disable-next-line jsdoc/require-jsdoc
function throwIfIdIsGlobCharacter(str) {
    ["*", "?", "[", "]", "{", "}", "!"].forEach((char) => {
        if (str.includes(char)) {
            throw (0, errors_1.stackContainsDisallowedChar)(str, char);
        }
    });
}
// eslint-disable-next-line jsdoc/require-jsdoc
function throwIfIdContainsWhitespace(str) {
    if (/\s/.test(str)) {
        throw (0, errors_1.stackIdContainsWhitespace)(str);
    }
}
// eslint-disable-next-line jsdoc/require-jsdoc
class TerraformStack extends constructs_1.Construct {
    constructor(scope, id) {
        super(scope, id);
        this.rawOverrides = {};
        this.crossStackOutputs = {};
        this.crossStackDataSources = {};
        this.dependencies = [];
        this.moveTargets = new terraform_resource_targets_1.TerraformResourceTargets();
        throwIfIdIsGlobCharacter(id);
        throwIfIdContainsWhitespace(id);
        this.cdktfVersion = this.node.tryGetContext("cdktfVersion");
        this.synthesizer = new synthesizer_1.StackSynthesizer(this, process.env.CDKTF_CONTINUE_SYNTH_ON_ERROR_ANNOTATIONS !== undefined, process.env.SYNTH_HCL_OUTPUT === "true" ||
            process.env.SYNTH_HCL_OUTPUT === "1");
        Object.defineProperty(this, STACK_SYMBOL, { value: true });
        this.node.addValidation(new validations_1.ValidateProviderPresence(this));
    }
    static isStack(x) {
        return x !== null && typeof x === "object" && STACK_SYMBOL in x;
    }
    static of(construct) {
        return _lookup(construct);
        // eslint-disable-next-line jsdoc/require-jsdoc
        function _lookup(c) {
            if (TerraformStack.isStack(c)) {
                return c;
            }
            const node = c.node;
            if (!node.scope) {
                let hint = "";
                if (construct.node.scope === c && app_1.App.isApp(c)) {
                    // the scope of the originally passed construct equals the construct c
                    // which has no scope (i.e. has no parent construct) and c is an App
                    // and our construct is a Backend
                    hint = `. You seem to have passed your root App as scope to a construct. Pass a stack (inheriting from TerraformStack) as scope to your construct instead.`;
                }
                throw (0, errors_1.noStackForConstruct)(construct.node.path, hint);
            }
            return _lookup(node.scope);
        }
    }
    findAll(predicate) {
        const items = [];
        const visit = async (node) => {
            if (predicate(node)) {
                items.push(node);
            }
            for (const child of node.node.children) {
                visit(child);
            }
        };
        visit(this);
        return items;
    }
    prepareStack() {
        // Ensure we have a backend configured
        this.ensureBackendExists();
        // A preparing resolve run might add new resources to the stack, e.g. for cross stack references.
        terraformElements(this).forEach((e) => (0, _tokens_1.resolve)(this, e.toTerraform(), true));
    }
    addOverride(path, value) {
        const parts = path.split(".");
        let curr = this.rawOverrides;
        while (parts.length > 1) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const key = parts.shift();
            // if we can't recurse further or the previous value is not an
            // object overwrite it with an object.
            const isObject = curr[key] != null &&
                typeof curr[key] === "object" &&
                !Array.isArray(curr[key]);
            if (!isObject) {
                curr[key] = {};
            }
            curr = curr[key];
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const lastKey = parts.shift();
        curr[lastKey] = value;
    }
    getLogicalId(tfElement) {
        // wrap the allocation for future renaming support
        return this.allocateLogicalId(tfElement);
    }
    /**
     * Returns the naming scheme used to allocate logical IDs. By default, uses
     * the `HashedAddressingScheme` but this method can be overridden to customize
     * this behavior.
     *
     * @param tfElement The element for which the logical ID is allocated.
     */
    allocateLogicalId(tfElement) {
        const node = terraform_element_1.TerraformElement.isTerraformElement(tfElement)
            ? tfElement.node
            : tfElement;
        const stack = terraform_element_1.TerraformElement.isTerraformElement(tfElement)
            ? tfElement.cdktfStack
            : this;
        const stackIndex = node.scopes.indexOf(stack);
        const components = node.scopes.slice(stackIndex + 1).map((c) => c.node.id);
        return components.length > 0 ? (0, unique_1.makeUniqueId)(components) : "";
    }
    allProviders() {
        return this.findAll(terraform_provider_1.TerraformProvider.isTerraformProvider);
    }
    ensureBackendExists() {
        const backends = this.findAll(terraform_backend_1.TerraformBackend.isBackend);
        return backends[0] || new local_backend_1.LocalBackend(this, {});
    }
    toHclTerraform() {
        const metadata = {
            version: this.cdktfVersion,
            stackName: this.node.id,
            backend: "local", // overwritten by backend implementations if used
            cloud: undefined, // overwritten by cloud and remote backend implementations
            ...(Object.keys(this.rawOverrides).length > 0
                ? { overrides: { stack: Object.keys(this.rawOverrides) } }
                : {}),
        };
        const elements = terraformElements(this);
        const metadatas = elements.map((e) => (0, _tokens_1.resolve)(this, e.toMetadata()));
        for (const meta of metadatas) {
            (0, util_1.deepMerge)(metadata, meta);
        }
        const outputs = elements.reduce((carry, item) => {
            if (!terraform_output_1.TerraformOutput.isTerraformOutput(item)) {
                return carry;
            }
            (0, util_1.deepMerge)(carry, item.node.path.split("/").reduceRight((innerCarry, part) => {
                if (Object.keys(innerCarry).length === 0) {
                    return { [part]: item.friendlyUniqueId };
                }
                return { [part]: innerCarry };
            }, {}));
            return carry;
        }, {});
        const tf = {};
        const fragments = elements.map((e) => (0, _tokens_1.resolve)(this, e.toHclTerraform()));
        const tfMeta = {
            "//": {
                metadata,
                outputs,
            },
        };
        const hclFragments = fragments
            .map((frag) => {
            let res = "";
            if (frag.resource) {
                const { hcl, metadata } = (0, render_1.renderResource)(frag.resource);
                (0, util_1.deepMerge)(tfMeta, metadata);
                res = [res, hcl].join("\n");
            }
            if (frag.data) {
                const { hcl, metadata } = (0, render_1.renderDatasource)(frag.data);
                (0, util_1.deepMerge)(tfMeta, metadata);
                res = [res, hcl].join("\n");
            }
            if (frag.provider) {
                (0, util_1.deepMerge)(tf, frag);
                res = [res, (0, render_1.renderProvider)(frag.provider)].join("\n\n");
            }
            if (frag.terraform) {
                (0, util_1.deepMerge)(tf, frag);
            }
            if (frag.module) {
                const { hcl, metadata } = (0, render_1.renderModule)(frag.module);
                (0, util_1.deepMerge)(tfMeta, metadata);
                res = [res, hcl].join("\n");
            }
            if (frag.output) {
                res = [res, (0, render_1.renderOutput)(frag.output)].join("\n\n");
            }
            if (frag.moved) {
                res = [res, (0, render_1.renderMoved)(frag.moved)].join("\n\n");
            }
            if (frag.import) {
                res = [res, (0, render_1.renderImport)(frag.import)].join("\n\n");
            }
            if (frag.locals) {
                res = [res, (0, render_1.renderLocals)(frag.locals)].join("\n\n");
            }
            if (frag.variable) {
                res = [res, (0, render_1.renderVariable)(frag.variable)].join("\n\n");
            }
            return res;
        })
            .filter((frag) => frag !== undefined);
        (0, util_1.deepMerge)(tf, this.rawOverrides);
        const terraformBlock = tf?.terraform;
        let hcl = "";
        if (terraformBlock) {
            hcl = (0, render_1.renderTerraform)(terraformBlock);
            (0, util_1.deepMerge)(tfMeta, { terraform: (0, render_1.cleanForMetadata)(terraformBlock) });
        }
        return {
            hcl: (0, _tokens_1.resolve)(this, [hcl, ...hclFragments].join("")),
            metadata: (0, _tokens_1.resolve)(this, tfMeta),
        };
    }
    toTerraform() {
        const tf = {};
        const metadata = {
            version: this.cdktfVersion,
            stackName: this.node.id,
            backend: "local", // overwritten by backend implementations if used
            cloud: undefined, // overwritten by cloud and remote backend implementations
            ...(Object.keys(this.rawOverrides).length > 0
                ? { overrides: { stack: Object.keys(this.rawOverrides) } }
                : {}),
        };
        const elements = terraformElements(this);
        const metadatas = elements.map((e) => (0, _tokens_1.resolve)(this, e.toMetadata()));
        for (const meta of metadatas) {
            (0, util_1.deepMerge)(metadata, meta);
        }
        const outputs = elements.reduce((carry, item) => {
            if (!terraform_output_1.TerraformOutput.isTerraformOutput(item)) {
                return carry;
            }
            (0, util_1.deepMerge)(carry, item.node.path.split("/").reduceRight((innerCarry, part) => {
                if (Object.keys(innerCarry).length === 0) {
                    return { [part]: item.friendlyUniqueId };
                }
                return { [part]: innerCarry };
            }, {}));
            return carry;
        }, {});
        tf["//"] = { metadata, outputs };
        const fragments = elements.map((e) => (0, _tokens_1.resolve)(this, e.toTerraform()));
        for (const fragment of fragments) {
            (0, util_1.deepMerge)(tf, fragment);
        }
        (0, util_1.deepMerge)(tf, this.rawOverrides);
        return (0, _tokens_1.resolve)(this, tf);
    }
    registerOutgoingCrossStackReference(identifier) {
        if (this.crossStackOutputs[identifier]) {
            return this.crossStackOutputs[identifier];
        }
        const output = new terraform_output_1.TerraformOutput(this, `cross-stack-output-${identifier}`, {
            value: (0, tfExpression_1.ref)(identifier, this),
            sensitive: true,
        });
        this.crossStackOutputs[identifier] = output;
        return output;
    }
    registerIncomingCrossStackReference(fromStack) {
        if (this.crossStackDataSources[String(fromStack)]) {
            return this.crossStackDataSources[String(fromStack)];
        }
        const originBackend = fromStack.ensureBackendExists();
        const originPath = fromStack.node.path;
        const remoteState = originBackend.getRemoteStateDataSource(this, `cross-stack-reference-input-${originPath}`, originPath);
        this.crossStackDataSources[originPath] = remoteState;
        return remoteState;
    }
    // Check here for loops in the dependency graph
    dependsOn(stack) {
        return (this.dependencies.includes(stack) ||
            this.dependencies.some((d) => d.dependsOn(stack)));
    }
    addDependency(dependency) {
        if (dependency.dependsOn(this)) {
            throw (0, errors_1.stackHasCircularDependency)(this, dependency);
        }
        if (this.dependencies.includes(dependency)) {
            return;
        }
        this.dependencies.push(dependency);
    }
    /**
     * Run all validations on the stack.
     */
    runAllValidations() {
        const errors = this.node
            .findAll()
            .map((node) => node.node.validate().map((error) => ({ message: error, source: node })))
            .reduce((prev, curr) => [...prev, ...curr], []);
        if (errors.length > 0) {
            const errorList = errors
                .map((e) => `[${e.source.node.path}] ${e.message}`)
                .join("\n  ");
            throw (0, errors_1.stackValidationFailure)(errorList);
        }
    }
    hasResourceMove() {
        return terraformElements(this).some((e) => {
            if (terraform_resource_1.TerraformResource.isTerraformResource(e) && e.hasResourceMove()) {
                return true;
            }
            return false;
        });
    }
}
exports.TerraformStack = TerraformStack;
_a = JSII_RTTI_SYMBOL_1;
TerraformStack[_a] = { fqn: "cdktf.TerraformStack", version: "0.20.0" };
// eslint-disable-next-line jsdoc/require-jsdoc
function terraformElements(node, into = []) {
    if (terraform_element_1.TerraformElement.isTerraformElement(node)) {
        into.push(node);
    }
    for (const child of node.node.children) {
        // Don't recurse into a substack
        if (TerraformStack.isStack(child)) {
            continue;
        }
        terraformElements(child, into);
    }
    return into;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVycmFmb3JtLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVycmFmb3JtLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0JBQStCO0FBQy9CLG1DQUFtQztBQUNuQywyQ0FBeUQ7QUFDekQsdUNBQW9DO0FBRXBDLDJEQUF1RDtBQUN2RCxpQ0FBbUM7QUFDbkMsNkRBQXlEO0FBQ3pELDREQUF3RDtBQUN4RCxpREFBcUM7QUFDckMseURBQXFEO0FBRXJELDZDQUFnRDtBQUVoRCwwREFBNEQ7QUFFNUQsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ3hELCtDQUF5RDtBQUN6RCwrQkFBNEI7QUFDNUIsMkRBQXVEO0FBQ3ZELDZFQUF3RTtBQUN4RSw2REFBeUQ7QUFDekQseUNBWXNCO0FBQ3RCLHFDQU1rQjtBQWVsQiwrQ0FBK0M7QUFDL0MsU0FBUyx3QkFBd0IsQ0FBQyxHQUFXO0lBQzNDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDbkQsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDdkIsTUFBTSxJQUFBLG9DQUEyQixFQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMvQyxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsK0NBQStDO0FBQy9DLFNBQVMsMkJBQTJCLENBQUMsR0FBVztJQUM5QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNuQixNQUFNLElBQUEsa0NBQXlCLEVBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkMsQ0FBQztBQUNILENBQUM7QUFFRCwrQ0FBK0M7QUFDL0MsTUFB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O1lBQ2xDLFNBQVM7UUFDWCxDQUFDO1FBRUQsaUJBQWlCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIEhhc2hpQ29ycCwgSW5jXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTVBMLTIuMFxuaW1wb3J0IHsgQ29uc3RydWN0LCBJQ29uc3RydWN0LCBOb2RlIH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tIFwiLi9fdG9rZW5zXCI7XG5cbmltcG9ydCB7IFRlcnJhZm9ybUVsZW1lbnQgfSBmcm9tIFwiLi90ZXJyYWZvcm0tZWxlbWVudFwiO1xuaW1wb3J0IHsgZGVlcE1lcmdlIH0gZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0IHsgVGVycmFmb3JtUHJvdmlkZXIgfSBmcm9tIFwiLi90ZXJyYWZvcm0tcHJvdmlkZXJcIjtcbmltcG9ydCB7IExvY2FsQmFja2VuZCB9IGZyb20gXCIuL2JhY2tlbmRzL2xvY2FsLWJhY2tlbmRcIjtcbmltcG9ydCB7IHJlZiB9IGZyb20gXCIuL3RmRXhwcmVzc2lvblwiO1xuaW1wb3J0IHsgVGVycmFmb3JtT3V0cHV0IH0gZnJvbSBcIi4vdGVycmFmb3JtLW91dHB1dFwiO1xuaW1wb3J0IHsgVGVycmFmb3JtUmVtb3RlU3RhdGUgfSBmcm9tIFwiLi90ZXJyYWZvcm0tcmVtb3RlLXN0YXRlXCI7XG5pbXBvcnQgeyBtYWtlVW5pcXVlSWQgfSBmcm9tIFwiLi9wcml2YXRlL3VuaXF1ZVwiO1xuaW1wb3J0IHsgSVN0YWNrU3ludGhlc2l6ZXIgfSBmcm9tIFwiLi9zeW50aGVzaXplL3R5cGVzXCI7XG5pbXBvcnQgeyBTdGFja1N5bnRoZXNpemVyIH0gZnJvbSBcIi4vc3ludGhlc2l6ZS9zeW50aGVzaXplclwiO1xuXG5jb25zdCBTVEFDS19TWU1CT0wgPSBTeW1ib2wuZm9yKFwiY2RrdGYvVGVycmFmb3JtU3RhY2tcIik7XG5pbXBvcnQgeyBWYWxpZGF0ZVByb3ZpZGVyUHJlc2VuY2UgfSBmcm9tIFwiLi92YWxpZGF0aW9uc1wiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwXCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1CYWNrZW5kIH0gZnJvbSBcIi4vdGVycmFmb3JtLWJhY2tlbmRcIjtcbmltcG9ydCB7IFRlcnJhZm9ybVJlc291cmNlVGFyZ2V0cyB9IGZyb20gXCIuL3RlcnJhZm9ybS1yZXNvdXJjZS10YXJnZXRzXCI7XG5pbXBvcnQgeyBUZXJyYWZvcm1SZXNvdXJjZSB9IGZyb20gXCIuL3RlcnJhZm9ybS1yZXNvdXJjZVwiO1xuaW1wb3J0IHtcbiAgcmVuZGVyRGF0YXNvdXJjZSxcbiAgcmVuZGVyTW9kdWxlLFxuICByZW5kZXJNb3ZlZCxcbiAgcmVuZGVyT3V0cHV0LFxuICByZW5kZXJQcm92aWRlcixcbiAgcmVuZGVyUmVzb3VyY2UsXG4gIHJlbmRlclRlcnJhZm9ybSxcbiAgcmVuZGVyTG9jYWxzLFxuICByZW5kZXJWYXJpYWJsZSxcbiAgcmVuZGVySW1wb3J0LFxuICBjbGVhbkZvck1ldGFkYXRhLFxufSBmcm9tIFwiLi9oY2wvcmVuZGVyXCI7XG5pbXBvcnQge1xuICBub1N0YWNrRm9yQ29uc3RydWN0LFxuICBzdGFja0NvbnRhaW5zRGlzYWxsb3dlZENoYXIsXG4gIHN0YWNrSGFzQ2lyY3VsYXJEZXBlbmRlbmN5LFxuICBzdGFja0lkQ29udGFpbnNXaGl0ZXNwYWNlLFxuICBzdGFja1ZhbGlkYXRpb25GYWlsdXJlLFxufSBmcm9tIFwiLi9lcnJvcnNcIjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbnR5cGUgU3RhY2tJZGVudGlmaWVyID0gc3RyaW5nO1xudHlwZSBPdXRwdXRJZE1hcCA9XG4gIHwgeyBbY29uc3RydWN0SWQ6IHN0cmluZ106IHN0cmluZyB9XG4gIHwgeyBbc3RhY2tPckNvbnN0cnVjdElkOiBzdHJpbmddOiBPdXRwdXRJZE1hcCB9O1xuXG5leHBvcnQgaW50ZXJmYWNlIFRlcnJhZm9ybVN0YWNrTWV0YWRhdGEge1xuICByZWFkb25seSBzdGFja05hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgdmVyc2lvbjogc3RyaW5nO1xuICByZWFkb25seSBiYWNrZW5kOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGNsb3VkPzogc3RyaW5nO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xuZnVuY3Rpb24gdGhyb3dJZklkSXNHbG9iQ2hhcmFjdGVyKHN0cjogc3RyaW5nKTogdm9pZCB7XG4gIFtcIipcIiwgXCI/XCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBcIiFcIl0uZm9yRWFjaCgoY2hhcikgPT4ge1xuICAgIGlmIChzdHIuaW5jbHVkZXMoY2hhcikpIHtcbiAgICAgIHRocm93IHN0YWNrQ29udGFpbnNEaXNhbGxvd2VkQ2hhcihzdHIsIGNoYXIpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5mdW5jdGlvbiB0aHJvd0lmSWRDb250YWluc1doaXRlc3BhY2Uoc3RyOiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKC9cXHMvLnRlc3Qoc3RyKSkge1xuICAgIHRocm93IHN0YWNrSWRDb250YWluc1doaXRlc3BhY2Uoc3RyKTtcbiAgfVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xuZXhwb3J0IGNsYXNzIFRlcnJhZm9ybVN0YWNrIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgcHJpdmF0ZSByZWFkb25seSByYXdPdmVycmlkZXM6IGFueSA9IHt9O1xuICBwcml2YXRlIHJlYWRvbmx5IGNka3RmVmVyc2lvbjogc3RyaW5nO1xuICBwcml2YXRlIGNyb3NzU3RhY2tPdXRwdXRzOiBSZWNvcmQ8U3RhY2tJZGVudGlmaWVyLCBUZXJyYWZvcm1PdXRwdXQ+ID0ge307XG4gIHByaXZhdGUgY3Jvc3NTdGFja0RhdGFTb3VyY2VzOiBSZWNvcmQ8U3RhY2tJZGVudGlmaWVyLCBUZXJyYWZvcm1SZW1vdGVTdGF0ZT4gPVxuICAgIHt9O1xuICBwdWJsaWMgc3ludGhlc2l6ZXI6IElTdGFja1N5bnRoZXNpemVyO1xuICBwdWJsaWMgZGVwZW5kZW5jaWVzOiBUZXJyYWZvcm1TdGFja1tdID0gW107XG4gIHB1YmxpYyBtb3ZlVGFyZ2V0czogVGVycmFmb3JtUmVzb3VyY2VUYXJnZXRzID0gbmV3IFRlcnJhZm9ybVJlc291cmNlVGFyZ2V0cygpO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgdGhyb3dJZklkSXNHbG9iQ2hhcmFjdGVyKGlkKTtcbiAgICB0aHJvd0lmSWRDb250YWluc1doaXRlc3BhY2UoaWQpO1xuICAgIHRoaXMuY2RrdGZWZXJzaW9uID0gdGhpcy5ub2RlLnRyeUdldENvbnRleHQoXCJjZGt0ZlZlcnNpb25cIik7XG4gICAgdGhpcy5zeW50aGVzaXplciA9IG5ldyBTdGFja1N5bnRoZXNpemVyKFxuICAgICAgdGhpcyxcbiAgICAgIHByb2Nlc3MuZW52LkNES1RGX0NPTlRJTlVFX1NZTlRIX09OX0VSUk9SX0FOTk9UQVRJT05TICE9PSB1bmRlZmluZWQsXG4gICAgICBwcm9jZXNzLmVudi5TWU5USF9IQ0xfT1VUUFVUID09PSBcInRydWVcIiB8fFxuICAgICAgICBwcm9jZXNzLmVudi5TWU5USF9IQ0xfT1VUUFVUID09PSBcIjFcIlxuICAgICk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFNUQUNLX1NZTUJPTCwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgICB0aGlzLm5vZGUuYWRkVmFsaWRhdGlvbihuZXcgVmFsaWRhdGVQcm92aWRlclByZXNlbmNlKHRoaXMpKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgaXNTdGFjayh4OiBhbnkpOiB4IGlzIFRlcnJhZm9ybVN0YWNrIHtcbiAgICByZXR1cm4geCAhPT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJiBTVEFDS19TWU1CT0wgaW4geDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgb2YoY29uc3RydWN0OiBJQ29uc3RydWN0KTogVGVycmFmb3JtU3RhY2sge1xuICAgIHJldHVybiBfbG9va3VwKGNvbnN0cnVjdCk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xuICAgIGZ1bmN0aW9uIF9sb29rdXAoYzogSUNvbnN0cnVjdCk6IFRlcnJhZm9ybVN0YWNrIHtcbiAgICAgIGlmIChUZXJyYWZvcm1TdGFjay5pc1N0YWNrKGMpKSB7XG4gICAgICAgIHJldHVybiBjO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub2RlID0gYy5ub2RlO1xuXG4gICAgICBpZiAoIW5vZGUuc2NvcGUpIHtcbiAgICAgICAgbGV0IGhpbnQgPSBcIlwiO1xuICAgICAgICBpZiAoY29uc3RydWN0Lm5vZGUuc2NvcGUgPT09IGMgJiYgQXBwLmlzQXBwKGMpKSB7XG4gICAgICAgICAgLy8gdGhlIHNjb3BlIG9mIHRoZSBvcmlnaW5hbGx5IHBhc3NlZCBjb25zdHJ1Y3QgZXF1YWxzIHRoZSBjb25zdHJ1Y3QgY1xuICAgICAgICAgIC8vIHdoaWNoIGhhcyBubyBzY29wZSAoaS5lLiBoYXMgbm8gcGFyZW50IGNvbnN0cnVjdCkgYW5kIGMgaXMgYW4gQXBwXG4gICAgICAgICAgLy8gYW5kIG91ciBjb25zdHJ1Y3QgaXMgYSBCYWNrZW5kXG4gICAgICAgICAgaGludCA9IGAuIFlvdSBzZWVtIHRvIGhhdmUgcGFzc2VkIHlvdXIgcm9vdCBBcHAgYXMgc2NvcGUgdG8gYSBjb25zdHJ1Y3QuIFBhc3MgYSBzdGFjayAoaW5oZXJpdGluZyBmcm9tIFRlcnJhZm9ybVN0YWNrKSBhcyBzY29wZSB0byB5b3VyIGNvbnN0cnVjdCBpbnN0ZWFkLmA7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBub1N0YWNrRm9yQ29uc3RydWN0KGNvbnN0cnVjdC5ub2RlLnBhdGgsIGhpbnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX2xvb2t1cChub2RlLnNjb3BlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGZpbmRBbGw8VCBleHRlbmRzIElDb25zdHJ1Y3Q+KFxuICAgIHByZWRpY2F0ZTogKG5vZGU6IHVua25vd24pID0+IG5vZGUgaXMgVFxuICApOiBUW10ge1xuICAgIGNvbnN0IGl0ZW1zOiBUW10gPSBbXTtcblxuICAgIGNvbnN0IHZpc2l0ID0gYXN5bmMgKG5vZGU6IElDb25zdHJ1Y3QpID0+IHtcbiAgICAgIGlmIChwcmVkaWNhdGUobm9kZSkpIHtcbiAgICAgICAgaXRlbXMucHVzaChub2RlKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBub2RlLm5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgdmlzaXQoY2hpbGQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2aXNpdCh0aGlzKTtcblxuICAgIHJldHVybiBpdGVtcztcbiAgfVxuXG4gIHB1YmxpYyBwcmVwYXJlU3RhY2soKSB7XG4gICAgLy8gRW5zdXJlIHdlIGhhdmUgYSBiYWNrZW5kIGNvbmZpZ3VyZWRcbiAgICB0aGlzLmVuc3VyZUJhY2tlbmRFeGlzdHMoKTtcbiAgICAvLyBBIHByZXBhcmluZyByZXNvbHZlIHJ1biBtaWdodCBhZGQgbmV3IHJlc291cmNlcyB0byB0aGUgc3RhY2ssIGUuZy4gZm9yIGNyb3NzIHN0YWNrIHJlZmVyZW5jZXMuXG4gICAgdGVycmFmb3JtRWxlbWVudHModGhpcykuZm9yRWFjaCgoZSkgPT5cbiAgICAgIHJlc29sdmUodGhpcywgZS50b1RlcnJhZm9ybSgpLCB0cnVlKVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgYWRkT3ZlcnJpZGUocGF0aDogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KFwiLlwiKTtcbiAgICBsZXQgY3VycjogYW55ID0gdGhpcy5yYXdPdmVycmlkZXM7XG5cbiAgICB3aGlsZSAocGFydHMubGVuZ3RoID4gMSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgIGNvbnN0IGtleSA9IHBhcnRzLnNoaWZ0KCkhO1xuXG4gICAgICAvLyBpZiB3ZSBjYW4ndCByZWN1cnNlIGZ1cnRoZXIgb3IgdGhlIHByZXZpb3VzIHZhbHVlIGlzIG5vdCBhblxuICAgICAgLy8gb2JqZWN0IG92ZXJ3cml0ZSBpdCB3aXRoIGFuIG9iamVjdC5cbiAgICAgIGNvbnN0IGlzT2JqZWN0ID1cbiAgICAgICAgY3VycltrZXldICE9IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIGN1cnJba2V5XSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAhQXJyYXkuaXNBcnJheShjdXJyW2tleV0pO1xuICAgICAgaWYgKCFpc09iamVjdCkge1xuICAgICAgICBjdXJyW2tleV0gPSB7fTtcbiAgICAgIH1cblxuICAgICAgY3VyciA9IGN1cnJba2V5XTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgIGNvbnN0IGxhc3RLZXkgPSBwYXJ0cy5zaGlmdCgpITtcbiAgICBjdXJyW2xhc3RLZXldID0gdmFsdWU7XG4gIH1cblxuICBwdWJsaWMgZ2V0TG9naWNhbElkKHRmRWxlbWVudDogVGVycmFmb3JtRWxlbWVudCB8IE5vZGUpOiBzdHJpbmcge1xuICAgIC8vIHdyYXAgdGhlIGFsbG9jYXRpb24gZm9yIGZ1dHVyZSByZW5hbWluZyBzdXBwb3J0XG4gICAgcmV0dXJuIHRoaXMuYWxsb2NhdGVMb2dpY2FsSWQodGZFbGVtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBuYW1pbmcgc2NoZW1lIHVzZWQgdG8gYWxsb2NhdGUgbG9naWNhbCBJRHMuIEJ5IGRlZmF1bHQsIHVzZXNcbiAgICogdGhlIGBIYXNoZWRBZGRyZXNzaW5nU2NoZW1lYCBidXQgdGhpcyBtZXRob2QgY2FuIGJlIG92ZXJyaWRkZW4gdG8gY3VzdG9taXplXG4gICAqIHRoaXMgYmVoYXZpb3IuXG4gICAqXG4gICAqIEBwYXJhbSB0ZkVsZW1lbnQgVGhlIGVsZW1lbnQgZm9yIHdoaWNoIHRoZSBsb2dpY2FsIElEIGlzIGFsbG9jYXRlZC5cbiAgICovXG4gIHByb3RlY3RlZCBhbGxvY2F0ZUxvZ2ljYWxJZCh0ZkVsZW1lbnQ6IFRlcnJhZm9ybUVsZW1lbnQgfCBOb2RlKTogc3RyaW5nIHtcbiAgICBjb25zdCBub2RlID0gVGVycmFmb3JtRWxlbWVudC5pc1RlcnJhZm9ybUVsZW1lbnQodGZFbGVtZW50KVxuICAgICAgPyB0ZkVsZW1lbnQubm9kZVxuICAgICAgOiB0ZkVsZW1lbnQ7XG4gICAgY29uc3Qgc3RhY2sgPSBUZXJyYWZvcm1FbGVtZW50LmlzVGVycmFmb3JtRWxlbWVudCh0ZkVsZW1lbnQpXG4gICAgICA/IHRmRWxlbWVudC5jZGt0ZlN0YWNrXG4gICAgICA6IHRoaXM7XG5cbiAgICBjb25zdCBzdGFja0luZGV4ID0gbm9kZS5zY29wZXMuaW5kZXhPZihzdGFjayk7XG5cbiAgICBjb25zdCBjb21wb25lbnRzID0gbm9kZS5zY29wZXMuc2xpY2Uoc3RhY2tJbmRleCArIDEpLm1hcCgoYykgPT4gYy5ub2RlLmlkKTtcbiAgICByZXR1cm4gY29tcG9uZW50cy5sZW5ndGggPiAwID8gbWFrZVVuaXF1ZUlkKGNvbXBvbmVudHMpIDogXCJcIjtcbiAgfVxuXG4gIHB1YmxpYyBhbGxQcm92aWRlcnMoKTogVGVycmFmb3JtUHJvdmlkZXJbXSB7XG4gICAgcmV0dXJuIHRoaXMuZmluZEFsbChUZXJyYWZvcm1Qcm92aWRlci5pc1RlcnJhZm9ybVByb3ZpZGVyKTtcbiAgfVxuXG4gIHB1YmxpYyBlbnN1cmVCYWNrZW5kRXhpc3RzKCk6IFRlcnJhZm9ybUJhY2tlbmQge1xuICAgIGNvbnN0IGJhY2tlbmRzID0gdGhpcy5maW5kQWxsKFRlcnJhZm9ybUJhY2tlbmQuaXNCYWNrZW5kKTtcbiAgICByZXR1cm4gYmFja2VuZHNbMF0gfHwgbmV3IExvY2FsQmFja2VuZCh0aGlzLCB7fSk7XG4gIH1cblxuICBwdWJsaWMgdG9IY2xUZXJyYWZvcm0oKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XG4gICAgY29uc3QgbWV0YWRhdGE6IFRlcnJhZm9ybVN0YWNrTWV0YWRhdGEgPSB7XG4gICAgICB2ZXJzaW9uOiB0aGlzLmNka3RmVmVyc2lvbixcbiAgICAgIHN0YWNrTmFtZTogdGhpcy5ub2RlLmlkLFxuICAgICAgYmFja2VuZDogXCJsb2NhbFwiLCAvLyBvdmVyd3JpdHRlbiBieSBiYWNrZW5kIGltcGxlbWVudGF0aW9ucyBpZiB1c2VkXG4gICAgICBjbG91ZDogdW5kZWZpbmVkLCAvLyBvdmVyd3JpdHRlbiBieSBjbG91ZCBhbmQgcmVtb3RlIGJhY2tlbmQgaW1wbGVtZW50YXRpb25zXG4gICAgICAuLi4oT2JqZWN0LmtleXModGhpcy5yYXdPdmVycmlkZXMpLmxlbmd0aCA+IDBcbiAgICAgICAgPyB7IG92ZXJyaWRlczogeyBzdGFjazogT2JqZWN0LmtleXModGhpcy5yYXdPdmVycmlkZXMpIH0gfVxuICAgICAgICA6IHt9KSxcbiAgICB9O1xuXG4gICAgY29uc3QgZWxlbWVudHMgPSB0ZXJyYWZvcm1FbGVtZW50cyh0aGlzKTtcblxuICAgIGNvbnN0IG1ldGFkYXRhcyA9IGVsZW1lbnRzLm1hcCgoZSkgPT4gcmVzb2x2ZSh0aGlzLCBlLnRvTWV0YWRhdGEoKSkpO1xuICAgIGZvciAoY29uc3QgbWV0YSBvZiBtZXRhZGF0YXMpIHtcbiAgICAgIGRlZXBNZXJnZShtZXRhZGF0YSwgbWV0YSk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3V0cHV0czogT3V0cHV0SWRNYXAgPSBlbGVtZW50cy5yZWR1Y2UoKGNhcnJ5LCBpdGVtKSA9PiB7XG4gICAgICBpZiAoIVRlcnJhZm9ybU91dHB1dC5pc1RlcnJhZm9ybU91dHB1dChpdGVtKSkge1xuICAgICAgICByZXR1cm4gY2Fycnk7XG4gICAgICB9XG5cbiAgICAgIGRlZXBNZXJnZShcbiAgICAgICAgY2FycnksXG4gICAgICAgIGl0ZW0ubm9kZS5wYXRoLnNwbGl0KFwiL1wiKS5yZWR1Y2VSaWdodCgoaW5uZXJDYXJyeSwgcGFydCkgPT4ge1xuICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhpbm5lckNhcnJ5KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IFtwYXJ0XTogaXRlbS5mcmllbmRseVVuaXF1ZUlkIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IFtwYXJ0XTogaW5uZXJDYXJyeSB9O1xuICAgICAgICB9LCB7fSlcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBjYXJyeTtcbiAgICB9LCB7fSk7XG5cbiAgICBjb25zdCB0ZiA9IHt9O1xuICAgIGNvbnN0IGZyYWdtZW50cyA9IGVsZW1lbnRzLm1hcCgoZSkgPT4gcmVzb2x2ZSh0aGlzLCBlLnRvSGNsVGVycmFmb3JtKCkpKTtcblxuICAgIGNvbnN0IHRmTWV0YSA9IHtcbiAgICAgIFwiLy9cIjoge1xuICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgb3V0cHV0cyxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBjb25zdCBoY2xGcmFnbWVudHMgPSBmcmFnbWVudHNcbiAgICAgIC5tYXAoKGZyYWcpID0+IHtcbiAgICAgICAgbGV0IHJlcyA9IFwiXCI7XG4gICAgICAgIGlmIChmcmFnLnJlc291cmNlKSB7XG4gICAgICAgICAgY29uc3QgeyBoY2wsIG1ldGFkYXRhIH0gPSByZW5kZXJSZXNvdXJjZShmcmFnLnJlc291cmNlKTtcbiAgICAgICAgICBkZWVwTWVyZ2UodGZNZXRhLCBtZXRhZGF0YSk7XG4gICAgICAgICAgcmVzID0gW3JlcywgaGNsXS5qb2luKFwiXFxuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZyYWcuZGF0YSkge1xuICAgICAgICAgIGNvbnN0IHsgaGNsLCBtZXRhZGF0YSB9ID0gcmVuZGVyRGF0YXNvdXJjZShmcmFnLmRhdGEpO1xuICAgICAgICAgIGRlZXBNZXJnZSh0Zk1ldGEsIG1ldGFkYXRhKTtcbiAgICAgICAgICByZXMgPSBbcmVzLCBoY2xdLmpvaW4oXCJcXG5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJhZy5wcm92aWRlcikge1xuICAgICAgICAgIGRlZXBNZXJnZSh0ZiwgZnJhZyk7XG4gICAgICAgICAgcmVzID0gW3JlcywgcmVuZGVyUHJvdmlkZXIoZnJhZy5wcm92aWRlcildLmpvaW4oXCJcXG5cXG5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJhZy50ZXJyYWZvcm0pIHtcbiAgICAgICAgICBkZWVwTWVyZ2UodGYsIGZyYWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZyYWcubW9kdWxlKSB7XG4gICAgICAgICAgY29uc3QgeyBoY2wsIG1ldGFkYXRhIH0gPSByZW5kZXJNb2R1bGUoZnJhZy5tb2R1bGUpO1xuICAgICAgICAgIGRlZXBNZXJnZSh0Zk1ldGEsIG1ldGFkYXRhKTtcbiAgICAgICAgICByZXMgPSBbcmVzLCBoY2xdLmpvaW4oXCJcXG5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJhZy5vdXRwdXQpIHtcbiAgICAgICAgICByZXMgPSBbcmVzLCByZW5kZXJPdXRwdXQoZnJhZy5vdXRwdXQpXS5qb2luKFwiXFxuXFxuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZyYWcubW92ZWQpIHtcbiAgICAgICAgICByZXMgPSBbcmVzLCByZW5kZXJNb3ZlZChmcmFnLm1vdmVkKV0uam9pbihcIlxcblxcblwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmcmFnLmltcG9ydCkge1xuICAgICAgICAgIHJlcyA9IFtyZXMsIHJlbmRlckltcG9ydChmcmFnLmltcG9ydCldLmpvaW4oXCJcXG5cXG5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJhZy5sb2NhbHMpIHtcbiAgICAgICAgICByZXMgPSBbcmVzLCByZW5kZXJMb2NhbHMoZnJhZy5sb2NhbHMpXS5qb2luKFwiXFxuXFxuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZyYWcudmFyaWFibGUpIHtcbiAgICAgICAgICByZXMgPSBbcmVzLCByZW5kZXJWYXJpYWJsZShmcmFnLnZhcmlhYmxlKV0uam9pbihcIlxcblxcblwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9KVxuICAgICAgLmZpbHRlcigoZnJhZykgPT4gZnJhZyAhPT0gdW5kZWZpbmVkKTtcblxuICAgIGRlZXBNZXJnZSh0ZiwgdGhpcy5yYXdPdmVycmlkZXMpO1xuICAgIGNvbnN0IHRlcnJhZm9ybUJsb2NrID0gKHRmIGFzIGFueSk/LnRlcnJhZm9ybTtcblxuICAgIGxldCBoY2wgPSBcIlwiO1xuICAgIGlmICh0ZXJyYWZvcm1CbG9jaykge1xuICAgICAgaGNsID0gcmVuZGVyVGVycmFmb3JtKHRlcnJhZm9ybUJsb2NrKTtcbiAgICAgIGRlZXBNZXJnZSh0Zk1ldGEsIHsgdGVycmFmb3JtOiBjbGVhbkZvck1ldGFkYXRhKHRlcnJhZm9ybUJsb2NrKSB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaGNsOiByZXNvbHZlKHRoaXMsIFtoY2wsIC4uLmhjbEZyYWdtZW50c10uam9pbihcIlwiKSksXG4gICAgICBtZXRhZGF0YTogcmVzb2x2ZSh0aGlzLCB0Zk1ldGEpLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgdG9UZXJyYWZvcm0oKTogYW55IHtcbiAgICBjb25zdCB0ZiA9IHt9O1xuXG4gICAgY29uc3QgbWV0YWRhdGE6IFRlcnJhZm9ybVN0YWNrTWV0YWRhdGEgPSB7XG4gICAgICB2ZXJzaW9uOiB0aGlzLmNka3RmVmVyc2lvbixcbiAgICAgIHN0YWNrTmFtZTogdGhpcy5ub2RlLmlkLFxuICAgICAgYmFja2VuZDogXCJsb2NhbFwiLCAvLyBvdmVyd3JpdHRlbiBieSBiYWNrZW5kIGltcGxlbWVudGF0aW9ucyBpZiB1c2VkXG4gICAgICBjbG91ZDogdW5kZWZpbmVkLCAvLyBvdmVyd3JpdHRlbiBieSBjbG91ZCBhbmQgcmVtb3RlIGJhY2tlbmQgaW1wbGVtZW50YXRpb25zXG4gICAgICAuLi4oT2JqZWN0LmtleXModGhpcy5yYXdPdmVycmlkZXMpLmxlbmd0aCA+IDBcbiAgICAgICAgPyB7IG92ZXJyaWRlczogeyBzdGFjazogT2JqZWN0LmtleXModGhpcy5yYXdPdmVycmlkZXMpIH0gfVxuICAgICAgICA6IHt9KSxcbiAgICB9O1xuXG4gICAgY29uc3QgZWxlbWVudHMgPSB0ZXJyYWZvcm1FbGVtZW50cyh0aGlzKTtcblxuICAgIGNvbnN0IG1ldGFkYXRhcyA9IGVsZW1lbnRzLm1hcCgoZSkgPT4gcmVzb2x2ZSh0aGlzLCBlLnRvTWV0YWRhdGEoKSkpO1xuICAgIGZvciAoY29uc3QgbWV0YSBvZiBtZXRhZGF0YXMpIHtcbiAgICAgIGRlZXBNZXJnZShtZXRhZGF0YSwgbWV0YSk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3V0cHV0czogT3V0cHV0SWRNYXAgPSBlbGVtZW50cy5yZWR1Y2UoKGNhcnJ5LCBpdGVtKSA9PiB7XG4gICAgICBpZiAoIVRlcnJhZm9ybU91dHB1dC5pc1RlcnJhZm9ybU91dHB1dChpdGVtKSkge1xuICAgICAgICByZXR1cm4gY2Fycnk7XG4gICAgICB9XG5cbiAgICAgIGRlZXBNZXJnZShcbiAgICAgICAgY2FycnksXG4gICAgICAgIGl0ZW0ubm9kZS5wYXRoLnNwbGl0KFwiL1wiKS5yZWR1Y2VSaWdodCgoaW5uZXJDYXJyeSwgcGFydCkgPT4ge1xuICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhpbm5lckNhcnJ5KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IFtwYXJ0XTogaXRlbS5mcmllbmRseVVuaXF1ZUlkIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IFtwYXJ0XTogaW5uZXJDYXJyeSB9O1xuICAgICAgICB9LCB7fSlcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBjYXJyeTtcbiAgICB9LCB7fSk7XG5cbiAgICAodGYgYXMgYW55KVtcIi8vXCJdID0geyBtZXRhZGF0YSwgb3V0cHV0cyB9O1xuXG4gICAgY29uc3QgZnJhZ21lbnRzID0gZWxlbWVudHMubWFwKChlKSA9PiByZXNvbHZlKHRoaXMsIGUudG9UZXJyYWZvcm0oKSkpO1xuICAgIGZvciAoY29uc3QgZnJhZ21lbnQgb2YgZnJhZ21lbnRzKSB7XG4gICAgICBkZWVwTWVyZ2UodGYsIGZyYWdtZW50KTtcbiAgICB9XG5cbiAgICBkZWVwTWVyZ2UodGYsIHRoaXMucmF3T3ZlcnJpZGVzKTtcblxuICAgIHJldHVybiByZXNvbHZlKHRoaXMsIHRmKTtcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3Rlck91dGdvaW5nQ3Jvc3NTdGFja1JlZmVyZW5jZShpZGVudGlmaWVyOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5jcm9zc1N0YWNrT3V0cHV0c1tpZGVudGlmaWVyXSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3Jvc3NTdGFja091dHB1dHNbaWRlbnRpZmllcl07XG4gICAgfVxuXG4gICAgY29uc3Qgb3V0cHV0ID0gbmV3IFRlcnJhZm9ybU91dHB1dChcbiAgICAgIHRoaXMsXG4gICAgICBgY3Jvc3Mtc3RhY2stb3V0cHV0LSR7aWRlbnRpZmllcn1gLFxuICAgICAge1xuICAgICAgICB2YWx1ZTogcmVmKGlkZW50aWZpZXIsIHRoaXMpLFxuICAgICAgICBzZW5zaXRpdmU6IHRydWUsXG4gICAgICB9XG4gICAgKTtcblxuICAgIHRoaXMuY3Jvc3NTdGFja091dHB1dHNbaWRlbnRpZmllcl0gPSBvdXRwdXQ7XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlckluY29taW5nQ3Jvc3NTdGFja1JlZmVyZW5jZShmcm9tU3RhY2s6IFRlcnJhZm9ybVN0YWNrKSB7XG4gICAgaWYgKHRoaXMuY3Jvc3NTdGFja0RhdGFTb3VyY2VzW1N0cmluZyhmcm9tU3RhY2spXSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3Jvc3NTdGFja0RhdGFTb3VyY2VzW1N0cmluZyhmcm9tU3RhY2spXTtcbiAgICB9XG4gICAgY29uc3Qgb3JpZ2luQmFja2VuZCA9IGZyb21TdGFjay5lbnN1cmVCYWNrZW5kRXhpc3RzKCk7XG4gICAgY29uc3Qgb3JpZ2luUGF0aCA9IGZyb21TdGFjay5ub2RlLnBhdGg7XG5cbiAgICBjb25zdCByZW1vdGVTdGF0ZSA9IG9yaWdpbkJhY2tlbmQuZ2V0UmVtb3RlU3RhdGVEYXRhU291cmNlKFxuICAgICAgdGhpcyxcbiAgICAgIGBjcm9zcy1zdGFjay1yZWZlcmVuY2UtaW5wdXQtJHtvcmlnaW5QYXRofWAsXG4gICAgICBvcmlnaW5QYXRoXG4gICAgKTtcblxuICAgIHRoaXMuY3Jvc3NTdGFja0RhdGFTb3VyY2VzW29yaWdpblBhdGhdID0gcmVtb3RlU3RhdGU7XG4gICAgcmV0dXJuIHJlbW90ZVN0YXRlO1xuICB9XG5cbiAgLy8gQ2hlY2sgaGVyZSBmb3IgbG9vcHMgaW4gdGhlIGRlcGVuZGVuY3kgZ3JhcGhcbiAgcHVibGljIGRlcGVuZHNPbihzdGFjazogVGVycmFmb3JtU3RhY2spOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5kZXBlbmRlbmNpZXMuaW5jbHVkZXMoc3RhY2spIHx8XG4gICAgICB0aGlzLmRlcGVuZGVuY2llcy5zb21lKChkKSA9PiBkLmRlcGVuZHNPbihzdGFjaykpXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBhZGREZXBlbmRlbmN5KGRlcGVuZGVuY3k6IFRlcnJhZm9ybVN0YWNrKSB7XG4gICAgaWYgKGRlcGVuZGVuY3kuZGVwZW5kc09uKHRoaXMpKSB7XG4gICAgICB0aHJvdyBzdGFja0hhc0NpcmN1bGFyRGVwZW5kZW5jeSh0aGlzLCBkZXBlbmRlbmN5KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5kZXBlbmRlbmNpZXMuaW5jbHVkZXMoZGVwZW5kZW5jeSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmRlcGVuZGVuY2llcy5wdXNoKGRlcGVuZGVuY3kpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1biBhbGwgdmFsaWRhdGlvbnMgb24gdGhlIHN0YWNrLlxuICAgKi9cbiAgcHVibGljIHJ1bkFsbFZhbGlkYXRpb25zKCkge1xuICAgIGNvbnN0IGVycm9yczogeyBtZXNzYWdlOiBzdHJpbmc7IHNvdXJjZTogSUNvbnN0cnVjdCB9W10gPSB0aGlzLm5vZGVcbiAgICAgIC5maW5kQWxsKClcbiAgICAgIC5tYXAoKG5vZGUpID0+XG4gICAgICAgIG5vZGUubm9kZS52YWxpZGF0ZSgpLm1hcCgoZXJyb3IpID0+ICh7IG1lc3NhZ2U6IGVycm9yLCBzb3VyY2U6IG5vZGUgfSkpXG4gICAgICApXG4gICAgICAucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBbLi4ucHJldiwgLi4uY3Vycl0sIFtdKTtcbiAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGVycm9yTGlzdCA9IGVycm9yc1xuICAgICAgICAubWFwKChlKSA9PiBgWyR7ZS5zb3VyY2Uubm9kZS5wYXRofV0gJHtlLm1lc3NhZ2V9YClcbiAgICAgICAgLmpvaW4oXCJcXG4gIFwiKTtcbiAgICAgIHRocm93IHN0YWNrVmFsaWRhdGlvbkZhaWx1cmUoZXJyb3JMaXN0KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaGFzUmVzb3VyY2VNb3ZlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0ZXJyYWZvcm1FbGVtZW50cyh0aGlzKS5zb21lKChlKSA9PiB7XG4gICAgICBpZiAoVGVycmFmb3JtUmVzb3VyY2UuaXNUZXJyYWZvcm1SZXNvdXJjZShlKSAmJiBlLmhhc1Jlc291cmNlTW92ZSgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG5mdW5jdGlvbiB0ZXJyYWZvcm1FbGVtZW50cyhcbiAgbm9kZTogSUNvbnN0cnVjdCxcbiAgaW50bzogVGVycmFmb3JtRWxlbWVudFtdID0gW11cbik6IFRlcnJhZm9ybUVsZW1lbnRbXSB7XG4gIGlmIChUZXJyYWZvcm1FbGVtZW50LmlzVGVycmFmb3JtRWxlbWVudChub2RlKSkge1xuICAgIGludG8ucHVzaChub2RlKTtcbiAgfVxuXG4gIGZvciAoY29uc3QgY2hpbGQgb2Ygbm9kZS5ub2RlLmNoaWxkcmVuKSB7XG4gICAgLy8gRG9uJ3QgcmVjdXJzZSBpbnRvIGEgc3Vic3RhY2tcbiAgICBpZiAoVGVycmFmb3JtU3RhY2suaXNTdGFjayhjaGlsZCkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHRlcnJhZm9ybUVsZW1lbnRzKGNoaWxkLCBpbnRvKTtcbiAgfVxuXG4gIHJldHVybiBpbnRvO1xufVxuIl19