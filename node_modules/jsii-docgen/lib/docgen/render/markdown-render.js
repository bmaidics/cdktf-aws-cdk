"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultTypeFormatter = exports.defaultLinkFormatter = exports.defaultAnchorFormatter = exports.MarkdownRenderer = void 0;
const markdown_doc_1 = require("./markdown-doc");
const schema_1 = require("../schema");
const transpile_1 = require("../transpile/transpile");
/**
 * Generates `MarkdownDocument` instances from `API.json` or its parts.
 *
 * This class can be used in two ways:
 *
 * 1. Instantiate it via the constructor with `options`, which requires
 * passing in some global context about the module and language you are
 * generated for. (This context can be found in the top-level `metadata`
 * field of API.json.) Then, call a `visitXxx` method to generate a
 * `MarkdownDocument` for the appropriate part of the schema.
 *
 * 2. Generate a `MarkdownDocument` from the complete `API.json` using the
 * `fromSchema` static method (no instantiation needed). Global context is
 * automatically inferred from the API.json.
 *
 * Both choices allow customizing the output via `MarkdownFormattingOptions`.
 */
class MarkdownRenderer {
    static fromSchema(schema, options) {
        const documentation = new markdown_doc_1.MarkdownDocument();
        if (schema.version !== schema_1.CURRENT_SCHEMA_VERSION) {
            throw new Error(`Unexpected schema version: ${schema.version}`);
        }
        if (schema.readme) {
            const md = new markdown_doc_1.MarkdownDocument();
            md.lines(schema.readme);
            documentation.section(md);
        }
        if (schema.apiReference) {
            const renderer = new MarkdownRenderer({
                anchorFormatter: options.anchorFormatter,
                linkFormatter: options.linkFormatter,
                typeFormatter: options.typeFormatter,
                language: transpile_1.Language.fromString(schema.language),
                ...schema.metadata,
            });
            documentation.section(renderer.visitApiReference(schema.apiReference, options.header));
        }
        return documentation;
    }
    static fromSubmodules(submodules, fileSuffix, options) {
        const documentation = new markdown_doc_1.MarkdownDocument();
        const renderer = new MarkdownRenderer({
            anchorFormatter: options.anchorFormatter,
            linkFormatter: options.linkFormatter,
            typeFormatter: options.typeFormatter,
            language: options.language,
            packageName: options.packageName,
            packageVersion: options.packageVersion,
        });
        const apiRef = renderer.visitSubmodules(submodules, fileSuffix);
        documentation.section(apiRef);
        return documentation;
    }
    constructor(options) {
        var _a, _b, _c;
        this.anchorFormatter = (_a = options.anchorFormatter) !== null && _a !== void 0 ? _a : exports.defaultAnchorFormatter;
        this.linkFormatter = (_b = options.linkFormatter) !== null && _b !== void 0 ? _b : exports.defaultLinkFormatter;
        this.typeFormatter = (_c = options.typeFormatter) !== null && _c !== void 0 ? _c : exports.defaultTypeFormatter;
        this.language = options.language;
        this.metadata = {
            packageName: options.packageName,
            packageVersion: options.packageVersion,
            submodule: options.submodule,
        };
    }
    visitSubmodules(submodules, fileSuffix) {
        const md = new markdown_doc_1.MarkdownDocument({ header: { title: 'Submodules' }, id: 'submodules' });
        md.lines('The following submodules are available:');
        md.lines('');
        for (const submodule of submodules) {
            md.lines(`- [${(0, transpile_1.submoduleRelName)(submodule)}](./${(0, transpile_1.submoduleRelName)(submodule)}.${fileSuffix})`);
        }
        md.lines('');
        return md;
    }
    visitApiReference(apiRef, header = { title: 'API Reference', id: 'api-reference' }) {
        const md = new markdown_doc_1.MarkdownDocument({ header: { title: header.title }, id: header.id });
        md.section(this.visitConstructs(apiRef.constructs));
        md.section(this.visitStructs(apiRef.structs));
        md.section(this.visitClasses(apiRef.classes));
        md.section(this.visitInterfaces(apiRef.interfaces));
        md.section(this.visitEnums(apiRef.enums));
        return md;
    }
    visitConstructs(constructs) {
        if (constructs.length === 0) {
            return markdown_doc_1.MarkdownDocument.EMPTY;
        }
        const md = new markdown_doc_1.MarkdownDocument({ header: { title: 'Constructs' } });
        for (const construct of constructs) {
            md.section(this.visitConstruct(construct));
        }
        return md;
    }
    visitStructs(structs) {
        if (structs.length === 0) {
            return markdown_doc_1.MarkdownDocument.EMPTY;
        }
        const md = new markdown_doc_1.MarkdownDocument({ header: { title: 'Structs' } });
        for (const struct of structs) {
            md.section(this.visitStruct(struct));
        }
        return md;
    }
    visitClasses(classes) {
        if (classes.length === 0) {
            return markdown_doc_1.MarkdownDocument.EMPTY;
        }
        const md = new markdown_doc_1.MarkdownDocument({ header: { title: 'Classes' } });
        for (const klass of classes) {
            md.section(this.visitClass(klass));
        }
        return md;
    }
    visitInterfaces(ifaces) {
        if (ifaces.length === 0) {
            return markdown_doc_1.MarkdownDocument.EMPTY;
        }
        const md = new markdown_doc_1.MarkdownDocument({ header: { title: 'Protocols' } });
        for (const iface of ifaces) {
            md.section(this.visitInterface(iface));
        }
        return md;
    }
    visitEnums(enums) {
        if (enums.length === 0) {
            return markdown_doc_1.MarkdownDocument.EMPTY;
        }
        const md = new markdown_doc_1.MarkdownDocument({ header: { title: 'Enums' } });
        for (const enu of enums) {
            md.section(this.visitEnum(enu));
        }
        return md;
    }
    visitConstruct(construct) {
        return this.visitClass(construct);
    }
    visitStruct(struct) {
        const md = new markdown_doc_1.MarkdownDocument({
            id: this.anchorFormatter({
                id: struct.id,
                displayName: struct.displayName,
                fqn: struct.fqn,
                ...this.metadata,
            }),
            header: { title: struct.displayName },
        });
        if (struct.docs) {
            md.docs(struct.docs, this.language);
        }
        const initializer = new markdown_doc_1.MarkdownDocument({
            id: this.anchorFormatter({
                id: `${struct.id}.Initializer`,
                displayName: 'Initializer',
                fqn: `${struct.fqn}.Initializer`,
                ...this.metadata,
            }),
            header: { title: 'Initializer' },
        });
        if (struct.usage) {
            initializer.code(this.language.toString(), struct.usage);
        }
        md.section(initializer);
        md.section(this.visitProperties(struct.properties));
        return md;
    }
    visitClass(klass) {
        const md = new markdown_doc_1.MarkdownDocument({
            id: this.anchorFormatter({
                id: klass.id,
                displayName: klass.displayName,
                fqn: klass.fqn,
                ...this.metadata,
            }),
            header: { title: klass.displayName },
        });
        if (klass.interfaces.length > 0) {
            const ifaces = [];
            for (const iface of klass.interfaces) {
                ifaces.push(this.linkFormatter(iface, this.metadata));
            }
            md.bullet(`${markdown_doc_1.MarkdownDocument.italic('Implements:')} ${ifaces.join(', ')}`);
            md.lines('');
        }
        if (klass.docs) {
            md.docs(klass.docs, this.language);
        }
        if (klass.initializer) {
            md.section(this.visitInitializer(klass.initializer));
        }
        md.section(this.visitInstanceMethods(klass.instanceMethods));
        md.section(this.visitStaticFunctions(klass.staticMethods));
        md.section(this.visitProperties(klass.properties));
        md.section(this.visitConstants(klass.constants));
        return md;
    }
    visitInterface(iface) {
        const md = new markdown_doc_1.MarkdownDocument({
            id: this.anchorFormatter({
                id: iface.id,
                displayName: iface.displayName,
                fqn: iface.fqn,
                ...this.metadata,
            }),
            header: { title: iface.displayName },
        });
        if (iface.interfaces.length > 0) {
            const bases = [];
            for (const base of iface.interfaces) {
                bases.push(this.linkFormatter(base, this.metadata));
            }
            md.bullet(`${markdown_doc_1.MarkdownDocument.italic('Extends:')} ${bases.join(', ')}`);
            md.lines('');
        }
        if (iface.implementations.length > 0) {
            const impls = [];
            for (const impl of iface.implementations) {
                impls.push(this.linkFormatter(impl, this.metadata));
            }
            md.bullet(`${markdown_doc_1.MarkdownDocument.italic('Implemented By:')} ${impls.join(', ')}`);
            md.lines('');
        }
        if (iface.docs) {
            md.docs(iface.docs, this.language);
        }
        md.section(this.visitInstanceMethods(iface.instanceMethods));
        md.section(this.visitProperties(iface.properties));
        return md;
    }
    visitEnum(enu) {
        const md = new markdown_doc_1.MarkdownDocument({
            id: this.anchorFormatter({
                id: enu.id,
                displayName: enu.displayName,
                fqn: enu.fqn,
                ...this.metadata,
            }),
            header: { title: enu.displayName },
        });
        if (enu.docs) {
            md.docs(enu.docs, this.language);
        }
        md.section(this.visitEnumMembers(enu.members));
        return md;
    }
    visitEnumMembers(enus) {
        if (enus.length === 0) {
            return markdown_doc_1.MarkdownDocument.EMPTY;
        }
        const md = new markdown_doc_1.MarkdownDocument({ header: { title: 'Members' } });
        md.table(this.createTable(enus));
        md.split();
        for (const enu of enus) {
            md.section(this.visitEnumMember(enu));
        }
        return md;
    }
    visitProperties(properties) {
        if (properties.length === 0) {
            return markdown_doc_1.MarkdownDocument.EMPTY;
        }
        const md = new markdown_doc_1.MarkdownDocument({ header: { title: 'Properties' } });
        md.table(this.createTableWithTypes(properties));
        md.split();
        for (const prop of properties) {
            md.section(this.visitProperty(prop));
        }
        return md;
    }
    visitInitializer(init) {
        const md = new markdown_doc_1.MarkdownDocument({
            id: this.anchorFormatter({
                id: init.id,
                displayName: init.displayName,
                fqn: init.fqn,
                ...this.metadata,
            }),
            header: {
                title: 'Initializers',
            },
        });
        if (init.usage) {
            md.code(this.language.toString(), init.usage);
        }
        md.table(this.createTableWithTypes(init.parameters));
        md.split();
        for (const param of init.parameters) {
            md.section(this.visitParameter(param));
        }
        return md;
    }
    visitInstanceMethods(methods) {
        if (methods.length === 0) {
            return markdown_doc_1.MarkdownDocument.EMPTY;
        }
        const md = new markdown_doc_1.MarkdownDocument({ header: { title: 'Methods' } });
        md.table(this.createTable(methods));
        md.split();
        for (const method of methods) {
            md.section(this.visitInstanceMethod(method));
        }
        return md;
    }
    visitStaticFunctions(methods) {
        if (methods.length === 0) {
            return markdown_doc_1.MarkdownDocument.EMPTY;
        }
        const md = new markdown_doc_1.MarkdownDocument({ header: { title: 'Static Functions' } });
        md.table(this.createTable(methods));
        md.split();
        for (const method of methods) {
            md.section(this.visitStaticFunction(method));
        }
        return md;
    }
    visitConstants(constants) {
        if (constants.length === 0) {
            return markdown_doc_1.MarkdownDocument.EMPTY;
        }
        const md = new markdown_doc_1.MarkdownDocument({ header: { title: 'Constants' } });
        md.table(this.createTableWithTypes(constants));
        md.split();
        for (const con of constants) {
            md.section(this.visitConstant(con));
        }
        return md;
    }
    visitEnumMember(em) {
        const md = new markdown_doc_1.MarkdownDocument({
            id: this.anchorFormatter({
                id: em.id,
                displayName: em.displayName,
                fqn: em.fqn,
                ...this.metadata,
            }),
            header: {
                title: em.displayName,
                pre: true,
                strike: em.docs.deprecated,
            },
        });
        if (em.docs.deprecated) {
            md.bullet(`${markdown_doc_1.MarkdownDocument.italic('Deprecated:')} ${em.docs.deprecationReason}`);
            md.lines('');
        }
        if (em.docs) {
            md.docs(em.docs, this.language);
        }
        md.split();
        md.lines('');
        return md;
    }
    visitProperty(prop) {
        const optionality = prop.optional
            ? 'Optional'
            : 'Required';
        const md = new markdown_doc_1.MarkdownDocument({
            id: this.anchorFormatter({
                id: prop.id,
                displayName: prop.displayName,
                fqn: prop.fqn,
                ...this.metadata,
            }),
            header: {
                title: prop.displayName,
                sup: optionality,
                pre: true,
                strike: prop.docs.deprecated,
            },
        });
        if (prop.docs.deprecated) {
            md.bullet(`${markdown_doc_1.MarkdownDocument.italic('Deprecated:')} ${prop.docs.deprecationReason}`);
            md.lines('');
        }
        if (prop.usage) {
            md.code(this.language.toString(), prop.usage);
        }
        const metadata = {
            Type: this.typeFormatter(prop.type, this.metadata, this.linkFormatter),
        };
        if (prop.default) {
            const sanitized = markdown_doc_1.MarkdownDocument.sanitize(prop.default);
            metadata.Default = markdown_doc_1.MarkdownDocument.removeNewlines(sanitized);
        }
        for (const [key, value] of Object.entries(metadata)) {
            md.bullet(`${markdown_doc_1.MarkdownDocument.italic(`${key}:`)} ${value}`);
        }
        md.lines('');
        if (prop.docs) {
            md.docs(prop.docs, this.language);
        }
        md.split();
        return md;
    }
    visitParameter(parameter) {
        const optionality = parameter.optional ? 'Optional' : 'Required';
        const md = new markdown_doc_1.MarkdownDocument({
            id: this.anchorFormatter({
                id: parameter.id,
                displayName: parameter.displayName,
                fqn: parameter.fqn,
                ...this.metadata,
            }),
            header: {
                title: parameter.displayName,
                sup: optionality,
                pre: true,
                strike: parameter.docs.deprecated,
            },
        });
        if (parameter.docs.deprecated) {
            md.bullet(`${markdown_doc_1.MarkdownDocument.italic('Deprecated:')} ${parameter.docs.deprecationReason}`);
            md.lines('');
        }
        const metadata = {
            Type: this.typeFormatter(parameter.type, this.metadata, this.linkFormatter),
        };
        if (parameter.default) {
            const sanitized = markdown_doc_1.MarkdownDocument.sanitize(parameter.default);
            metadata.Default = markdown_doc_1.MarkdownDocument.removeNewlines(sanitized);
        }
        for (const [key, value] of Object.entries(metadata)) {
            md.bullet(`${markdown_doc_1.MarkdownDocument.italic(`${key}:`)} ${value}`);
        }
        md.lines('');
        if (parameter.docs) {
            md.docs(parameter.docs, this.language);
        }
        md.split();
        return md;
    }
    visitInstanceMethod(method) {
        const md = new markdown_doc_1.MarkdownDocument({
            id: this.anchorFormatter({
                id: method.id,
                displayName: method.displayName,
                fqn: method.fqn,
                ...this.metadata,
            }),
            header: {
                title: method.displayName,
                pre: true,
                strike: method.docs.deprecated,
            },
        });
        if (method.usage) {
            md.code(this.language.toString(), method.usage);
        }
        if (method.docs) {
            md.docs(method.docs, this.language);
        }
        for (const param of method.parameters) {
            md.section(this.visitParameter(param));
        }
        return md;
    }
    visitStaticFunction(method) {
        const md = new markdown_doc_1.MarkdownDocument({
            id: this.anchorFormatter({
                id: method.id,
                displayName: method.displayName,
                fqn: method.fqn,
                ...this.metadata,
            }),
            header: {
                title: method.displayName,
                pre: true,
                strike: method.docs.deprecated,
            },
        });
        if (method.usage) {
            md.code(this.language.toString(), method.usage);
        }
        if (method.docs) {
            md.docs(method.docs, this.language);
        }
        for (const param of method.parameters) {
            md.section(this.visitParameter(param));
        }
        return md;
    }
    visitConstant(constant) {
        return this.visitProperty(constant);
    }
    createTable(items) {
        var _a, _b, _c;
        const tableRows = [];
        tableRows.push(['Name', 'Description'].map(markdown_doc_1.MarkdownDocument.bold));
        for (const item of items) {
            const link = markdown_doc_1.MarkdownDocument.pre(this.linkFormatter({
                fqn: item.fqn,
                displayName: item.displayName,
                id: item.id,
                ...this.metadata,
            }, this.metadata));
            const description = ((_a = item.docs) === null || _a === void 0 ? void 0 : _a.summary) && ((_b = item.docs) === null || _b === void 0 ? void 0 : _b.summary.length) > 0
                ? (_c = item.docs) === null || _c === void 0 ? void 0 : _c.summary
                : markdown_doc_1.MarkdownDocument.italic('No description.');
            tableRows.push([link, description]);
        }
        return tableRows;
    }
    createTableWithTypes(items) {
        var _a, _b, _c;
        const tableRows = [];
        tableRows.push(['Name', 'Type', 'Description'].map(markdown_doc_1.MarkdownDocument.bold));
        for (const item of items) {
            const link = markdown_doc_1.MarkdownDocument.pre(this.linkFormatter({
                fqn: item.fqn,
                displayName: item.displayName,
                id: item.id,
                ...this.metadata,
            }, this.metadata));
            const type = markdown_doc_1.MarkdownDocument.pre(this.typeFormatter(item.type, this.metadata, this.linkFormatter));
            const description = ((_a = item.docs) === null || _a === void 0 ? void 0 : _a.summary) && ((_b = item.docs) === null || _b === void 0 ? void 0 : _b.summary.length) > 0
                ? (_c = item.docs) === null || _c === void 0 ? void 0 : _c.summary
                : markdown_doc_1.MarkdownDocument.italic('No description.');
            tableRows.push([link, type, description]);
        }
        return tableRows;
    }
}
exports.MarkdownRenderer = MarkdownRenderer;
function sanitize(str) {
    return str.replace(/ /g, '-');
}
const defaultAnchorFormatter = (type) => {
    // HTML5 allows any character in IDs /except/ whitespace
    return sanitize(type.id);
};
exports.defaultAnchorFormatter = defaultAnchorFormatter;
const defaultLinkFormatter = (type, metadata) => {
    if (type.packageName === metadata.packageName && type.submodule === metadata.submodule) {
        return `<a href="#${sanitize(type.id)}">${type.displayName}</a>`;
    }
    else {
        // do not display a link if the type isn't in this document
        return type.fqn;
    }
};
exports.defaultLinkFormatter = defaultLinkFormatter;
function isJsiiType(value) {
    return (value !== null
        && typeof value === 'object'
        && (value === null || value === void 0 ? void 0 : value.fqn)
        && (value === null || value === void 0 ? void 0 : value.id)
        && (value === null || value === void 0 ? void 0 : value.displayName));
}
const defaultTypeFormatter = (type, metadata, linkFormatter) => {
    var _a;
    let result = type.formattingPattern;
    const typeRefs = [];
    for (const typeRef of (_a = type.types) !== null && _a !== void 0 ? _a : []) {
        if (isJsiiType(typeRef)) {
            typeRefs.push(linkFormatter(typeRef, metadata));
        }
        else {
            typeRefs.push((0, exports.defaultTypeFormatter)(typeRef, metadata, linkFormatter));
        }
    }
    // substitute referred types into the original string
    const placeholderMatcher = /\%/g;
    for (const typeRef of typeRefs) {
        const matches = placeholderMatcher.exec(result);
        if (!matches) {
            // it's possible the number of %'s doesn't match the number of types provided
            // e.g. csharp unions are currently rendered to `{ name: 'object', types: [type1, type2] }`
            continue;
        }
        const insertionIdx = matches.index;
        result = result.substring(0, insertionIdx) + typeRef + result.substring(insertionIdx + 1);
    }
    return result;
};
exports.defaultTypeFormatter = defaultTypeFormatter;
//# sourceMappingURL=data:application/json;base64,