"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoTranspile = void 0;
const Case = __importStar(require("case"));
const reflect = __importStar(require("jsii-reflect"));
const transpile = __importStar(require("./transpile"));
const schema_1 = require("../schema");
class GoTranspile extends transpile.TranspileBase {
    constructor() {
        super(transpile.Language.GO);
    }
    moduleLike(moduleLike) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (moduleLike instanceof reflect.Submodule) {
            const parent = this.moduleLike(this.getParentModule(moduleLike));
            const parentFqn = parent.submodule
                ? `${parent.name}/${parent.submodule}`
                : parent.name;
            // `packageName` can be specified explicitly in configuration or
            // auto-generated from node package name.
            // Example: @aws-cdk/aws-ecr -> awscdkawsecr
            const packageName = (_c = (_b = (_a = moduleLike.targets) === null || _a === void 0 ? void 0 : _a.go) === null || _b === void 0 ? void 0 : _b.packageName) !== null && _c !== void 0 ? _c : moduleLike.name.toLowerCase().replace(/[^a-z0-9]/g, '');
            return { name: parentFqn, submodule: packageName };
        }
        else {
            // This is the root module
            const moduleName = (_e = (_d = moduleLike.targets) === null || _d === void 0 ? void 0 : _d.go) === null || _e === void 0 ? void 0 : _e.moduleName;
            // moduleName is required configuration for Go enabled packages
            // Validation in `Documentation` class prevents this
            if (!moduleName) {
                throw new Error('"jsii.targets.go.moduleName" is a required field for Go enabled JSII modules');
            }
            const packageName = (_h = (_g = (_f = moduleLike.targets) === null || _f === void 0 ? void 0 : _f.go) === null || _g === void 0 ? void 0 : _g.packageName) !== null && _h !== void 0 ? _h : moduleLike.name.toLowerCase().replace(/[^a-z0-9]/g, '');
            const version = Number.parseInt(moduleLike.version.split('.')[0]);
            const versionSegment = version >= 2 ? `/v${version}` : '';
            // Example: github.com/aws/constructs-go/constructs/v10
            const name = `${moduleName}/${packageName}${versionSegment}`;
            return { name };
        }
    }
    type(type) {
        const submodule = this.findSubmodule(type);
        const moduleLike = this.moduleLike(submodule !== null && submodule !== void 0 ? submodule : type.assembly);
        const fqn = [moduleLike.name];
        let namespace = type.namespace;
        if (namespace) {
            fqn.push(namespace);
        }
        fqn.push(type.name);
        return new transpile.TranspiledType({
            fqn: fqn.join('.'),
            name: type.name,
            namespace: type.namespace,
            module: moduleLike.name,
            submodule: moduleLike.submodule,
            submodulePath: (0, schema_1.submodulePath)(submodule),
            source: type,
            language: this.language,
        });
    }
    callable(callable) {
        const type = this.type(callable.parentType);
        const isInitializer = reflect.Initializer.isInitializer(callable);
        const name = isInitializer
            ? type.name
            : Case.pascal(callable.name);
        const parameters = callable.parameters.sort(this.optionalityCompare);
        const paramsFormatted = parameters.map(p => this.formatFnParam(this.parameter(p))).join(', ');
        let returnType;
        if (isInitializer) {
            returnType = this.typeReference(callable.parentType.reference);
        }
        else if (reflect.Method.isMethod(callable)) {
            returnType = this.typeReference(callable.returns.type);
        }
        const returns = returnType === null || returnType === void 0 ? void 0 : returnType.toString({
            typeFormatter: (t) => t.name,
        });
        const isStatic = reflect.Method.isMethod(callable) && callable.static;
        const packageName = this.packageName(type);
        const signatures = [`func ${isInitializer ? 'New' : ''}${name}(${paramsFormatted})${returns ? ` ${returns}` : ''}`];
        const invocations = [isInitializer
                ? `${packageName}.New${name}(${paramsFormatted})${returns ? ` ${returns}` : ''}`
                : `${packageName}.${type.name}${isStatic ? '_' : '.'}${name}(${paramsFormatted})${returns ? ` ${returns}` : ''}`];
        return {
            name,
            parentType: type,
            import: this.formatImport(type),
            parameters,
            signatures,
            invocations,
        };
    }
    class(klass) {
        return {
            name: klass.name,
            type: this.type(klass),
        };
    }
    struct(struct) {
        const type = this.type(struct);
        const input = struct.allProperties.map((p) => {
            const property = this.property(p);
            return `\t${property.name}: ${property.typeReference},`;
        });
        return {
            type: type,
            name: struct.name,
            import: this.formatImport(type),
            initialization: this.formatStructBuilder(type, input),
        };
    }
    interface(iface) {
        return {
            name: iface.name,
            type: this.type(iface),
        };
    }
    parameter(parameter) {
        const typeRef = this.typeReference(parameter.type);
        const name = parameter.name;
        return {
            name,
            parentType: this.type(parameter.parentType),
            typeReference: typeRef,
            optional: parameter.optional,
            declaration: this.formatParameter(name, typeRef),
        };
    }
    property(property) {
        const typeRef = this.typeReference(property.type);
        const name = Case.pascal(property.name);
        return {
            name,
            parentType: this.type(property.parentType),
            typeReference: typeRef,
            optional: property.optional,
            declaration: this.formatProperty(name, typeRef, property),
        };
    }
    enum(enu) {
        return {
            fqn: this.type(enu).fqn,
            name: enu.name,
        };
    }
    enumMember(em) {
        return {
            fqn: `${this.enum(em.enumType).fqn}_${em.name}`,
            name: `${em.enumType.name}_${em.name}`,
        };
    }
    unionOf() {
        return this.any();
    }
    listOf(type) {
        return `*[]${type}`;
    }
    mapOf(type) {
        return `*map[string]${type}`;
    }
    any() {
        return 'interface{}';
    }
    void() {
        return '';
    }
    str() {
        return '*string';
    }
    number() {
        return '*f64';
    }
    boolean() {
        return '*bool';
    }
    json() {
        return this.mapOf(this.any());
    }
    date() {
        return '*time.Time';
    }
    readme(readme) {
        return readme;
    }
    formatFnParam(transpiled) {
        return this.formatParameter(transpiled.name, transpiled.typeReference);
    }
    formatImport(type) {
        return `import "${type.module}${type.submodule ? `/${type.submodule}` : ''}"`;
    }
    formatParameter(name, typeReference) {
        const tf = typeReference.toString({
            typeFormatter: (t) => t.name,
        });
        return `${name} ${tf}`;
    }
    formatStructBuilder(type, properties) {
        return [
            `&${this.packageName(type)}.${type.name} {`,
            properties.join('\n'),
            '}',
        ].join('\n');
    }
    ;
    formatProperty(name, typeReference, property) {
        const tf = typeReference.toString({
            typeFormatter: (t) => t.name,
        });
        return property.parentType.isDataType() ? `${name} ${tf}` : `func ${name}() ${tf}`;
    }
    packageName(type) {
        var _a;
        return (_a = type.submodule) !== null && _a !== void 0 ? _a : type.module.split('/').slice(/\/v\d+$/.test(type.module) ? -2 : -1)[0];
    }
}
exports.GoTranspile = GoTranspile;
//# sourceMappingURL=data:application/json;base64,