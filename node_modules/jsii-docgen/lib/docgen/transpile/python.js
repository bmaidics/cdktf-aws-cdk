"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PythonTranspile = void 0;
const Case = __importStar(require("case"));
const reflect = __importStar(require("jsii-reflect"));
const transpile = __importStar(require("./transpile"));
const errors_1 = require("../../errors");
const schema_1 = require("../schema");
// Helpers
const toSnakeCase = (text) => {
    return Case.snake(text !== null && text !== void 0 ? text : '');
};
const formatImport = (type) => {
    if (type.submodule) {
        return `from ${type.module} import ${type.submodule}`;
    }
    return `import ${type.module}`;
};
const formatArguments = (inputs) => {
    return inputs.length === 0 ? '()' : [
        '(',
        inputs.map(i => `  ${i}`).join(',\n'),
        ')',
    ].join('\n');
};
const formatInvocation = (type, inputs, method) => {
    let target;
    if (type.submodule) {
        if (!type.namespace) {
            throw new Error(`Invalid type: ${type.fqn}: Types defined in a submodule (${type.submodule}) must have a namespace. `);
        }
        // we don't include the submodule name here since it is
        // included in the namespace. this works because we import the submodule
        // in this case.
        // TODO - merge `formatInvocation` with `formatImport` since they are inherently coupled.
        target = `${type.namespace}.${type.name}`;
    }
    else {
        target = type.fqn;
    }
    if (method) {
        target = `${target}.${method}`;
    }
    return `${target}${formatArguments(inputs)}`;
};
const formatSignature = (name, inputs, returns) => {
    const def = 'def ';
    return `${def}${name}${formatArguments(inputs)} -> ${returns || 'None'}`;
};
/**
 * Hack to convert a jsii property to a parameter for
 * python specific parameter expansion.
 */
const propertyToParameter = (callable, property) => {
    return {
        docs: property.docs,
        method: callable,
        name: property.name,
        optional: property.optional,
        parentType: callable.parentType,
        spec: property.spec,
        system: property.system,
        type: property.type,
        variadic: false,
    };
};
/**
 * A python transpiler.
 */
class PythonTranspile extends transpile.TranspileBase {
    constructor() {
        super(transpile.Language.PYTHON);
    }
    readme(readme) {
        return readme;
    }
    unionOf(types) {
        return `${this.typing('Union')}[${types.join(', ')}]`;
    }
    listOf(type) {
        return `${this.typing('List')}[${type}]`;
    }
    mapOf(type) {
        return `${this.typing('Mapping')}[${type}]`;
    }
    any() {
        return this.typing('Any');
    }
    void() {
        return 'None';
    }
    boolean() {
        return 'bool';
    }
    str() {
        return 'str';
    }
    number() {
        return `${this.typing('Union')}[int, float]`;
    }
    date() {
        return 'datetime.datetime';
    }
    enum(enu) {
        return {
            fqn: this.type(enu).fqn,
            name: enu.name,
        };
    }
    enumMember(em) {
        return {
            fqn: `${this.enum(em.enumType).fqn}.${em.name}`,
            name: em.name,
        };
    }
    json() {
        return 'any';
    }
    property(property) {
        const name = property.const ? property.name : toSnakeCase(property.name);
        const typeRef = this.typeReference(property.type);
        return {
            name,
            parentType: this.type(property.parentType),
            typeReference: typeRef,
            optional: property.optional,
            declaration: this.formatProperty(name, typeRef),
        };
    }
    class(klass) {
        return {
            name: klass.name,
            type: this.type(klass),
        };
    }
    parameter(parameter) {
        const name = toSnakeCase(parameter.name);
        const typeRef = this.typeReference(parameter.type);
        return {
            name,
            parentType: this.type(parameter.parentType),
            typeReference: typeRef,
            optional: parameter.optional,
            declaration: this.formatProperty(name, typeRef),
        };
    }
    struct(struct) {
        const type = this.type(struct);
        const inputs = struct.allProperties.map((p) => this.formatParameters(this.property(p)));
        return {
            type: type,
            name: struct.name,
            import: formatImport(type),
            initialization: formatInvocation(type, inputs),
        };
    }
    callable(callable) {
        const type = this.type(callable.parentType);
        const parameters = new Array();
        for (const p of callable.parameters.sort(this.optionalityCompare)) {
            if (!this.isStruct(p)) {
                parameters.push(p);
            }
            else {
                // struct parameters are expanded to the individual struct properties
                const struct = p.parentType.system.findInterface(p.type.fqn);
                for (const property of struct.allProperties) {
                    const parameter = propertyToParameter(callable, property);
                    parameters.push(parameter);
                }
            }
        }
        const name = toSnakeCase(callable.name);
        const inputs = parameters.map((p) => this.formatParameters(this.parameter(p)));
        let returnType;
        if (reflect.Initializer.isInitializer(callable)) {
            returnType = this.typeReference(callable.parentType.reference);
        }
        else if (reflect.Method.isMethod(callable)) {
            returnType = this.typeReference(callable.returns.type);
        }
        const returns = returnType === null || returnType === void 0 ? void 0 : returnType.toString({
            typeFormatter: (t) => t.name,
        });
        return {
            name,
            parentType: type,
            import: formatImport(type),
            parameters,
            signatures: [formatSignature(name, inputs, returns)],
            invocations: [formatInvocation(type, inputs, callable.kind === reflect.MemberKind.Initializer ? undefined : name)],
        };
    }
    type(type) {
        const submodule = this.findSubmodule(type);
        const moduleLike = this.moduleLike(submodule ? submodule : type.assembly);
        const fqn = [moduleLike.name];
        if (type.namespace) {
            fqn.push(type.namespace);
        }
        fqn.push(type.name);
        return new transpile.TranspiledType({
            fqn: fqn.join('.'),
            name: type.name,
            namespace: type.namespace,
            module: moduleLike.name,
            submodule: moduleLike.submodule,
            submodulePath: (0, schema_1.submodulePath)(submodule),
            source: type,
            language: this.language,
        });
    }
    moduleLike(moduleLike) {
        var _a, _b, _c, _d;
        const pythonModule = (_b = (_a = moduleLike.targets) === null || _a === void 0 ? void 0 : _a.python) === null || _b === void 0 ? void 0 : _b.module;
        if (moduleLike instanceof reflect.Submodule) {
            const assembly = this.getParentModule(moduleLike);
            const parentPythonModule = (_d = (_c = assembly.targets) === null || _c === void 0 ? void 0 : _c.python) === null || _d === void 0 ? void 0 : _d.module;
            // if the submodule does not explicitly defines the python module name, then
            // append a snake case version of the submodule name to the parent module name
            // see https://github.com/aws/jsii/blob/b329670bf9ec222fad5fc0d614dcddd5daca7af5/packages/jsii-pacmak/lib/targets/python/type-name.ts#L455
            const submodulePythonModule = pythonModule !== null && pythonModule !== void 0 ? pythonModule : `${parentPythonModule}.${Case.snake(moduleLike.name)}`;
            const moduleParts = submodulePythonModule.split('.');
            return { name: moduleParts[0], submodule: moduleParts[1] };
        }
        if (!pythonModule) {
            throw new errors_1.LanguageNotSupportedError(`Python is not a supported target for module: ${moduleLike.fqn}`);
        }
        return { name: pythonModule };
    }
    interface(iface) {
        return {
            name: iface.name,
            type: this.type(iface),
        };
    }
    isStruct(p) {
        return p.type.fqn ? p.system.findFqn(p.type.fqn).isDataType() : false;
    }
    typing(type) {
        return `typing.${type}`;
    }
    formatParameters(transpiled) {
        const tf = transpiled.typeReference.toString({
            typeFormatter: (t) => t.name,
        });
        return `${transpiled.name}: ${tf}${transpiled.optional ? ' = None' : ''}`;
    }
    formatProperty(name, typeReference) {
        const tf = typeReference.toString({
            typeFormatter: (t) => t.name,
        });
        return `${name}: ${tf}`;
    }
}
exports.PythonTranspile = PythonTranspile;
//# sourceMappingURL=data:application/json;base64,