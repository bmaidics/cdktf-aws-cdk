"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranspileBase = exports.TranspiledTypeReference = exports.TranspiledType = exports.UnsupportedLanguageError = exports.Language = void 0;
exports.submoduleRelName = submoduleRelName;
const schema_1 = require("../schema");
/**
 * Supported languages to generate documentation in.
 */
class Language {
    /**
     * Transform a literal string to the `Language` object.
     *
     * Throws an `UnsupportedLanguageError` if the language is not supported.
     */
    static fromString(lang) {
        switch (lang) {
            case Language.TYPESCRIPT.name:
            case Language.TYPESCRIPT.targetName:
                return Language.TYPESCRIPT;
            case Language.PYTHON.name:
            case Language.PYTHON.targetName:
                return Language.PYTHON;
            case Language.JAVA.name:
            case Language.JAVA.targetName:
                return Language.JAVA;
            case Language.CSHARP.name:
            case Language.CSHARP.targetName:
                return Language.CSHARP;
            case Language.GO.name:
            case Language.GO.targetName:
                return Language.GO;
            default:
                throw new UnsupportedLanguageError(lang, Language.values());
        }
    }
    static values() {
        return [Language.TYPESCRIPT, Language.PYTHON, Language.JAVA, Language.CSHARP, Language.GO];
    }
    constructor({ name, targetName = name, validator }) {
        this.name = name;
        this.targetName = targetName;
        this.validator = validator;
    }
    isValidConfiguration(config) {
        // TypeScript does not need configuration, all other languages do
        if (config == null) {
            return this === Language.TYPESCRIPT;
        }
        return this.validator(config);
    }
    toString() {
        return this.name;
    }
}
exports.Language = Language;
/**
 * TypeScript.
 */
Language.TYPESCRIPT = new Language({ name: 'typescript', validator: () => true });
/**
 * Python.
 */
Language.PYTHON = new Language({ name: 'python', validator: validatePythonConfig });
/**
 * Java.
 */
Language.JAVA = new Language({ name: 'java', validator: validateJavaConfig });
/**
 * C#
 */
Language.CSHARP = new Language({ name: 'csharp', targetName: 'dotnet', validator: validateDotNetConfig });
/**
 *
 * Go
 */
Language.GO = new Language({ name: 'go', targetName: 'go', validator: validateGoConfig });
function validateDotNetConfig(config) {
    // See: https://aws.github.io/jsii/user-guides/lib-author/configuration/targets/dotnet/
    return typeof config.namespace === 'string' && typeof config.packageId === 'string';
}
function validateJavaConfig(config) {
    var _a, _b;
    // See: https://aws.github.io/jsii/user-guides/lib-author/configuration/targets/java/
    return typeof config.package === 'string' && typeof ((_a = config.maven) === null || _a === void 0 ? void 0 : _a.groupId) === 'string' && typeof ((_b = config.maven) === null || _b === void 0 ? void 0 : _b.artifactId) === 'string';
}
function validatePythonConfig(config) {
    // See: https://aws.github.io/jsii/user-guides/lib-author/configuration/targets/python/
    return typeof config.module === 'string' && typeof config.distName === 'string';
}
function validateGoConfig(config) {
    // See: https://aws.github.io/jsii/user-guides/lib-author/configuration/targets/go/
    return typeof config.moduleName === 'string';
}
class UnsupportedLanguageError extends Error {
    constructor(lang, supported) {
        super(`Unsupported language: ${lang}. Supported languages are: [${supported}]`);
    }
}
exports.UnsupportedLanguageError = UnsupportedLanguageError;
/**
 * Outcome of transpiling a generic jsii type.
 */
class TranspiledType {
    constructor(options) {
        this.source = options.source;
        this.language = options.language;
        this.fqn = options.fqn;
        this.name = options.name;
        this.namespace = options.namespace;
        this.module = options.module;
        this.submodule = options.submodule;
        this.submodulePath = options.submodulePath;
    }
    toJson() {
        return (0, schema_1.filterUndefined)({
            fqn: this.fqn,
            displayName: this.name,
            id: this.source.fqn,
            packageName: this.source.assembly.name,
            packageVersion: this.source.assembly.version,
            submodule: this.submodulePath,
        });
    }
}
exports.TranspiledType = TranspiledType;
/**
 * Outcome of transpiling a jsii type reference.
 */
class TranspiledTypeReference {
    /**
     * Create a type reference that reprensents a primitive.
     */
    static primitive(transpile, ref, primitive) {
        return new TranspiledTypeReference(transpile, ref, primitive);
    }
    /**
     * Create a type reference that represents any type.
     */
    static any(transpile, ref) {
        return new TranspiledTypeReference(transpile, ref, undefined, true);
    }
    /**
     * Create a type reference that represents the void (return) type.
     */
    static void(transpile, ref) {
        return new TranspiledTypeReference(transpile, ref, undefined, undefined, undefined, undefined, undefined, undefined, true);
    }
    /**
     * Create a type reference that reprenets a concrete type.
     */
    static type(transpile, ref, type) {
        return new TranspiledTypeReference(transpile, ref, undefined, undefined, type);
    }
    /**
     * Create a type reference that reprenets an array of a type reference.
     */
    static arrayOfType(transpile, ref, tf) {
        return new TranspiledTypeReference(transpile, ref, undefined, undefined, undefined, tf);
    }
    /**
     * Create a type reference that represents a map of a type reference.
     */
    static mapOfType(transpile, ref, tf) {
        return new TranspiledTypeReference(transpile, ref, undefined, undefined, undefined, undefined, tf);
    }
    /**
     * Create a type reference that represents a union of a type references.
     */
    static unionOfTypes(transpile, ref, tfs) {
        return new TranspiledTypeReference(transpile, ref, undefined, undefined, undefined, undefined, undefined, tfs);
    }
    constructor(
    /**
     * A transpiler
     */
    transpile, 
    /**
     * The original type reference.
     */
    ref, 
    /**
     * Primitive type ref.
     */
    primitive, 
    /**
     * 'Any' type ref
     */
    isAny, 
    /**
     * Concrete type.
     */
    type, 
    /**
     * Array of ref.
     */
    arrayOfType, 
    /**
     * Map of ref.
     */
    mapOfType, 
    /**
     * Union of ref.
     */
    unionOfTypes, 
    /**
     * 'Void' type ref.
     */
    isVoid) {
        this.transpile = transpile;
        this.ref = ref;
        this.primitive = primitive;
        this.isAny = isAny;
        this.type = type;
        this.arrayOfType = arrayOfType;
        this.mapOfType = mapOfType;
        this.unionOfTypes = unionOfTypes;
        this.isVoid = isVoid;
    }
    toString(options) {
        var _a, _b;
        const tFormatter = (_a = options === null || options === void 0 ? void 0 : options.typeFormatter) !== null && _a !== void 0 ? _a : ((t) => t.fqn);
        const sFormatter = (_b = options === null || options === void 0 ? void 0 : options.stringFormatter) !== null && _b !== void 0 ? _b : ((s) => s);
        if (this.primitive) {
            return sFormatter(this.primitive);
        }
        if (this.type) {
            return tFormatter(this.type);
        }
        if (this.isAny) {
            return sFormatter(this.transpile.any());
        }
        if (this.arrayOfType) {
            const ref = this.arrayOfType.toString(options);
            return this.transpile.listOf(ref);
        }
        if (this.mapOfType) {
            const ref = this.mapOfType.toString(options);
            return this.transpile.mapOf(ref);
        }
        if (this.unionOfTypes) {
            const refs = this.unionOfTypes.map((t) => t.toString(options));
            return this.transpile.unionOf(refs);
        }
        if (this.isVoid) {
            return sFormatter(this.transpile.void());
        }
        throw new Error(`Invalid type reference: ${this.ref.toString()}`);
    }
    toJson() {
        if (this.primitive) {
            return {
                formattingPattern: this.primitive,
            };
        }
        if (this.type) {
            if (!this.ref.fqn) {
                throw new Error(`Original type reference for ${this.type.fqn} does not have a fqn.`);
            }
            // If we are running in a test, report a fake stable version since types
            // may belong to dependency packages, which could be specified with caret
            // dependencies - this means the packageVersion of a type like
            // `construct.Construct` will be set to whichever version is installed.
            // This is okay in practice, but makes snapshot tests inconsistent.
            const IS_TEST_RUN = process.env.NODE_ENV === 'test';
            const packageVersion = IS_TEST_RUN ? '99.99.99' : this.type.source.assembly.version;
            return {
                formattingPattern: '%',
                types: [
                    (0, schema_1.filterUndefined)({
                        id: this.ref.fqn,
                        displayName: this.type.name,
                        fqn: this.type.fqn,
                        packageName: this.type.source.assembly.name,
                        packageVersion,
                        submodule: this.type.submodulePath,
                    }),
                ],
            };
        }
        if (this.isAny) {
            return {
                formattingPattern: this.transpile.any(),
            };
        }
        if (this.arrayOfType) {
            return {
                formattingPattern: this.transpile.listOf('%'),
                types: [this.arrayOfType.toJson()],
            };
        }
        if (this.mapOfType) {
            return {
                formattingPattern: this.transpile.mapOf('%'),
                types: [this.mapOfType.toJson()],
            };
        }
        if (this.unionOfTypes) {
            const inner = Array(this.unionOfTypes.length).fill('%');
            return {
                formattingPattern: this.transpile.unionOf(inner),
                types: this.unionOfTypes.map((t) => t.toJson()),
            };
        }
        throw new Error(`Invalid type reference: ${this.ref.toString()}`);
    }
}
exports.TranspiledTypeReference = TranspiledTypeReference;
/**
 * Common functionality between different transpilers.
 */
class TranspileBase {
    constructor(language) {
        this.language = language;
        this.parentModulesCache = new Map();
        this.submodulesCache = new Map();
    }
    typeReference(ref) {
        if (ref.type) {
            const transpiled = this.type(ref.type);
            return TranspiledTypeReference.type(this, ref, transpiled);
        }
        if (ref.unionOfTypes) {
            const transpiled = ref.unionOfTypes.map((t) => this.typeReference(t));
            return TranspiledTypeReference.unionOfTypes(this, ref, transpiled);
        }
        if (ref.arrayOfType) {
            const transpiled = this.typeReference(ref.arrayOfType);
            return TranspiledTypeReference.arrayOfType(this, ref, transpiled);
        }
        if (ref.mapOfType) {
            const transpiled = this.typeReference(ref.mapOfType);
            return TranspiledTypeReference.mapOfType(this, ref, transpiled);
        }
        if (ref.isAny) {
            return TranspiledTypeReference.any(this, ref);
        }
        if (ref.primitive) {
            let transpiled;
            switch (ref.primitive) {
                case 'string':
                    transpiled = this.str();
                    break;
                case 'boolean':
                    transpiled = this.boolean();
                    break;
                case 'number':
                    transpiled = this.number();
                    break;
                case 'date':
                    transpiled = this.date();
                    break;
                case 'json':
                    transpiled = this.json();
                    break;
                default:
                    throw new Error(`Unsupported primitive type '${ref.primitive}'`);
            }
            return TranspiledTypeReference.primitive(this, ref, transpiled);
        }
        if (ref.void) {
            return TranspiledTypeReference.void(this, ref);
        }
        throw new Error(`Unsupported type: ${ref.toString()}`);
    }
    findSubmodule(type) {
        if (this.submodulesCache.has(type.fqn)) {
            return this.submodulesCache.get(type.fqn);
        }
        let submodule = undefined;
        if (type.namespace) {
            // if the type is in a submodule, the submodule name is the first
            // part of the namespace. we construct the full submodule fqn and search for it.
            const submoduleFqn = `${type.assembly.name}.${type.namespace.split('.')[0]}`;
            const submodules = type.assembly.allSubmodules.filter((s) => s.fqn === submoduleFqn);
            if (submodules.length > 1) {
                // can never happen, but the array data structure forces this handling.
                throw new Error(`Found multiple submodulues with fqn ${submoduleFqn}`);
            }
            if (submodules.length === 0) {
                submodule = undefined;
            }
            // type is inside this submodule.
            submodule = submodules[0];
        }
        this.submodulesCache.set(type.fqn, submodule);
        return submodule;
    }
    getParentModule(moduleLike) {
        const cached = this.parentModulesCache.get(moduleLike.fqn);
        if (cached)
            return cached;
        const types = moduleLike.types;
        if (types.length === 0) {
            throw new Error(`unable to determine assembly since module does not have any types: ${moduleLike.fqn}`);
        }
        const parent = types[0].assembly;
        this.parentModulesCache.set(moduleLike.fqn, parent);
        return parent;
    }
    optionalityCompare(p1, p2) {
        if (!p1.optional && p2.optional) {
            return -1;
        }
        if (!p2.optional && p1.optional) {
            return 1;
        }
        return 0;
    }
}
exports.TranspileBase = TranspileBase;
/**
 * Return the root-relative name for a submodule
 *
 * Ex: for a submodule `asm.sub1.sub2`, return `sub1.sub2`.
 */
function submoduleRelName(submodule) {
    return submodule.fqn.split('.').slice(1).join('.');
}
//# sourceMappingURL=data:application/json;base64,