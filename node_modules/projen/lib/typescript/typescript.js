"use strict";
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeScriptLibraryProject = exports.TypeScriptAppProject = exports.TypeScriptProject = exports.TsJestTsconfig = exports.TsJestDiagnostics = exports.TsJestBabelConfig = void 0;
exports.mergeTsconfigOptions = mergeTsconfigOptions;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path = require("path");
const semver = require("semver");
const common_1 = require("../common");
const component_1 = require("../component");
const javascript_1 = require("../javascript");
const util_1 = require("../javascript/util");
const sample_file_1 = require("../sample-file");
const textfile_1 = require("../textfile");
const typescript_1 = require("../typescript");
const util_2 = require("../util");
/**
 * @see https://kulshekhar.github.io/ts-jest/docs/getting-started/options/babelConfig/
 */
class TsJestBabelConfig {
    /**
     * Disables the use of Babel
     */
    static disabled() {
        return new TsJestBabelConfig(false);
    }
    /**
     * Enables Babel processing
     *
     * `ts-jest` will try to find an existing Babel configuration and pass it to the `babel-jest` processor.
     */
    static autoDetectConfig() {
        return new TsJestBabelConfig(true);
    }
    /**
     * Path to a babelrc file
     *
     * The path should be relative to the current working directory where you start Jest from. You can also use `<rootDir>` in the path.
     */
    static fromFile(filePath) {
        return new TsJestBabelConfig(filePath);
    }
    /**
     * Inline compiler options
     * @see https://babeljs.io/docs/options
     */
    static custom(config) {
        return new TsJestBabelConfig(config);
    }
    constructor(config) {
        this.config = config;
    }
    /**
     * @jsii ignore
     * @internal
     */
    toJSON() {
        return this.config;
    }
}
exports.TsJestBabelConfig = TsJestBabelConfig;
_a = JSII_RTTI_SYMBOL_1;
TsJestBabelConfig[_a] = { fqn: "projen.typescript.TsJestBabelConfig", version: "0.87.0" };
/**
 * @see https://kulshekhar.github.io/ts-jest/docs/getting-started/options/diagnostics/
 */
class TsJestDiagnostics {
    /**
     * Enable all diagnostics.
     */
    static all() {
        return new TsJestDiagnostics(true);
    }
    /**
     * Disable all diagnostics.
     */
    static none() {
        return new TsJestDiagnostics(false);
    }
    /**
     * Provide a custom diagnostics configuration.
     *
     * @see https://kulshekhar.github.io/ts-jest/docs/getting-started/options/diagnostics/
     */
    static custom(config) {
        return new TsJestDiagnostics(config);
    }
    constructor(config) {
        this.config = config;
    }
    /**
     * @jsii ignore
     * @internal
     */
    toJSON() {
        return this.config;
    }
}
exports.TsJestDiagnostics = TsJestDiagnostics;
_b = JSII_RTTI_SYMBOL_1;
TsJestDiagnostics[_b] = { fqn: "projen.typescript.TsJestDiagnostics", version: "0.87.0" };
/**
 * @see https://kulshekhar.github.io/ts-jest/docs/getting-started/options/tsconfig/
 */
class TsJestTsconfig {
    /**
     * Uses `tsconfig.json` if found, or the built-in default TypeScript compiler options.
     */
    static auto() {
        return new TsJestTsconfig(true);
    }
    /**
     * Force` ts-jest` to use its built-in defaults even if there is a `tsconfig.json` in your project.
     */
    static builtInDefaults() {
        return new TsJestTsconfig(false);
    }
    /**
     * Path to a `tsconfig` file
     *
     * The path should be relative to the current working directory where you start Jest from. You can also use `<rootDir>` in the path to start from the project root dir.
     */
    static fromFile(filePath) {
        return new TsJestTsconfig(filePath);
    }
    /**
     * Inline compiler options
     *
     * @see TypescriptConfigOptions
     */
    static custom(config) {
        return new TsJestTsconfig(config);
    }
    constructor(config) {
        this.config = config;
    }
    /**
     * @jsii ignore
     * @internal
     */
    toJSON() {
        return this.config;
    }
}
exports.TsJestTsconfig = TsJestTsconfig;
_c = JSII_RTTI_SYMBOL_1;
TsJestTsconfig[_c] = { fqn: "projen.typescript.TsJestTsconfig", version: "0.87.0" };
/**
 * TypeScript project
 * @pjid typescript
 */
class TypeScriptProject extends javascript_1.NodeProject {
    constructor(options) {
        super({
            ...options,
            // disable .projenrc.js if typescript is enabled
            projenrcJs: options.projenrcTs ? false : options.projenrcJs,
            jestOptions: {
                ...options.jestOptions,
                jestConfig: {
                    ...options.jestOptions?.jestConfig,
                    testMatch: options.jestOptions?.jestConfig?.testMatch ?? [],
                },
            },
        });
        this.srcdir = options.srcdir ?? "src";
        this.libdir = options.libdir ?? "lib";
        this.docgen = options.docgen;
        this.docsDirectory = options.docsDirectory ?? "docs/";
        const tsconfigFilename = options.tsconfig?.fileName;
        this.compileTask.exec(["tsc", "--build", tsconfigFilename].filter(Boolean).join(" "));
        this.watchTask = this.addTask("watch", {
            description: "Watch & compile in the background",
            exec: ["tsc", "--build", "-w", tsconfigFilename]
                .filter(Boolean)
                .join(" "),
        });
        this.testdir = options.testdir ?? "test";
        this.gitignore.include(`/${this.testdir}/`);
        this.npmignore?.exclude(`/${this.testdir}/`);
        // if the test directory is under `src/`, then we will run our tests against
        // the javascript files and not let jest compile it for us.
        const compiledTests = this.testdir.startsWith(this.srcdir + path.posix.sep);
        if (options.entrypointTypes || this.entrypoint !== "") {
            const entrypointPath = path.join(path.dirname(this.entrypoint), path.basename(this.entrypoint, ".js"));
            const normalizedPath = (0, util_2.normalizePersistedPath)(entrypointPath);
            const entrypointTypes = options.entrypointTypes ?? `${normalizedPath}.d.ts`;
            this.package.addField("types", entrypointTypes);
        }
        const compilerOptionDefaults = {
            alwaysStrict: true,
            declaration: true,
            esModuleInterop: true,
            experimentalDecorators: true,
            inlineSourceMap: true,
            inlineSources: true,
            lib: ["es2019"],
            module: "CommonJS",
            noEmitOnError: false,
            noFallthroughCasesInSwitch: true,
            noImplicitAny: true,
            noImplicitReturns: true,
            noImplicitThis: true,
            noUnusedLocals: true,
            noUnusedParameters: true,
            resolveJsonModule: true,
            strict: true,
            strictNullChecks: true,
            strictPropertyInitialization: true,
            stripInternal: true,
            target: "ES2019",
        };
        if (options.disableTsconfigDev && options.disableTsconfig) {
            throw new Error("Cannot specify both 'disableTsconfigDev' and 'disableTsconfig' fields.");
        }
        if (!options.disableTsconfig) {
            this.tsconfig = new javascript_1.TypescriptConfig(this, mergeTsconfigOptions({
                include: [`${this.srcdir}/**/*.ts`],
                // exclude: ['node_modules'], // TODO: shouldn't we exclude node_modules?
                compilerOptions: {
                    rootDir: this.srcdir,
                    outDir: this.libdir,
                    ...compilerOptionDefaults,
                },
            }, options.tsconfig));
        }
        if (options.disableTsconfigDev) {
            this.tsconfigDev = this.tsconfig;
        }
        else {
            const tsconfigDevFile = options.tsconfigDevFile ?? "tsconfig.dev.json";
            this.tsconfigDev = new javascript_1.TypescriptConfig(this, mergeTsconfigOptions({
                fileName: tsconfigDevFile,
                include: [`${this.srcdir}/**/*.ts`, `${this.testdir}/**/*.ts`],
                exclude: ["node_modules"],
                compilerOptions: compilerOptionDefaults,
            }, options.tsconfig, options.tsconfigDev));
        }
        this.gitignore.include(`/${this.srcdir}/`);
        this.npmignore?.exclude(`/${this.srcdir}/`);
        if (this.srcdir !== this.libdir) {
            // separated, can ignore the entire libdir
            this.gitignore.exclude(`/${this.libdir}`);
        }
        else {
            // collocated, can only ignore the compiled output
            this.gitignore.exclude(`/${this.libdir}/**/*.js`);
            this.gitignore.exclude(`/${this.libdir}/**/*.d.ts`);
            this.gitignore.exclude(`/${this.libdir}/**/*.d.ts.map`);
        }
        this.npmignore?.include(`/${this.libdir}/`);
        this.npmignore?.include(`/${this.libdir}/**/*.js`);
        this.npmignore?.include(`/${this.libdir}/**/*.d.ts`);
        this.gitignore.exclude("/dist/");
        this.npmignore?.exclude("dist"); // jsii-pacmak expects this to be "dist" and not "/dist". otherwise it will tamper with it
        this.npmignore?.exclude("/tsconfig.json");
        this.npmignore?.exclude("/.github/");
        this.npmignore?.exclude("/.vscode/");
        this.npmignore?.exclude("/.idea/");
        this.npmignore?.exclude("/.projenrc.js");
        this.npmignore?.exclude("tsconfig.tsbuildinfo");
        if (this.jest) {
            if (compiledTests) {
                this.addJestCompiled(this.jest);
            }
            else {
                this.addJestNoCompile(this.jest, options?.tsJestOptions);
            }
        }
        if (options.eslint ?? true) {
            this.eslint = new javascript_1.Eslint(this, {
                tsconfigPath: `./${this.tsconfigDev.fileName}`,
                dirs: [this.srcdir],
                devdirs: [this.testdir, "build-tools"],
                fileExtensions: [".ts", ".tsx"],
                lintProjenRc: false,
                ...options.eslintOptions,
            });
            this.tsconfigEslint = this.tsconfigDev;
        }
        // when this is a root project
        if (!this.parent) {
            if (options.projenrcTs) {
                new typescript_1.Projenrc(this, options.projenrcTsOptions);
            }
            else {
                // projenrc.js created in NodeProject needs to be added in tsconfigDev
                const projenrcJs = javascript_1.Projenrc.of(this);
                if (projenrcJs) {
                    this.tsconfigDev.addInclude(projenrcJs.filePath);
                }
            }
        }
        const tsver = options.typescriptVersion
            ? `@${options.typescriptVersion}`
            : "";
        this.addDevDeps(`typescript${tsver}`, 
        // @types/node versions numbers match the node runtime versions' major.minor, however, new
        // releases are only created when API changes are included in a node release... We might for
        // example have dependencies that require `node >= 12.22`, but as 12.21 and 12.22 did not
        // include API changes, `@types/node@12.20.x` is the "correct" version to use. As it is not
        // possible to easily determine the correct version to use, we pick up the latest version.
        //
        // Additionally, we default to tracking the 18.x line, as the current earliest LTS release of
        // node is 18.x, so this is what corresponds to the broadest compatibility with supported node
        // runtimes.
        `@types/node@^${semver.major(this.package.minNodeVersion ?? "18.0.0")}`);
        // generate sample code in `src` and `lib` if these directories are empty or non-existent.
        if (options.sampleCode ?? true) {
            new SampleCode(this);
        }
        if (this.docgen) {
            new typescript_1.TypedocDocgen(this);
        }
    }
    /**
     * Tests are compiled to `lib/TESTDIR`, so we don't need jest to compile them
     * for us. just run them directly from javascript.
     */
    addJestCompiled(jest) {
        this.addDevDeps(`@types/jest${jest.jestVersion}`);
        const testout = path.posix.relative(this.srcdir, this.testdir);
        const libtest = path.posix.join(this.libdir, testout);
        const srctest = this.testdir;
        this.npmignore?.exclude(`/${libtest}/`);
        jest.discoverTestMatchPatternsForDirs([libtest], {
            fileExtensionPattern: this.tsconfig?.compilerOptions?.allowJs
                ? undefined
                : "js?(x)",
        });
        jest.addWatchIgnorePattern(`/${this.srcdir}/`);
        const resolveSnapshotPath = (test, ext) => {
            const fullpath = test.replace(libtest, srctest);
            return path.join(path.dirname(fullpath), "__snapshots__", path.basename(fullpath, ".js") + ".ts" + ext);
        };
        const resolveTestPath = (snap, ext) => {
            const filename = path.basename(snap, ".ts" + ext) + ".js";
            const dir = path.dirname(path.dirname(snap)).replace(srctest, libtest);
            return path.join(dir, filename);
        };
        const resolver = new textfile_1.TextFile(this, path.posix.join(common_1.PROJEN_DIR, "jest-snapshot-resolver.js"));
        if (!resolver.marker) {
            resolver.addLine(`// ${resolver.marker}`);
        }
        resolver.addLine('const path = require("path");');
        resolver.addLine(`const libtest = "${libtest}";`);
        resolver.addLine(`const srctest= "${srctest}";`);
        resolver.addLine("module.exports = {");
        resolver.addLine(`  resolveSnapshotPath: ${resolveSnapshotPath.toString()},`);
        resolver.addLine(`  resolveTestPath: ${resolveTestPath.toString()},`);
        resolver.addLine("  testPathForConsistencyCheck: path.join('some', '__tests__', 'example.test.js')");
        resolver.addLine("};");
        jest.addSnapshotResolver(`./${resolver.path}`);
    }
    addJestNoCompile(jest, tsJestOptions) {
        this.addDevDeps(`@types/jest${jest.jestVersion}`, `ts-jest${jest.jestVersion}`);
        jest.discoverTestMatchPatternsForDirs([this.srcdir, this.testdir], {
            fileExtensionPattern: this.tsconfig?.compilerOptions?.allowJs
                ? undefined
                : "ts?(x)",
        });
        // Test for the ts-jest version that was requested;
        //
        // - First, check the `jest` version that is requested via projen properties. This
        //   should be the same as the `ts-jest` version anyway.
        // - If none found, fall back to inspecting the actual `ts-jest` version
        //   that happens to be installed.
        let hasTsJest29;
        if (jest.jestVersion) {
            // We could maybe replace this will full "actual version" checking, but
            // the tests depend on this and the reading of 'package.json' is very
            // awkward to test.
            // Note that we use the requested version of `jest` as a proxy for the
            // version of `ts-jest`, which is what we're actually interested in.
            const major = semver.coerce(jest.jestVersion)?.major;
            hasTsJest29 = major ? major >= 29 : undefined;
        }
        if (hasTsJest29 === undefined) {
            hasTsJest29 = (0, util_1.hasDependencyVersion)(this, "ts-jest", ">= 29");
        }
        // add relevant deps (we treat "unknown" as having a modern ts-jest)
        if (hasTsJest29 !== false) {
            return this.addJestNoCompileModern(jest, tsJestOptions);
        }
        this.addJestNoCompileLegacy(jest, tsJestOptions);
    }
    addJestNoCompileModern(jest, tsJestOptions) {
        jest.config.transform = (0, util_2.deepMerge)([
            {
                [tsJestOptions?.transformPattern ??
                    TypeScriptProject.DEFAULT_TS_JEST_TRANFORM_PATTERN]: new javascript_1.Transform("ts-jest", {
                    tsconfig: TsJestTsconfig.fromFile(this.tsconfigDev.fileName),
                    ...(tsJestOptions?.transformOptions ?? {}),
                }),
            },
            jest.config.transform,
        ]);
    }
    addJestNoCompileLegacy(jest, tsJestOptions) {
        if (tsJestOptions) {
            this.logger.warn("You are using a legacy version (<29) of jest and ts-jest that does not support tsJestOptions, they will be ignored.");
        }
        if (!jest.config.preset) {
            jest.config.preset = "ts-jest";
        }
        jest.config.globals = (0, util_2.deepMerge)([
            {
                "ts-jest": {
                    tsconfig: this.tsconfigDev.fileName,
                },
            },
            jest.config.globals,
        ]);
    }
}
exports.TypeScriptProject = TypeScriptProject;
_d = JSII_RTTI_SYMBOL_1;
TypeScriptProject[_d] = { fqn: "projen.typescript.TypeScriptProject", version: "0.87.0" };
TypeScriptProject.DEFAULT_TS_JEST_TRANFORM_PATTERN = "^.+\\.[t]sx?$";
class SampleCode extends component_1.Component {
    constructor(project) {
        super(project);
        const srcCode = [
            "export class Hello {",
            "  public sayHello() {",
            "    return 'hello, world!';",
            "  }",
            "}",
        ].join("\n");
        const testCode = [
            "import { Hello } from '../src';",
            "",
            "test('hello', () => {",
            "  expect(new Hello().sayHello()).toBe('hello, world!');",
            "});",
        ].join("\n");
        new sample_file_1.SampleDir(project, project.srcdir, {
            files: {
                "index.ts": srcCode,
            },
        });
        if (project.jest) {
            new sample_file_1.SampleDir(project, project.testdir, {
                files: {
                    "hello.test.ts": testCode,
                },
            });
        }
    }
}
/**
 * TypeScript app.
 *
 * @pjid typescript-app
 */
class TypeScriptAppProject extends TypeScriptProject {
    constructor(options) {
        super({
            allowLibraryDependencies: false,
            releaseWorkflow: false,
            entrypoint: "", // "main" is not needed in typescript apps
            package: false,
            ...options,
        });
    }
}
exports.TypeScriptAppProject = TypeScriptAppProject;
_e = JSII_RTTI_SYMBOL_1;
TypeScriptAppProject[_e] = { fqn: "projen.typescript.TypeScriptAppProject", version: "0.87.0" };
/**
 * @deprecated use `TypeScriptProject`
 */
class TypeScriptLibraryProject extends TypeScriptProject {
}
exports.TypeScriptLibraryProject = TypeScriptLibraryProject;
_f = JSII_RTTI_SYMBOL_1;
TypeScriptLibraryProject[_f] = { fqn: "projen.typescript.TypeScriptLibraryProject", version: "0.87.0" };
/**
 * @internal
 */
function mergeTsconfigOptions(...options) {
    const definedOptions = options.filter(Boolean);
    return definedOptions.reduce((previous, current) => ({
        ...previous,
        ...current,
        include: [...(previous.include ?? []), ...(current.include ?? [])],
        exclude: [...(previous.exclude ?? []), ...(current.exclude ?? [])],
        compilerOptions: {
            ...previous.compilerOptions,
            ...current.compilerOptions,
        },
    }), { compilerOptions: {} });
}
//# sourceMappingURL=data:application/json;base64,